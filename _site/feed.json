{
    "version": "https://jsonfeed.org/version/1",
    "title": "Milo's Projects and Ramblings",
    "home_page_url": "http://more.milofultz.com/",
    "feed_url": "http://more.milofultz.com/feed.json",
    "description": "This is my repo for all my weird ideas and projects",
    "icon": "http://more.milofultz.com/apple-touch-icon.png",
    "favicon": "http://more.milofultz.com/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "Milo Fultz",
        "url": "http://more.milofultz.com",
        "avatar": null
    },
    
"items": [
    
        {
            "id": "http://more.milofultz.com/2020/07/06/programming-outlining",
            "title": "Create a better program faster with an outline",
            "summary": "I've written so much spaghetti code for so long and finally learned from my roommate how to write better code. This is how I use this method.",
            "content_text": "I’ve written so much spaghetti code for so long and finally learned from my roommate how to write better code. This is how I use this method.First, stay in abstract thinking as long as possible. The longer you take to implement your concepts, the better.For this example, I will use my Bookmark Crawler idea.Big PictureDescribe what your program will do in abstract terms, as if it was a person doing it, not a computer.  The bookmark crawler will go through your bookmarks and make a list of all the links it can find. Then it will go through all of those links, repeating the process and making an even bigger list of links. After doing this, it will make an HTML file that you can look at and click around.From there, describe how your program will handle data. Start BIG as possible.  The bookmark crawler will take an HTML file of your bookmarks as input and output an HTML file of new links to check out.ChunkingBreak down the process further in abstract terms. What are the distinct actions it will need to take? What would a random stupid guy need if you wanted him to do it?  The bookmark crawler will start by opening your bookmarks file and searching for links. These links, along with their titles, will be added to a list. This list will then be sent off to be crawled. This crawling process will be: opening each page that was found in the bookmarks; opening all the links on the page; and copying down all the links with their titles. This process is repeated with the new links that are found X amount of times, whatever the user determines. Once the crawling process is finished, then a list of these new links will be added to an HTML page for browsing.Determine the biggest distinct functions you can perceive in the description you just created.      Input: Take bookmark file and turn it into a list of links that the program can use.    Crawler: Crawl new links from the bookmark, as well as further links received, taking down needed info.    Export: Make all new links usable in a user-friendly file.  What data types would be best to transfer in between these functions?      Input - IN: HTML file, OUT: List containing relevant information from bookmarks.    Crawler - IN: List of bookmarks info from Input, OUT: List of new links information.    Export - IN: List of new links information, OUT: HTML file.  Outlining FunctionsMake a very rough outline of the program using information from chunking steps. Include only necessary in/out information.# Input: Take bookmark file and turn it into a list of links that the program can use.# IN: HTML file, OUT: List containing relevant information from bookmarks.def input(filename):\turl_list = []\treturn url_list\t# Crawler: Crawl new links from the bookmark, as well as further links received, taking down needed info.# IN: List of bookmarks info from Input, OUT: List of new links information.def crawler(urls):\tfound_urls = []\treturn found_urls\t# Export: Make all new links usable in a user-friendly file.# IN: List of new links information, OUT: HTML file.def export(urls):\t# Pseudocode: create pretty HTML file of new links.\tpassWrite out overview for each function as if you were telling a random stupid guy to do it.  Input: Open the file. Go through the whole file looking for links. Copy down all URLs, titles, and include that you found the link on the bookmarks page. When finished, compile it into a document that can be handled by the Crawler.Do this for all functions and see how you can break down the process into atomistic functions. The more that functions can be used and reused all around the whole program, the better.Once the program has been broken down into its most atomistic functions, start writing pseudocode into them to have an idea of what you’re going to do.# Input: Take bookmark file and turn it into a list of links that the program can use.# IN: HTML file, OUT: List containing relevant information from bookmarks.def input(filename):\t#Open the file\t#Go through the whole file looking for links\t#Copy down all URLs, titles, and include that\t#you found the link on the bookmarks page.\t#Compile it into a document that can be \t#handled by the Crawler\turl_list = []\treturn url_listFurther ChunkingLook for similarities in between functions and see if there is any process the functions could share. If so, then take that and break it down into it’s own function. (e.g. in this program, both the crawler and the input need to take all the links off of a given page)TestingWhen you feel it has been broken down fully and the flow of data makes sense, make a basic way to test it as it goes. In Python, this is by adding an if __name__ == '__main__': section. Start with more pseudocode and continue with it until you feel that you can correctly write out the flow using the functions you’ve already created.Start Writing CodeFigure out what is the easiest thing to program and test. Go with the pseudocode you’ve written and start fleshing it out with real functionality. Test each part as you go in the terminal. In the following example, I’ll first test that I can open a file and return the contents of the file.# Input: Take bookmark file and turn it into a list of links that the program can use.# IN: HTML file, OUT: List containing relevant information from bookmarks.def input(filename):\t#Open the file\twith open(filename, 'r') as f:\t\thtml = f.read()\t#Go through the whole file looking for links\t#Copy down all URLs, titles, and include that\t#you found the link on the bookmarks page.\t#Compile it into a document that can be \t#handled by the Crawler\turl_list = []\t# return url_list\treturn html\tif __name__ = '__main__':\tprint(input('bookmarks.html'))\t############Terminal############$ python3 bm_crawl.py&lt;html&gt;\t&lt;head&gt;\t...\t&lt;/body&gt;&lt;/html&gt;$Repeat this process with each element of your code, ensuring that it works exactly as you expect. You don’t have to go in a linear fashion, if it is easier or more sensible to jump around.Don’t be afraid to go back to previous steps if you realize further possibilities of chunking or other revisions.",
            "content_html": "<p>I’ve written so much spaghetti code for so long and finally learned from my roommate how to write better code. This is how I use this method.</p><p>First, <strong>stay in abstract thinking as long as possible. The longer you take to implement your concepts, the better.</strong></p><p>For this example, I will use my <a href=\"/2020/07/02/bmcrawl\">Bookmark Crawler</a> idea.</p><hr /><h2 id=\"big-picture\">Big Picture</h2><p>Describe what your program will do in abstract terms, as if it was a person doing it, not a computer.</p><blockquote>  <p>The bookmark crawler will go through your bookmarks and make a list of all the links it can find. Then it will go through all of <em>those</em> links, repeating the process and making an even bigger list of links. After doing this, it will make an HTML file that you can look at and click around.</p></blockquote><p>From there, describe how your program will handle data. Start BIG as possible.</p><blockquote>  <p>The bookmark crawler will take an HTML file of your bookmarks as input and output an HTML file of new links to check out.</p></blockquote><h2 id=\"chunking\">Chunking</h2><p>Break down the process further in abstract terms. What are the distinct actions it will need to take? What would a random stupid guy need if you wanted him to do it?</p><blockquote>  <p>The bookmark crawler will start by opening your bookmarks file and searching for links. These links, along with their titles, will be added to a list. This list will then be sent off to be crawled. This crawling process will be: opening each page that was found in the bookmarks; opening all the links on the page; and copying down all the links with their titles. This process is repeated with the new links that are found X amount of times, whatever the user determines. Once the crawling process is finished, then a list of these new links will be added to an HTML page for browsing.</p></blockquote><p>Determine the biggest distinct functions you can perceive in the description you just created.</p><blockquote>  <ul>    <li><strong>Input</strong>: Take bookmark file and turn it into a list of links that the program can use.</li>    <li><strong>Crawler</strong>: Crawl new links from the bookmark, as well as further links received, taking down needed info.</li>    <li><strong>Export</strong>: Make all new links usable in a user-friendly file.</li>  </ul></blockquote><p>What data types would be best to transfer in between these functions?</p><blockquote>  <ul>    <li><strong>Input</strong> - IN: HTML file, OUT: List containing relevant information from bookmarks.</li>    <li><strong>Crawler</strong> - IN: List of bookmarks info from Input, OUT: List of new links information.</li>    <li><strong>Export</strong> - IN: List of new links information, OUT: HTML file.</li>  </ul></blockquote><h2 id=\"outlining-functions\">Outlining Functions</h2><p>Make a very rough outline of the program using information from chunking steps. Include only necessary in/out information.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Input: Take bookmark file and turn it into a list of links that the program can use.# IN: HTML file, OUT: List containing relevant information from bookmarks.def input(filename):\turl_list = []\treturn url_list\t# Crawler: Crawl new links from the bookmark, as well as further links received, taking down needed info.# IN: List of bookmarks info from Input, OUT: List of new links information.def crawler(urls):\tfound_urls = []\treturn found_urls\t# Export: Make all new links usable in a user-friendly file.# IN: List of new links information, OUT: HTML file.def export(urls):\t# Pseudocode: create pretty HTML file of new links.\tpass</code></pre></div></div><p>Write out overview for each function as if you were telling a random stupid guy to do it.</p><blockquote>  <p>Input: Open the file. Go through the whole file looking for links. Copy down all URLs, titles, and include that you found the link on the bookmarks page. When finished, compile it into a document that can be handled by the Crawler.</p></blockquote><p>Do this for all functions and see how you can break down the process into atomistic functions. The more that functions can be used and reused all around the whole program, the better.</p><p>Once the program has been broken down into its most atomistic functions, start writing pseudocode into them to have an idea of what you’re going to do.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Input: Take bookmark file and turn it into a list of links that the program can use.# IN: HTML file, OUT: List containing relevant information from bookmarks.def input(filename):\t#Open the file\t#Go through the whole file looking for links\t#Copy down all URLs, titles, and include that\t#you found the link on the bookmarks page.\t#Compile it into a document that can be \t#handled by the Crawler\turl_list = []\treturn url_list</code></pre></div></div><h2 id=\"further-chunking\">Further Chunking</h2><p>Look for similarities in between functions and see if there is any process the functions could share. If so, then take that and break it down into it’s own function. (e.g. in this program, both the crawler and the input need to take all the links off of a given page)</p><h2 id=\"testing\">Testing</h2><p>When you feel it has been broken down fully and the flow of data makes sense, make a basic way to test it as it goes. In Python, this is by adding an <code class=\"highlighter-rouge\">if __name__ == '__main__':</code> section. Start with more pseudocode and continue with it until you feel that you can correctly write out the flow using the functions you’ve already created.</p><h2 id=\"start-writing-code\">Start Writing Code</h2><p>Figure out what is the easiest thing to program and test. Go with the pseudocode you’ve written and start fleshing it out with real functionality. Test each part as you go in the terminal. In the following example, I’ll first test that I can open a file and return the contents of the file.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Input: Take bookmark file and turn it into a list of links that the program can use.# IN: HTML file, OUT: List containing relevant information from bookmarks.def input(filename):\t#Open the file\twith open(filename, 'r') as f:\t\thtml = f.read()\t#Go through the whole file looking for links\t#Copy down all URLs, titles, and include that\t#you found the link on the bookmarks page.\t#Compile it into a document that can be \t#handled by the Crawler\turl_list = []\t# return url_list\treturn html\tif __name__ = '__main__':\tprint(input('bookmarks.html'))\t############Terminal############$ python3 bm_crawl.py<span class=\"nt\">&lt;html&gt;</span>\t<span class=\"nt\">&lt;head&gt;</span>\t...\t<span class=\"nt\">&lt;/body&gt;</span><span class=\"nt\">&lt;/html&gt;</span>$</code></pre></div></div><p>Repeat this process with each element of your code, ensuring that it works exactly as you expect. You don’t have to go in a linear fashion, if it is easier or more sensible to jump around.</p><p>Don’t be afraid to go back to previous steps if you realize further possibilities of chunking or other revisions.</p>",
            "url": "http://more.milofultz.com/2020/07/06/programming-outlining",
            
            
            
            
            
            "date_published": "2020-07-06T00:00:00-07:00",
            "date_modified": "2020-07-06T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://more.milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://more.milofultz.com/2020/07/06/programming-outlining",
            "title": "Programming Outlining",
            "summary": null,
            "content_text": "Create a better program faster with an outlineI&rsquo;ve written so much spaghetti code for so long and finally learned from my roommate how to write better code. This is how I use this method.First, stay in abstract thinking as long as possible. The longer you take to implement your concepts, the better.For this example, I will use my Bookmark Crawler idea.Big PictureDescribe what your program will do in abstract terms, as if it was a person doing it, not a computer.The bookmark crawler will go through your bookmarks and make a list of all the links it can find. Then it will go through all of those links, repeating the process and making an even bigger list of links. After doing this, it will make an HTML file that you can look at and click around.From there, describe how your program will handle data. Start BIG as possible.The bookmark crawler will take an HTML file of your bookmarks as input and output an HTML file of new links to check out.ChunkingBreak down the process further in abstract terms. What are the distinct actions it will need to take? What would a random stupid guy need if you wanted him to do it?The bookmark crawler will start by opening your bookmarks file and searching for links. These links, along with their titles, will be added to a list. This list will then be sent off to be crawled. This crawling process will be: opening each page that was found in the bookmarks; opening all the links on the page; and copying down all the links with their titles. This process is repeated with the new links that are found X amount of times, whatever the user determines. Once the crawling process is finished, then a list of these new links will be added to an HTML page for browsing.Determine the biggest distinct functions you can perceive in the description you just created.Input: Take bookmark file and turn it into a list of links that the program can use.Crawler: Crawl new links from the bookmark, as well as further links received, taking down needed info.Export: Make all new links usable in a user-friendly file.What data types would be best to transfer in between these functions?Input - IN: HTML file, OUT: List containing relevant information from bookmarks.Crawler - IN: List of bookmarks info from Input, OUT: List of new links information.Export - IN: List of new links information, OUT: HTML file.Outlining FunctionsMake a very rough outline of the program using information from chunking steps. Include only necessary in/out information.# Input: Take bookmark file and turn it into a list of links that the program can use.# IN: HTML file, OUT: List containing relevant information from bookmarks.def input(filename):    url_list = []    return url_list# Crawler: Crawl new links from the bookmark, as well as further links received, taking down needed info.# IN: List of bookmarks info from Input, OUT: List of new links information.def crawler(urls):    found_urls = []    return found_urls# Export: Make all new links usable in a user-friendly file.# IN: List of new links information, OUT: HTML file.def export(urls):    # Pseudocode: create pretty HTML file of new links.    passWrite out overview for each function as if you were telling a random stupid guy to do it.Input: Open the file. Go through the whole file looking for links. Copy down all URLs, titles, and include that you found the link on the bookmarks page. When finished, compile it into a document that can be handled by the Crawler.Do this for all functions and see how you can break down the process into atomistic functions. The more that functions can be used and reused all around the whole program, the better.Once the program has been broken down into its most atomistic functions, start writing pseudocode into them to have an idea of what you&rsquo;re going to do.# Input: Take bookmark file and turn it into a list of links that the program can use.# IN: HTML file, OUT: List containing relevant information from bookmarks.def input(filename):    #Open the file    #Go through the whole file looking for links    #Copy down all URLs, titles, and include that    #you found the link on the bookmarks page.    #Compile it into a document that can be     #handled by the Crawler    url_list = []    return url_listFurther ChunkingLook for similarities in between functions and see if there is any process the functions could share. If so, then take that and break it down into it&rsquo;s own function. (e.g. in this program, both the crawler and the input need to take all the links off of a given page)TestingWhen you feel it has been broken down fully and the flow of data makes sense, make a basic way to test it as it goes. In Python, this is by adding an if __name__ == '__main__': section. Start with more pseudocode and continue with it until you feel that you can correctly write out the flow using the functions you&rsquo;ve already created.Start Writing CodeFigure out what is the easiest thing to program and test. Go with the pseudocode you&rsquo;ve written and start fleshing it out with real functionality. Test each part as you go in the terminal. In the following example, I&rsquo;ll first test that I can open a file and return the contents of the file.# Input: Take bookmark file and turn it into a list of links that the program can use.# IN: HTML file, OUT: List containing relevant information from bookmarks.def input(filename):    #Open the file    with open(filename, &#39;r&#39;) as f:        html = f.read()    #Go through the whole file looking for links    #Copy down all URLs, titles, and include that    #you found the link on the bookmarks page.    #Compile it into a document that can be     #handled by the Crawler    url_list = []    # return url_list    return htmlif __name__ = &#39;__main__&#39;:    print(input(&#39;bookmarks.html&#39;))############Terminal############$ python3 bm_crawl.py&lt;html&gt;    &lt;head&gt;    ...    &lt;/body&gt;&lt;/html&gt;$Repeat this process with each element of your code, ensuring that it works exactly as you expect. You don&rsquo;t have to go in a linear fashion, if it is easier or more sensible to jump around.Don&rsquo;t be afraid to go back to previous steps if you realize further possibilities of chunking or other revisions.References:Mason",
            "content_html": "<!DOCTYPE html><html><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"><meta name=\"layout\" content=\"post\"><meta name=\"tags\" content=\"project\"><meta name=\"comments\" content=\"true\"><meta name=\"summary\" content=\"I've written so much spaghetti code for so long and finally learned from my roommate how to write better code. This is how I use this method.\"><meta name=\"description\" content=\"I've written so much spaghetti code for so long and finally learned from my roommate how to write better code. This is how I use this method.\"><style>body {  max-width: 980px;  border: 1px solid #ddd;  outline: 1300px solid #fff;  margin: 16px auto;}body .markdown-body{  padding: 45px;}@font-face {  font-family: fontawesome-mini;  src: url(data:font/woff;charset=utf-8;base64,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) format('woff');}.markdown-body {  font-family: sans-serif;  -ms-text-size-adjust: 100%;  -webkit-text-size-adjust: 100%;  color: #333333;  overflow: hidden;  font-family: \"Helvetica Neue\", Helvetica, \"Segoe UI\", Arial, freesans, sans-serif;  font-size: 16px;  line-height: 1.6;  word-wrap: break-word;}.markdown-body a {  background: transparent;}.markdown-body a:active,.markdown-body a:hover {  outline: 0;}.markdown-body b,.markdown-body strong {  font-weight: bold;}.markdown-body mark {  background: #ff0;  color: #000;  font-style: italic;  font-weight: bold;}.markdown-body sub,.markdown-body sup {  font-size: 75%;  line-height: 0;  position: relative;  vertical-align: baseline;}.markdown-body sup {  top: -0.5em;}.markdown-body sub {  bottom: -0.25em;}.markdown-body h1 {  font-size: 2em;  margin: 0.67em 0;}.markdown-body img {  border: 0;}.markdown-body hr {  -moz-box-sizing: content-box;  box-sizing: content-box;  height: 0;}.markdown-body pre {  overflow: auto;}.markdown-body code,.markdown-body kbd,.markdown-body pre,.markdown-body samp {  font-family: monospace, monospace;  font-size: 1em;}.markdown-body input {  color: inherit;  font: inherit;  margin: 0;}.markdown-body html input[disabled] {  cursor: default;}.markdown-body input {  line-height: normal;}.markdown-body input[type=\"checkbox\"] {  box-sizing: border-box;  padding: 0;}.markdown-body table {  border-collapse: collapse;  border-spacing: 0;}.markdown-body td,.markdown-body th {  padding: 0;}.markdown-body .codehilitetable {  border: 0;  border-spacing: 0;}.markdown-body .codehilitetable tr {  border: 0;}.markdown-body .codehilitetable pre,.markdown-body .codehilitetable div.codehilite {  margin: 0;}.markdown-body .linenos,.markdown-body .code,.markdown-body .codehilitetable td {  border: 0;  padding: 0;}.markdown-body td:not(.linenos) .linenodiv {  padding: 0 !important;}.markdown-body .code {  width: 100%;}.markdown-body .linenos div pre,.markdown-body .linenodiv pre,.markdown-body .linenodiv {  border: 0;  -webkit-border-radius: 0;  -moz-border-radius: 0;  border-radius: 0;  -webkit-border-top-left-radius: 3px;  -webkit-border-bottom-left-radius: 3px;  -moz-border-radius-topleft: 3px;  -moz-border-radius-bottomleft: 3px;  border-top-left-radius: 3px;  border-bottom-left-radius: 3px;}.markdown-body .code div pre,.markdown-body .code div {  border: 0;  -webkit-border-radius: 0;  -moz-border-radius: 0;  border-radius: 0;  -webkit-border-top-right-radius: 3px;  -webkit-border-bottom-right-radius: 3px;  -moz-border-radius-topright: 3px;  -moz-border-radius-bottomright: 3px;  border-top-right-radius: 3px;  border-bottom-right-radius: 3px;}.markdown-body * {  -moz-box-sizing: border-box;  box-sizing: border-box;}.markdown-body input {  font: 13px Helvetica, arial, freesans, clean, sans-serif, \"Segoe UI Emoji\", \"Segoe UI Symbol\";  line-height: 1.4;}.markdown-body a {  color: #4183c4;  text-decoration: none;}.markdown-body a:hover,.markdown-body a:focus,.markdown-body a:active {  text-decoration: underline;}.markdown-body hr {  height: 0;  margin: 15px 0;  overflow: hidden;  background: transparent;  border: 0;  border-bottom: 1px solid #ddd;}.markdown-body hr:before,.markdown-body hr:after {  display: table;  content: \" \";}.markdown-body hr:after {  clear: both;}.markdown-body h1,.markdown-body h2,.markdown-body h3,.markdown-body h4,.markdown-body h5,.markdown-body h6 {  margin-top: 15px;  margin-bottom: 15px;  line-height: 1.1;}.markdown-body h1 {  font-size: 30px;}.markdown-body h2 {  font-size: 21px;}.markdown-body h3 {  font-size: 16px;}.markdown-body h4 {  font-size: 14px;}.markdown-body h5 {  font-size: 12px;}.markdown-body h6 {  font-size: 11px;}.markdown-body blockquote {  margin: 0;}.markdown-body ul,.markdown-body ol {  padding: 0;  margin-top: 0;  margin-bottom: 0;}.markdown-body ol ol,.markdown-body ul ol {  list-style-type: lower-roman;}.markdown-body ul ul ol,.markdown-body ul ol ol,.markdown-body ol ul ol,.markdown-body ol ol ol {  list-style-type: lower-alpha;}.markdown-body dd {  margin-left: 0;}.markdown-body code,.markdown-body pre,.markdown-body samp {  font-family: Consolas, \"Liberation Mono\", Menlo, Courier, monospace;  font-size: 12px;}.markdown-body pre {  margin-top: 0;  margin-bottom: 0;}.markdown-body kbd {  background-color: #e7e7e7;  background-image: -moz-linear-gradient(#fefefe, #e7e7e7);  background-image: -webkit-linear-gradient(#fefefe, #e7e7e7);  background-image: linear-gradient(#fefefe, #e7e7e7);  background-repeat: repeat-x;  border-radius: 2px;  border: 1px solid #cfcfcf;  color: #000;  padding: 3px 5px;  line-height: 10px;  font: 11px Consolas, \"Liberation Mono\", Menlo, Courier, monospace;  display: inline-block;}.markdown-body>*:first-child {  margin-top: 0 !important;}.markdown-body>*:last-child {  margin-bottom: 0 !important;}.markdown-body .headerlink {  font: normal 400 16px fontawesome-mini;  vertical-align: middle;  margin-left: -16px;  float: left;  display: inline-block;  text-decoration: none;  opacity: 0;  color: #333;}.markdown-body .headerlink:focus {  outline: none;}.markdown-body h1 .headerlink {  margin-top: 0.8rem;}.markdown-body h2 .headerlink,.markdown-body h3 .headerlink {  margin-top: 0.6rem;}.markdown-body h4 .headerlink {  margin-top: 0.2rem;}.markdown-body h5 .headerlink,.markdown-body h6 .headerlink {  margin-top: 0;}.markdown-body .headerlink:hover,.markdown-body h1:hover .headerlink,.markdown-body h2:hover .headerlink,.markdown-body h3:hover .headerlink,.markdown-body h4:hover .headerlink,.markdown-body h5:hover .headerlink,.markdown-body h6:hover .headerlink {  opacity: 1;  text-decoration: none;}.markdown-body h1 {  padding-bottom: 0.3em;  font-size: 2.25em;  line-height: 1.2;  border-bottom: 1px solid #eee;}.markdown-body h2 {  padding-bottom: 0.3em;  font-size: 1.75em;  line-height: 1.225;  border-bottom: 1px solid #eee;}.markdown-body h3 {  font-size: 1.5em;  line-height: 1.43;}.markdown-body h4 {  font-size: 1.25em;}.markdown-body h5 {  font-size: 1em;}.markdown-body h6 {  font-size: 1em;  color: #777;}.markdown-body p,.markdown-body blockquote,.markdown-body ul,.markdown-body ol,.markdown-body dl,.markdown-body table,.markdown-body pre,.markdown-body .admonition {  margin-top: 0;  margin-bottom: 16px;}.markdown-body hr {  height: 4px;  padding: 0;  margin: 16px 0;  background-color: #e7e7e7;  border: 0 none;}.markdown-body ul,.markdown-body ol {  padding-left: 2em;}.markdown-body ul ul,.markdown-body ul ol,.markdown-body ol ol,.markdown-body ol ul {  margin-top: 0;  margin-bottom: 0;}.markdown-body li>p {  margin-top: 16px;}.markdown-body dl {  padding: 0;}.markdown-body dl dt {  padding: 0;  margin-top: 16px;  font-size: 1em;  font-style: italic;  font-weight: bold;}.markdown-body dl dd {  padding: 0 16px;  margin-bottom: 16px;}.markdown-body blockquote {  padding: 0 15px;  color: #777;  border-left: 4px solid #ddd;}.markdown-body blockquote>:first-child {  margin-top: 0;}.markdown-body blockquote>:last-child {  margin-bottom: 0;}.markdown-body table {  display: block;  width: 100%;  overflow: auto;  word-break: normal;  word-break: keep-all;}.markdown-body table th {  font-weight: bold;}.markdown-body table th,.markdown-body table td {  padding: 6px 13px;  border: 1px solid #ddd;}.markdown-body table tr {  background-color: #fff;  border-top: 1px solid #ccc;}.markdown-body table tr:nth-child(2n) {  background-color: #f8f8f8;}.markdown-body img {  max-width: 100%;  -moz-box-sizing: border-box;  box-sizing: border-box;}.markdown-body code,.markdown-body samp {  padding: 0;  padding-top: 0.2em;  padding-bottom: 0.2em;  margin: 0;  font-size: 85%;  background-color: rgba(0,0,0,0.04);  border-radius: 3px;}.markdown-body code:before,.markdown-body code:after {  letter-spacing: -0.2em;  content: \"\\00a0\";}.markdown-body pre>code {  padding: 0;  margin: 0;  font-size: 100%;  word-break: normal;  white-space: pre;  background: transparent;  border: 0;}.markdown-body .codehilite {  margin-bottom: 16px;}.markdown-body .codehilite pre,.markdown-body pre {  padding: 16px;  overflow: auto;  font-size: 85%;  line-height: 1.45;  background-color: #f7f7f7;  border-radius: 3px;}.markdown-body .codehilite pre {  margin-bottom: 0;  word-break: normal;}.markdown-body pre {  word-wrap: normal;}.markdown-body pre code {  display: inline;  max-width: initial;  padding: 0;  margin: 0;  overflow: initial;  line-height: inherit;  word-wrap: normal;  background-color: transparent;  border: 0;}.markdown-body pre code:before,.markdown-body pre code:after {  content: normal;}/* Admonition */.markdown-body .admonition {  -webkit-border-radius: 3px;  -moz-border-radius: 3px;  position: relative;  border-radius: 3px;  border: 1px solid #e0e0e0;  border-left: 6px solid #333;  padding: 10px 10px 10px 30px;}.markdown-body .admonition table {  color: #333;}.markdown-body .admonition p {  padding: 0;}.markdown-body .admonition-title {  font-weight: bold;  margin: 0;}.markdown-body .admonition>.admonition-title {  color: #333;}.markdown-body .attention>.admonition-title {  color: #a6d796;}.markdown-body .caution>.admonition-title {  color: #d7a796;}.markdown-body .hint>.admonition-title {  color: #96c6d7;}.markdown-body .danger>.admonition-title {  color: #c25f77;}.markdown-body .question>.admonition-title {  color: #96a6d7;}.markdown-body .note>.admonition-title {  color: #d7c896;}.markdown-body .admonition:before,.markdown-body .attention:before,.markdown-body .caution:before,.markdown-body .hint:before,.markdown-body .danger:before,.markdown-body .question:before,.markdown-body .note:before {  font: normal normal 16px fontawesome-mini;  -moz-osx-font-smoothing: grayscale;  -webkit-user-select: none;  -moz-user-select: none;  -ms-user-select: none;  user-select: none;  line-height: 1.5;  color: #333;  position: absolute;  left: 0;  top: 0;  padding-top: 10px;  padding-left: 10px;}.markdown-body .admonition:before {  content: \"\\f056\\00a0\";  color: 333;}.markdown-body .attention:before {  content: \"\\f058\\00a0\";  color: #a6d796;}.markdown-body .caution:before {  content: \"\\f06a\\00a0\";  color: #d7a796;}.markdown-body .hint:before {  content: \"\\f05a\\00a0\";  color: #96c6d7;}.markdown-body .danger:before {  content: \"\\f057\\00a0\";  color: #c25f77;}.markdown-body .question:before {  content: \"\\f059\\00a0\";  color: #96a6d7;}.markdown-body .note:before {  content: \"\\f040\\00a0\";  color: #d7c896;}.markdown-body .admonition::after {  content: normal;}.markdown-body .attention {  border-left: 6px solid #a6d796;}.markdown-body .caution {  border-left: 6px solid #d7a796;}.markdown-body .hint {  border-left: 6px solid #96c6d7;}.markdown-body .danger {  border-left: 6px solid #c25f77;}.markdown-body .question {  border-left: 6px solid #96a6d7;}.markdown-body .note {  border-left: 6px solid #d7c896;}.markdown-body .admonition>*:first-child {  margin-top: 0 !important;}.markdown-body .admonition>*:last-child {  margin-bottom: 0 !important;}/* progress bar*/.markdown-body .progress {  display: block;  width: 300px;  margin: 10px 0;  height: 24px;  -webkit-border-radius: 3px;  -moz-border-radius: 3px;  border-radius: 3px;  background-color: #ededed;  position: relative;  box-shadow: inset -1px 1px 3px rgba(0, 0, 0, .1);}.markdown-body .progress-label {  position: absolute;  text-align: center;  font-weight: bold;  width: 100%; margin: 0;  line-height: 24px;  color: #333;  text-shadow: 1px 1px 0 #fefefe, -1px -1px 0 #fefefe, -1px 1px 0 #fefefe, 1px -1px 0 #fefefe, 0 1px 0 #fefefe, 0 -1px 0 #fefefe, 1px 0 0 #fefefe, -1px 0 0 #fefefe, 1px 1px 2px #000;  -webkit-font-smoothing: antialiased !important;  white-space: nowrap;  overflow: hidden;}.markdown-body .progress-bar {  height: 24px;  float: left;  -webkit-border-radius: 3px;  -moz-border-radius: 3px;  border-radius: 3px;  background-color: #96c6d7;  box-shadow: inset 0 1px 0 rgba(255, 255, 255, .5), inset 0 -1px 0 rgba(0, 0, 0, .1);  background-size: 30px 30px;  background-image: -webkit-linear-gradient(    135deg, rgba(255, 255, 255, .4) 27%,    transparent 27%,    transparent 52%, rgba(255, 255, 255, .4) 52%,    rgba(255, 255, 255, .4) 77%,    transparent 77%, transparent  );  background-image: -moz-linear-gradient(    135deg,    rgba(255, 255, 255, .4) 27%, transparent 27%,    transparent 52%, rgba(255, 255, 255, .4) 52%,    rgba(255, 255, 255, .4) 77%, transparent 77%,    transparent  );  background-image: -ms-linear-gradient(    135deg,    rgba(255, 255, 255, .4) 27%, transparent 27%,    transparent 52%, rgba(255, 255, 255, .4) 52%,    rgba(255, 255, 255, .4) 77%, transparent 77%,    transparent  );  background-image: -o-linear-gradient(    135deg,    rgba(255, 255, 255, .4) 27%, transparent 27%,    transparent 52%, rgba(255, 255, 255, .4) 52%,    rgba(255, 255, 255, .4) 77%, transparent 77%,    transparent  );  background-image: linear-gradient(    135deg,    rgba(255, 255, 255, .4) 27%, transparent 27%,    transparent 52%, rgba(255, 255, 255, .4) 52%,    rgba(255, 255, 255, .4) 77%, transparent 77%,    transparent  );}.markdown-body .progress-100plus .progress-bar {  background-color: #a6d796;}.markdown-body .progress-80plus .progress-bar {  background-color: #c6d796;}.markdown-body .progress-60plus .progress-bar {  background-color: #d7c896;}.markdown-body .progress-40plus .progress-bar {  background-color: #d7a796;}.markdown-body .progress-20plus .progress-bar {  background-color: #d796a6;}.markdown-body .progress-0plus .progress-bar {  background-color: #c25f77;}.markdown-body .candystripe-animate .progress-bar{  -webkit-animation: animate-stripes 3s linear infinite;  -moz-animation: animate-stripes 3s linear infinite;  animation: animate-stripes 3s linear infinite;}@-webkit-keyframes animate-stripes {  0% {    background-position: 0 0;  }  100% {    background-position: 60px 0;  }}@-moz-keyframes animate-stripes {  0% {    background-position: 0 0;  }  100% {    background-position: 60px 0;  }}@keyframes animate-stripes {  0% {    background-position: 0 0;  }  100% {    background-position: 60px 0;  }}.markdown-body .gloss .progress-bar {  box-shadow:    inset 0 4px 12px rgba(255, 255, 255, .7),    inset 0 -12px 0 rgba(0, 0, 0, .05);}/* MultiMarkdown Critic Blocks */.markdown-body .critic_mark {  background: #ff0;}.markdown-body .critic_delete {  color: #c82829;  text-decoration: line-through;}.markdown-body .critic_insert {  color: #718c00 ;  text-decoration: underline;}.markdown-body .critic_comment {  color: #8e908c;  font-style: italic;}.markdown-body .headeranchor {  font: normal normal 16px fontawesome-mini;  line-height: 1;  display: inline-block;  text-decoration: none;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;  -webkit-user-select: none;  -moz-user-select: none;  -ms-user-select: none;  user-select: none;}.headeranchor:before {  content: '\\e157';}.markdown-body .task-list-item {  list-style-type: none;}.markdown-body .task-list-item+.task-list-item {  margin-top: 3px;}.markdown-body .task-list-item input {  margin: 0 4px 0.25em -20px;  vertical-align: middle;}/* Media */@media only screen and (min-width: 480px) {  .markdown-body {    font-size:14px;  }}@media only screen and (min-width: 768px) {  .markdown-body {    font-size:16px;  }}@media print {  .markdown-body * {    background: transparent !important;    color: black !important;    filter:none !important;    -ms-filter: none !important;  }  .markdown-body {    font-size:12pt;    max-width:100%;    outline:none;    border: 0;  }  .markdown-body a,  .markdown-body a:visited {    text-decoration: underline;  }  .markdown-body .headeranchor-link {    display: none;  }  .markdown-body a[href]:after {    content: \" (\" attr(href) \")\";  }  .markdown-body abbr[title]:after {    content: \" (\" attr(title) \")\";  }  .markdown-body .ir a:after,  .markdown-body a[href^=\"javascript:\"]:after,  .markdown-body a[href^=\"#\"]:after {    content: \"\";  }  .markdown-body pre {    white-space: pre;    white-space: pre-wrap;    word-wrap: break-word;  }  .markdown-body pre,  .markdown-body blockquote {    border: 1px solid #999;    padding-right: 1em;    page-break-inside: avoid;  }  .markdown-body .progress,  .markdown-body .progress-bar {    -moz-box-shadow: none;    -webkit-box-shadow: none;    box-shadow: none;  }  .markdown-body .progress {    border: 1px solid #ddd;  }  .markdown-body .progress-bar {    height: 22px;    border-right: 1px solid #ddd;  }  .markdown-body tr,  .markdown-body img {    page-break-inside: avoid;  }  .markdown-body img {    max-width: 100% !important;  }  .markdown-body p,  .markdown-body h2,  .markdown-body h3 {    orphans: 3;    widows: 3;  }  .markdown-body h2,  .markdown-body h3 {    page-break-after: avoid;  }}</style><style>/*GitHub*/.codehilite {background-color:#fff;color:#333333;}.codehilite .hll {background-color:#ffffcc;}.codehilite .c{color:#999988;font-style:italic}.codehilite .err{color:#a61717;background-color:#e3d2d2}.codehilite .k{font-weight:bold}.codehilite .o{font-weight:bold}.codehilite .cm{color:#999988;font-style:italic}.codehilite .cp{color:#999999;font-weight:bold}.codehilite .c1{color:#999988;font-style:italic}.codehilite .cs{color:#999999;font-weight:bold;font-style:italic}.codehilite .gd{color:#000000;background-color:#ffdddd}.codehilite .ge{font-style:italic}.codehilite .gr{color:#aa0000}.codehilite .gh{color:#999999}.codehilite .gi{color:#000000;background-color:#ddffdd}.codehilite .go{color:#888888}.codehilite .gp{color:#555555}.codehilite .gs{font-weight:bold}.codehilite .gu{color:#800080;font-weight:bold}.codehilite .gt{color:#aa0000}.codehilite .kc{font-weight:bold}.codehilite .kd{font-weight:bold}.codehilite .kn{font-weight:bold}.codehilite .kp{font-weight:bold}.codehilite .kr{font-weight:bold}.codehilite .kt{color:#445588;font-weight:bold}.codehilite .m{color:#009999}.codehilite .s{color:#dd1144}.codehilite .n{color:#333333}.codehilite .na{color:teal}.codehilite .nb{color:#0086b3}.codehilite .nc{color:#445588;font-weight:bold}.codehilite .no{color:teal}.codehilite .ni{color:purple}.codehilite .ne{color:#990000;font-weight:bold}.codehilite .nf{color:#990000;font-weight:bold}.codehilite .nn{color:#555555}.codehilite .nt{color:navy}.codehilite .nv{color:teal}.codehilite .ow{font-weight:bold}.codehilite .w{color:#bbbbbb}.codehilite .mf{color:#009999}.codehilite .mh{color:#009999}.codehilite .mi{color:#009999}.codehilite .mo{color:#009999}.codehilite .sb{color:#dd1144}.codehilite .sc{color:#dd1144}.codehilite .sd{color:#dd1144}.codehilite .s2{color:#dd1144}.codehilite .se{color:#dd1144}.codehilite .sh{color:#dd1144}.codehilite .si{color:#dd1144}.codehilite .sx{color:#dd1144}.codehilite .sr{color:#009926}.codehilite .s1{color:#dd1144}.codehilite .ss{color:#990073}.codehilite .bp{color:#999999}.codehilite .vc{color:teal}.codehilite .vg{color:teal}.codehilite .vi{color:teal}.codehilite .il{color:#009999}.codehilite .gc{color:#999;background-color:#EAF2F5}</style><title>Create a better program faster with an outline</title></head><body><article class=\"markdown-body\"><p>I&rsquo;ve written so much spaghetti code for so long and finally learned from my roommate how to write better code. This is how I use this method.</p><p>First, <strong>stay in abstract thinking as long as possible. The longer you take to implement your concepts, the better.</strong></p><p>For this example, I will use my <a href=\"/Users/oldsilverboi/Documents/Website/milofultz.github.io/_posts/%7B%7B%20site.baseurl%20%7D%7D%7B%25%20post_url%202020-07-02-bmcrawl%20%25%7D\">Bookmark Crawler</a> idea.</p><hr /><h2 id=\"big-picture\">Big Picture<a class=\"headerlink\" href=\"#big-picture\" title=\"Permanent link\"></a></h2><p>Describe what your program will do in abstract terms, as if it was a person doing it, not a computer.</p><blockquote><p>The bookmark crawler will go through your bookmarks and make a list of all the links it can find. Then it will go through all of <em>those</em> links, repeating the process and making an even bigger list of links. After doing this, it will make an HTML file that you can look at and click around.</p></blockquote><p>From there, describe how your program will handle data. Start BIG as possible.</p><blockquote><p>The bookmark crawler will take an HTML file of your bookmarks as input and output an HTML file of new links to check out.</p></blockquote><h2 id=\"chunking\">Chunking<a class=\"headerlink\" href=\"#chunking\" title=\"Permanent link\"></a></h2><p>Break down the process further in abstract terms. What are the distinct actions it will need to take? What would a random stupid guy need if you wanted him to do it?</p><blockquote><p>The bookmark crawler will start by opening your bookmarks file and searching for links. These links, along with their titles, will be added to a list. This list will then be sent off to be crawled. This crawling process will be: opening each page that was found in the bookmarks; opening all the links on the page; and copying down all the links with their titles. This process is repeated with the new links that are found X amount of times, whatever the user determines. Once the crawling process is finished, then a list of these new links will be added to an HTML page for browsing.</p></blockquote><p>Determine the biggest distinct functions you can perceive in the description you just created.</p><blockquote><ul><li><strong>Input</strong>: Take bookmark file and turn it into a list of links that the program can use.</li><li><strong>Crawler</strong>: Crawl new links from the bookmark, as well as further links received, taking down needed info.</li><li><strong>Export</strong>: Make all new links usable in a user-friendly file.</li></ul></blockquote><p>What data types would be best to transfer in between these functions?</p><blockquote><ul><li><strong>Input</strong> - IN: HTML file, OUT: List containing relevant information from bookmarks.</li><li><strong>Crawler</strong> - IN: List of bookmarks info from Input, OUT: List of new links information.</li><li><strong>Export</strong> - IN: List of new links information, OUT: HTML file.</li></ul></blockquote><h2 id=\"outlining-functions\">Outlining Functions<a class=\"headerlink\" href=\"#outlining-functions\" title=\"Permanent link\"></a></h2><p>Make a very rough outline of the program using information from chunking steps. Include only necessary in/out information.</p><div class=\"codehilite\"><pre># Input: Take bookmark file and turn it into a list of links that the program can use.# IN: HTML file, OUT: List containing relevant information from bookmarks.def input(filename):    url_list = []    return url_list# Crawler: Crawl new links from the bookmark, as well as further links received, taking down needed info.# IN: List of bookmarks info from Input, OUT: List of new links information.def crawler(urls):    found_urls = []    return found_urls# Export: Make all new links usable in a user-friendly file.# IN: List of new links information, OUT: HTML file.def export(urls):    # Pseudocode: create pretty HTML file of new links.    pass</pre></div><p>Write out overview for each function as if you were telling a random stupid guy to do it.</p><blockquote><p>Input: Open the file. Go through the whole file looking for links. Copy down all URLs, titles, and include that you found the link on the bookmarks page. When finished, compile it into a document that can be handled by the Crawler.</p></blockquote><p>Do this for all functions and see how you can break down the process into atomistic functions. The more that functions can be used and reused all around the whole program, the better.</p><p>Once the program has been broken down into its most atomistic functions, start writing pseudocode into them to have an idea of what you&rsquo;re going to do.</p><div class=\"codehilite\"><pre># Input: Take bookmark file and turn it into a list of links that the program can use.# IN: HTML file, OUT: List containing relevant information from bookmarks.def input(filename):    #Open the file    #Go through the whole file looking for links    #Copy down all URLs, titles, and include that    #you found the link on the bookmarks page.    #Compile it into a document that can be     #handled by the Crawler    url_list = []    return url_list</pre></div><h2 id=\"further-chunking\">Further Chunking<a class=\"headerlink\" href=\"#further-chunking\" title=\"Permanent link\"></a></h2><p>Look for similarities in between functions and see if there is any process the functions could share. If so, then take that and break it down into it&rsquo;s own function. (e.g. in this program, both the crawler and the input need to take all the links off of a given page)</p><h2 id=\"testing\">Testing<a class=\"headerlink\" href=\"#testing\" title=\"Permanent link\"></a></h2><p>When you feel it has been broken down fully and the flow of data makes sense, make a basic way to test it as it goes. In Python, this is by adding an <code>if __name__ == '__main__':</code> section. Start with more pseudocode and continue with it until you feel that you can correctly write out the flow using the functions you&rsquo;ve already created.</p><h2 id=\"start-writing-code\">Start Writing Code<a class=\"headerlink\" href=\"#start-writing-code\" title=\"Permanent link\"></a></h2><p>Figure out what is the easiest thing to program and test. Go with the pseudocode you&rsquo;ve written and start fleshing it out with real functionality. Test each part as you go in the terminal. In the following example, I&rsquo;ll first test that I can open a file and return the contents of the file.</p><p><div class=\"codehilite\"><pre># Input: Take bookmark file and turn it into a list of links that the program can use.# IN: HTML file, OUT: List containing relevant information from bookmarks.def input(filename):    #Open the file    with open(filename, &#39;r&#39;) as f:        html = f.read()    #Go through the whole file looking for links    #Copy down all URLs, titles, and include that    #you found the link on the bookmarks page.    #Compile it into a document that can be     #handled by the Crawler    url_list = []    # return url_list    return htmlif __name__ = &#39;__main__&#39;:    print(input(&#39;bookmarks.html&#39;))############Terminal############$ python3 bm_crawl.py&lt;html&gt;    &lt;head&gt;    ...    &lt;/body&gt;&lt;/html&gt;$</pre></div>Repeat this process with each element of your code, ensuring that it works exactly as you expect. You don&rsquo;t have to go in a linear fashion, if it is easier or more sensible to jump around.</p><p>Don&rsquo;t be afraid to go back to previous steps if you realize further possibilities of chunking or other revisions.</p><hr /><p>References:</p><ol><li>Mason</li></ol></article></body></html>",
            "url": "http://more.milofultz.com/2020/07/06/programming-outlining",
            
            
            
            
            
            "date_published": "2020-07-06T00:00:00-07:00",
            "date_modified": "2020-07-06T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://more.milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://more.milofultz.com/2020/07/03/wordsmash",
            "title": "Wordsmash Explosion on Python - It's Mastermind With Words",
            "summary": "This game is Mastermind but with words. Guess a random word chosen by the computer based on how many letters there are in common.",
            "content_text": "You can visit the project and download the files on GitHub.The GameThe easiest way to think of this game is as Mastermind but with words. You can see a more detailed explanation of the rules here.The program will pick a random 5 letter word that the user will try to guess. The user will guess a 5 letter word and the program will return how many of the letters from the user’s word exist in the random word. This process will repeat until the user guesses the word correctly.Future Implementation  Different word lengths as a measure of difficulty.  Options for keeping tabs on which letters you’ve guessed.  Hints.",
            "content_html": "<p><a href=\"https://github.com/milofultz/wordmastermind\">You can visit the project and download the files on GitHub.</a></p><h2 id=\"the-game\">The Game</h2><p>The easiest way to think of this game is as Mastermind but with words. <a href=\"https://www.word-grabber.com/printable-word-games/a-mastermind-with-words-jotto\">You can see a more detailed explanation of the rules here.</a></p><p>The program will pick a random 5 letter word that the user will try to guess. The user will guess a 5 letter word and the program will return how many of the letters from the user’s word exist in the random word. This process will repeat until the user guesses the word correctly.</p><hr /><h2 id=\"future-implementation\">Future Implementation</h2><ul>  <li>Different word lengths as a measure of difficulty.</li>  <li>Options for keeping tabs on which letters you’ve guessed.</li>  <li>Hints.</li></ul>",
            "url": "http://more.milofultz.com/2020/07/03/wordsmash",
            
            
            
            
            
            "date_published": "2020-07-03T00:00:00-07:00",
            "date_modified": "2020-07-03T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://more.milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://more.milofultz.com/2020/07/02/bmcrawl",
            "title": "Bookmark Crawler - Make Internet Exploration More Fun",
            "summary": "This is a program that utilizes a set of URL's to create a specific set of links based on the sites that you already liked enough to bookmark it.",
            "content_text": "You can find the updated project and all necessary files here on GitHub.GoalSearch engines are too broad and do not serve people who search for interesting and curated content that does not have relevant keywords. For example, searching “DIY Projects” will not yield interesting results, as those SEO search terms are saturated by bigger scale organizations and make finding smaller creators and curators much more difficult. As the internet gets larger and larger, this will only be more of a problem with modern search engines, as their algorithm rewards good SEO and Alexa rankings, which is determined not necessarily by quality of content, but by linking and optimization.So if you want to find interesting and curated content regarding DIY projects, how can you find them? This is an experiment that utilizes given URL’s to create an extremely specific set of links based on the sites that you already like. Hopefully this will provide the user with new domains and pages to explore that are related and recommended within the provided pages.How  Take a single URL or a user’s bookmarks (exported from Firefox as an HTML file) and create a list of URLs to scrape.  Scrape each URL for links.  Allow process to repeat up to N degrees away from initial source URL.  Return an HTML file of new sites to explore.",
            "content_html": "<p><a href=\"https://github.com/milofultz/bmcrawl\">You can find the updated project and all necessary files here on GitHub.</a></p><h2 id=\"goal\">Goal</h2><p>Search engines are too broad and do not serve people who search for interesting and curated content that does not have relevant keywords. For example, searching “DIY Projects” will not yield interesting results, as those SEO search terms are saturated by bigger scale organizations and make finding smaller creators and curators much more difficult. As the internet gets larger and larger, this will only be more of a problem with modern search engines, as their algorithm rewards good SEO and Alexa rankings, which is determined not necessarily by quality of content, but by linking and optimization.</p><p>So if you want to find interesting and curated content regarding DIY projects, how can you find them? This is an experiment that utilizes given URL’s to create an extremely specific set of links based on the sites that you already like. Hopefully this will provide the user with new domains and pages to explore that are related and recommended within the provided pages.</p><h2 id=\"how\">How</h2><ul>  <li>Take a single URL or a user’s bookmarks (exported from Firefox as an HTML file) and create a list of URLs to scrape.</li>  <li>Scrape each URL for links.</li>  <li>Allow process to repeat up to N degrees away from initial source URL.</li>  <li>Return an HTML file of new sites to explore.</li></ul>",
            "url": "http://more.milofultz.com/2020/07/02/bmcrawl",
            
            
            
            
            
            "date_published": "2020-07-02T00:00:00-07:00",
            "date_modified": "2020-07-02T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://more.milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://more.milofultz.com/2020/06/26/nobody-takes-advice",
            "title": "Nobody Takes Advice",
            "summary": "The great, unspoken secret of advice is that no one takes it. ... People always just do exactly what they want to do in every scenario. - Nicole Cliffe",
            "content_text": "  “The great, unspoken secret of advice is that no one takes it. … People always just do exactly what they want to do in every scenario.” - Nicole Cliffe[1]References:  https://www.elle.com/life-love/advice/a46441/nicole-knows-how-do-i-support-my-friends-when-they-make-bad-choices/",
            "content_html": "<blockquote>  <p>“The great, unspoken secret of advice is that no one takes it. … People always just do exactly what they want to do in every scenario.” - Nicole Cliffe[1]</p></blockquote><hr /><p>References:</p><ol>  <li><a href=\"https://www.elle.com/life-love/advice/a46441/nicole-knows-how-do-i-support-my-friends-when-they-make-bad-choices/\">https://www.elle.com/life-love/advice/a46441/nicole-knows-how-do-i-support-my-friends-when-they-make-bad-choices/</a></li></ol>",
            "url": "http://more.milofultz.com/2020/06/26/nobody-takes-advice",
            
            
            
            
            
            "date_published": "2020-06-26T00:00:00-07:00",
            "date_modified": "2020-06-26T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://more.milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://more.milofultz.com/2020/06/25/inexpensive-games",
            "title": "Inexpensive and Minimal Equipment Games To Spend Time On",
            "summary": "I've always been interested in being frugal and wanted a repository of fun and inexpensive games to play by yourself and with others.",
            "content_text": "I’ve always been interested in being frugal and wanted a repository of fun and inexpensive games to play by yourself and with others. Here’s a list of what I’ve found.Solo  Donsol - Donsol is a solitaire card game made by John Eternal during Train Jam using a regular playing card deck. I found this on Hundred Rabbit’s Youtube channel and thought it looked like a fun game for solo play that made solitaire a lot more interesting. The rules are a bit confusing so be sure to watch the video and see them play it through.  Canfield - When I was on a cruise ship for a week for a gig, I literally played this game for probably upwards of 7 hours and I think I won once. For some reason, I keep coming back to it.  Alpha Blitz - Not really a “game” but a good way to pass time. Find a word and then figure out the longest anagram you can using only those letters (lens = senselessness).2+ Player  Word Mastermind/Jotto - I played this a ton with a friend of mine in our down time in college. Super easy to play and you don’t really need anything except a paper and pencil, unless you have a good memory. It’s pretty much just the game mastermind but with words instead. I made a Python version of this, which you can find here.  Paper Football - Aside from the obvious of kicking it, the tabletop play of this game is so fun and makes waiting in a place with a floor or table much more fun. All you need is some scrap paper and a surface.  Exquisite Corpse - Total absurdity and chaos through drawing. Only need a pen and paper and will create a wide range of stuff, from silly pictures to nightmare fuel.  Monkey Tree (video) - This is almost a workout more than it’s a game, but nonetheless a fun way to spend time. One person stands arms out to their sides with legs wide, stable on the ground. The other person climbs on their back and finds ways to maneuver around them. Tougher than it seems, both physically and for your friendship.",
            "content_html": "<p>I’ve always been interested in being frugal and wanted a repository of fun and inexpensive games to play by yourself and with others. Here’s a list of what I’ve found.</p><h3 id=\"solo\">Solo</h3><ul>  <li><a href=\"https://itch.io/t/54944/donsol-guide\">Donsol</a> - Donsol is a solitaire card game made by John Eternal during Train Jam using a regular playing card deck. I found this on <a href=\"https://www.youtube.com/watch?v=GNoZrr56GqA\">Hundred Rabbit’s Youtube channel</a> and thought it looked like a fun game for solo play that made solitaire a lot more interesting. The rules are a bit confusing so be sure to watch the video and see them play it through.</li>  <li><a href=\"https://en.wikipedia.org/wiki/Canfield_(solitaire)\">Canfield</a> - When I was on a cruise ship for a week for a gig, I literally played this game for probably upwards of 7 hours and I think I won once. For some reason, I keep coming back to it.</li>  <li><a href=\"https://boardgamegeek.com/boardgame/1443/alpha-blitz\">Alpha Blitz</a> - Not really a “game” but a good way to pass time. Find a word and then figure out the longest anagram you can using only those letters (lens = senselessness).</li></ul><h3 id=\"2-player\">2+ Player</h3><ul>  <li><a href=\"https://www.word-grabber.com/printable-word-games/a-mastermind-with-words-jotto\">Word Mastermind/Jotto</a> - I played this a ton with a friend of mine in our down time in college. Super easy to play and you don’t really need anything except a paper and pencil, unless you have a good memory. It’s pretty much just the game mastermind but with words instead. <a href=\"/2020/07/03/wordsmash\">I made a Python version of this, which you can find here.</a></li>  <li><a href=\"https://en.wikipedia.org/wiki/Paper_football\">Paper Football</a> - Aside from the obvious of kicking it, the tabletop play of this game is so fun and makes waiting in a place with a floor or table much more fun. All you need is some scrap paper and a surface.</li>  <li><a href=\"https://en.wikipedia.org/wiki/Exquisite_corpse\">Exquisite Corpse</a> - Total absurdity and chaos through drawing. Only need a pen and paper and will create a wide range of stuff, from silly pictures to nightmare fuel.</li>  <li><a href=\"http://athleticexplorations.com/en_US/ae96/\">Monkey Tree</a> (<a href=\"https://www.youtube.com/watch?v=hXVRyI2ULHI\">video</a>) - This is almost a workout more than it’s a game, but nonetheless a fun way to spend time. One person stands arms out to their sides with legs wide, stable on the ground. The other person climbs on their back and finds ways to maneuver around them. Tougher than it seems, both physically and for your friendship.</li></ul>",
            "url": "http://more.milofultz.com/2020/06/25/inexpensive-games",
            
            
            
            
            
            "date_published": "2020-06-25T00:00:00-07:00",
            "date_modified": "2020-06-25T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://more.milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://more.milofultz.com/2020/06/21/quantity-quality",
            "title": "Quality and quantity's relevance to critical feeling",
            "summary": "Quality and quantity are immensely useful in the developing of critical feeling and the ability for honest and effective communication.",
            "content_text": "Quality is an attribute you give to help label something. Quantity is a measurement you use to help label something.Quality requires quantity for it to exist. One can’t measure how hard something is without two things to compare them to. Quantity requires quality for it to exist. One can’t measure something with which it has no label.To attribute a quality to something, it must be fully defined. One cannot attribute a quality to something without fully knowing what it is. In turn, one cannot measure something that has not been fully defined. What is 0 or 100 if one cannot define them?This struck me as I was watching a video[1] and ended up with a discussion with a roommate about this relates to critical feeling. As defined by Bret Weinstein[3], critical feeling is making sure that you don’t get caught up in other people’s feelings. One can use quality and quantity to more honestly trust your critical feeling in this way:When one is presented with a quality or label, either from another person or from within themselves, one must seek to define the quality as fully and completely as possible. For instance, if one is accused of being “lazy”, one must define it, and preferably with whoever is making the accusation in mind. Once this quality is defined, one can then measure if they indeed hold this attribute, how much, and the impact this quality is having upon those affected, which could be themselves, their community, their family, or whatever. Once one has this information, one can truly understand the circumstances and be critical of the quality and it’s truthfulness in it’s application.If one cannot define the quality that is being attributed, they have no business attributing it. And if once defined, one cannot measure the impact the attribute has, then it is not important.I believe this exercise has the potential to avoid claims of essentialism[4] (all humans are bad/good, all X people are Y), to help ground accusations or problems in the realm of the logical and the real, and to present us with further action, instead of letting our brain buck or accept a quality that may or may not be useful or important.References:  https://youtu.be/eOfVBqGPwi0?t=886  Critical Feeling  https://www.youtube.com/watch?v=PfAumoTIeik  https://en.wikipedia.org/wiki/Essentialism",
            "content_html": "<p>Quality is an attribute you give to help label something. Quantity is a measurement you use to help label something.</p><p>Quality requires quantity for it to exist. One can’t measure how hard something is without two things to compare them to. Quantity requires quality for it to exist. One can’t measure something with which it has no label.</p><p>To attribute a quality to something, it must be fully defined. One cannot attribute a quality to something without fully knowing what it is. In turn, one cannot measure something that has not been fully defined. What is 0 or 100 if one cannot define them?</p><hr /><p>This struck me as I was watching a video[1] and ended up with a discussion with a roommate about this relates to <a href=\"/2020/06/10/critical-feeling\">critical feeling</a>. As defined by Bret Weinstein[3], critical feeling is making sure that you don’t get caught up in other people’s feelings. One can use quality and quantity to more honestly trust your critical feeling in this way:</p><p>When one is presented with a quality or label, either from another person or from within themselves, one must seek to define the quality as fully and completely as possible. For instance, if one is accused of being “lazy”, one must define it, and preferably with whoever is making the accusation in mind. Once this quality is defined, one can then measure if they indeed hold this attribute, how much, and the impact this quality is having upon those affected, which could be themselves, their community, their family, or whatever. Once one has this information, one can truly understand the circumstances and be critical of the quality and it’s truthfulness in it’s application.</p><p>If one cannot define the quality that is being attributed, they have no business attributing it. And if once defined, one cannot measure the impact the attribute has, then it is not important.</p><p>I believe this exercise has the potential to avoid claims of essentialism[4] (all humans are bad/good, all X people are Y), to help ground accusations or problems in the realm of the logical and the real, and to present us with further action, instead of letting our brain buck or accept a quality that may or may not be useful or important.</p><hr /><p>References:</p><ol>  <li><a href=\"https://youtu.be/eOfVBqGPwi0?t=886\">https://youtu.be/eOfVBqGPwi0?t=886</a></li>  <li><a href=\"/2020/06/10/critical-feeling\">Critical Feeling</a></li>  <li><a href=\"https://www.youtube.com/watch?v=PfAumoTIeik\">https://www.youtube.com/watch?v=PfAumoTIeik</a></li>  <li><a href=\"https://en.wikipedia.org/wiki/Essentialism\">https://en.wikipedia.org/wiki/Essentialism</a></li></ol>",
            "url": "http://more.milofultz.com/2020/06/21/quantity-quality",
            
            
            
            
            
            "date_published": "2020-06-21T00:00:00-07:00",
            "date_modified": "2020-06-21T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://more.milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://more.milofultz.com/2020/06/10/critical-feeling",
            "title": "Critical feeling is just as important as critical thinking",
            "summary": "Critical feeling is making sure that you don't get caught up in other people's feelings. I believe this can improve and better our communication.",
            "content_text": "  Critical feeling is making sure that you don’t get caught up in other people’s feelings.[1]I like this idea a lot because it clarifies a problem that I have often had. My emotional conviction on my values and ethics have often been weak, untethered on clear principled thought, and thus I have been more susceptible to bandwagoning based on big emotions. There have been many times where I later found that my actions or thoughts were not honest to what I actually desired in the situation or believed and this I think was due to a lack of critical feeling.When it comes to critically thinking, the analysis of facts to form a judgment[2], I tend to be more skeptical in the points or ideas of others. I usually disagree with people until I run through the scenario sufficiently and fully understand and agree with what is being presented. Emotions tend to override this skepticism and sweep me up in the romantic nature of whatever is at hand. This I believe is due to a relatively weak understanding of my own emotions and what they are trying to communicate to me, as well as a lack of practice in working with them.The new question is how to practice and develop critical feeling. [Update 20200622: I developed a method that you can find here). As for critical thinking, according to this article in the HBR[3], there are three things that can help you: question assumptions, reason through logic, and diversify thought. I believe these are the same, and for people like me who have had problems with their emotional development, this can include some really difficult practice, alone or with a guide (therapist, friend, family, etc.).In the last few months, I have been going to therapy weekly, devouring YouTube videos about philosophy[4][5][6], and talking a lot with my friends and family about more emotionally complex things, and I have noticed a much larger capacity to understand what is happening with my emotional state, and therefore maintain what I feel while also being able to empathize better with others.References:  https://www.youtube.com/watch?v=PfAumoTIeik  https://en.wikipedia.org/wiki/Critical_thinking  https://hbr.org/2019/05/3-simple-habits-to-improve-your-critical-thinking  https://www.youtube.com/user/thephilosophytube/videos  https://www.youtube.com/user/ContraPoints  https://www.youtube.com/user/alexjoconnor  Quality and quantity’s relevance to critical feeling",
            "content_html": "<blockquote>  <p>Critical feeling is making sure that you don’t get caught up in other people’s feelings.[1]</p></blockquote><p>I like this idea a lot because it clarifies a problem that I have often had. My emotional conviction on my values and ethics have often been weak, untethered on clear principled thought, and thus I have been more susceptible to bandwagoning based on big emotions. There have been many times where I later found that my actions or thoughts were not honest to what I actually desired in the situation or believed and this I think was due to a lack of critical feeling.</p><p>When it comes to critically thinking, the analysis of facts to form a judgment[2], I tend to be more skeptical in the points or ideas of others. I usually disagree with people until I run through the scenario sufficiently and fully understand and agree with what is being presented. Emotions tend to override this skepticism and sweep me up in the romantic nature of whatever is at hand. This I believe is due to a relatively weak understanding of my own emotions and what they are trying to communicate to me, as well as a lack of practice in working with them.</p><p>The new question is how to practice and develop critical feeling. <em>[Update 20200622: I developed a method that you can find <a href=\"/2020/06/21/quantity-quality\">here</a>)</em>. As for critical thinking, according to this article in the HBR[3], there are three things that can help you: question assumptions, reason through logic, and diversify thought. I believe these are the same, and for people like me who have had problems with their emotional development, this can include some really difficult practice, alone or with a guide (therapist, friend, family, etc.).</p><p>In the last few months, I have been going to therapy weekly, devouring YouTube videos about philosophy[4][5][6], and talking a lot with my friends and family about more emotionally complex things, and I have noticed a much larger capacity to understand what is happening with my emotional state, and therefore maintain what I feel while also being able to empathize better with others.</p><hr /><p>References:</p><ol>  <li><a href=\"https://www.youtube.com/watch?v=PfAumoTIeik\">https://www.youtube.com/watch?v=PfAumoTIeik</a></li>  <li><a href=\"https://en.wikipedia.org/wiki/Critical_thinking\">https://en.wikipedia.org/wiki/Critical_thinking</a></li>  <li><a href=\"https://hbr.org/2019/05/3-simple-habits-to-improve-your-critical-thinking\">https://hbr.org/2019/05/3-simple-habits-to-improve-your-critical-thinking</a></li>  <li><a href=\"https://www.youtube.com/user/thephilosophytube/videos\">https://www.youtube.com/user/thephilosophytube/videos</a></li>  <li><a href=\"https://www.youtube.com/user/ContraPoints\">https://www.youtube.com/user/ContraPoints</a></li>  <li><a href=\"https://www.youtube.com/user/alexjoconnor\">https://www.youtube.com/user/alexjoconnor</a></li>  <li><a href=\"/2020/06/21/quantity-quality\">Quality and quantity’s relevance to critical feeling</a></li></ol>",
            "url": "http://more.milofultz.com/2020/06/10/critical-feeling",
            
            
            
            
            
            "date_published": "2020-06-10T00:00:00-07:00",
            "date_modified": "2020-06-10T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://more.milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://more.milofultz.com/2020/05/25/exercise-routine",
            "title": "Simple + Minimal Exercise Routine",
            "summary": "A simple, minimal and modular exercise routine I developed that can be done anywhere, focusing mainly on short and simple circuits.",
            "content_text": "A couple of weeks ago, I worked on starting my Zettelkasten and just to try it out and see how it worked, I started with exercise. Using it and a few resources, I was able to come up with a list of various strength, mobility, and flexibility exercises that target various areas and a very basic framework with which to apply them. I won’t be posting all the exercises here, but I will show the system, my focus areas, and my general guidelines it is based on.My dream was to be able to do this anywhere and at anytime.My motivation to exercise is certainly not to get ripped or super swole. As anybody who knows me could probably guess, that’s a bit out of reach, as I am a tiny stick with the metabolism of a squirrel. So knowing that, I wanted my system to take the least amount of time and have the least amount of gear to haul around (preferably zero). I also knew after having purchased and selling gear multiple times that having exercise gear doesn’t really inspire me to exercise, anyway, so I aimed mostly for bodyweight exercises for this reason.After doing a cursory amount of research, I aimed to focus on these different areas[1] in the main part of my workout:  Upper Body  Lower Body  Core  CardioThe other category mentioned was flexibility, which I decided to use as a bookend for my workout.After digging around and settling on a bunch of options for exercises in each of these categories, I am using a high intensity interval training framework described in this blog post[2], “using full-body exercises, while training in a shorter amount of time and doing a circuit”.  Dynamic stretching[3] of whole body, top to bottom[4]  Circuit using one exercise from each of the four categories above in timed increments in any order  Repeat 2 with a short break until you feel well exercised  Flexibility exercises of joints[5][6] and static stretching of whole body, top to bottomUsing bodyweight exercises, this can essentially be done in tiny space with nothing, which is really useful for getting me to do it instead of making excuses.References:  http://www.fitnessauthority247.com/fitness/fit-for-life-the-top-five-areas-to-work-on/  https://themovementathlete.com/workout-in-small-spaces/  https://www.youtube.com/watch?v=LjcZ7FqS5JE  https://www.hss.edu/conditions_dynamic-static-stretching.asp#dynamic  https://www.reddit.com/r/flexibility/comments/6cwsap/complete_guide_to_improving_ankle_mobility/          https://www.youtube.com/watch?v=1QPKpk8WC_I      https://www.youtube.com/watch?v=jlewUVQliFA        https://www.reddit.com/r/Fitness/comments/eh1tb/please_send_help_coder_lifter_with_evertighter/c181mg6/",
            "content_html": "<p>A couple of weeks ago, I worked on starting my <a href=\"/2020/05/22/zettelkasten\">Zettelkasten</a> and just to try it out and see how it worked, I started with exercise. Using it and a few resources, I was able to come up with a list of various strength, mobility, and flexibility exercises that target various areas and a very basic framework with which to apply them. I won’t be posting all the exercises here, but I will show the system, my focus areas, and my general guidelines it is based on.</p><p><strong>My dream was to be able to do this anywhere and at anytime.</strong></p><p>My motivation to exercise is certainly not to get ripped or super swole. As anybody who knows me could probably guess, that’s a bit out of reach, as I am a tiny stick with the metabolism of a squirrel. So knowing that, I wanted my system to take the least amount of time and have the least amount of gear to haul around (preferably zero). I also knew after having purchased and selling gear multiple times that having exercise gear doesn’t really inspire me to exercise, anyway, so I aimed mostly for bodyweight exercises for this reason.</p><p>After doing a cursory amount of research, I aimed to focus on these different areas[1] in the main part of my workout:</p><ul>  <li>Upper Body</li>  <li>Lower Body</li>  <li>Core</li>  <li>Cardio</li></ul><p>The other category mentioned was flexibility, which I decided to use as a bookend for my workout.</p><p>After digging around and settling on a bunch of options for exercises in each of these categories, I am using a high intensity interval training framework described in this blog post[2], “using full-body exercises, while training in a shorter amount of time and doing a circuit”.</p><ol>  <li>Dynamic stretching[3] of whole body, top to bottom[4]</li>  <li>Circuit using one exercise from each of the four categories above in timed increments in any order</li>  <li>Repeat 2 with a short break until you feel well exercised</li>  <li>Flexibility exercises of joints[5][6] and static stretching of whole body, top to bottom</li></ol><p>Using bodyweight exercises, this can essentially be done in tiny space with nothing, which is really useful for getting me to do it instead of making excuses.</p><hr /><p>References:</p><ol>  <li><a href=\"http://www.fitnessauthority247.com/fitness/fit-for-life-the-top-five-areas-to-work-on/\">http://www.fitnessauthority247.com/fitness/fit-for-life-the-top-five-areas-to-work-on/</a></li>  <li><a href=\"https://themovementathlete.com/workout-in-small-spaces/\">https://themovementathlete.com/workout-in-small-spaces/</a></li>  <li><a href=\"https://www.youtube.com/watch?v=LjcZ7FqS5JE\">https://www.youtube.com/watch?v=LjcZ7FqS5JE</a></li>  <li><a href=\"https://www.hss.edu/conditions_dynamic-static-stretching.asp#dynamic\">https://www.hss.edu/conditions_dynamic-static-stretching.asp#dynamic</a></li>  <li><a href=\"https://www.reddit.com/r/flexibility/comments/6cwsap/complete_guide_to_improving_ankle_mobility/\">https://www.reddit.com/r/flexibility/comments/6cwsap/complete_guide_to_improving_ankle_mobility/</a>    <ol>      <li><a href=\"https://www.youtube.com/watch?v=1QPKpk8WC_I\">https://www.youtube.com/watch?v=1QPKpk8WC_I</a></li>      <li><a href=\"https://www.youtube.com/watch?v=jlewUVQliFA\">https://www.youtube.com/watch?v=jlewUVQliFA</a></li>    </ol>  </li>  <li><a href=\"https://www.reddit.com/r/Fitness/comments/eh1tb/please_send_help_coder_lifter_with_evertighter/c181mg6/\">https://www.reddit.com/r/Fitness/comments/eh1tb/please_send_help_coder_lifter_with_evertighter/c181mg6/</a></li></ol>",
            "url": "http://more.milofultz.com/2020/05/25/exercise-routine",
            
            
            
            
            
            "date_published": "2020-05-25T00:00:00-07:00",
            "date_modified": "2020-05-25T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://more.milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://more.milofultz.com/2020/05/23/day-planner",
            "title": "Day planner based on location",
            "summary": "A lateral-thinking way to encourage you into desired activities.",
            "content_text": "I found this idea on the internet probably around 2009, made my own version, and then unfortunately lost the reference to the original page. If you know where or from whom this originated, please tell me!The idea of this is to have a day planner where the axis around which you plan is not time, but location. Instead of thinking about what you are going to do between 9am and 10am, this has you think about what you can do in a given space.The thing I like best about this is that it is really good for keeping you in touch with activities you enjoy and places you like, making it easy to do those things by choosing it off of a menu. It’s almost like a worksheet for the day, with the bottom of the page open for note taking, drawing, and scribbling ideas down. Appointments and other real-life things aside, this is a lateral-thinking way to encourage you into desired activities.",
            "content_html": "<p>I found this idea on the internet probably around 2009, made my own version, and then unfortunately lost the reference to the original page. If you know where or from whom this originated, <strong>please</strong> tell me!</p><p>The idea of this is to have a day planner where the axis around which you plan is not time, but location. Instead of thinking about what you are going to do between 9am and 10am, this has you think about what you can do in a given space.</p><p><img src=\"http://more.milofultz.com/assets/20200523dayplan.jpg\" alt=\"Example of the day planner\" /></p><p>The thing I like best about this is that it is really good for keeping you in touch with activities you enjoy and places you like, making it easy to do those things by choosing it off of a menu. It’s almost like a worksheet for the day, with the bottom of the page open for note taking, drawing, and scribbling ideas down. Appointments and other real-life things aside, this is a lateral-thinking way to encourage you into desired activities.</p>",
            "url": "http://more.milofultz.com/2020/05/23/day-planner",
            
            
            
            "tags": ["project","system"],
            
            "date_published": "2020-05-23T00:00:00-07:00",
            "date_modified": "2020-05-23T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://more.milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://more.milofultz.com/2020/05/22/zettelkasten",
            "title": "I just found out about Zettelkasten",
            "summary": "Zettelkasten makes all of your notes easier to develop, utilize, and organize for whatever you need them",
            "content_text": "I’m probably going to do a hack job explaining this, so TL;DR: Zettelkasten makes all of your notes easier to develop, utilize, and organize for whatever you need them.Zettelkasten is a way of note taking and cataloguing that was popularized by sociologist Niklas Luhmann. This particular system intrigued me because it seems to overcome the issues that some basic note taking strategies have.Note taking, in the way I was taught, is all about writing down what you’re thinking in a stream-of-consiousness, extremely linear way. This can be good for going through a whole thought process and getting it all down, but it’s lacking any ability to be anything but “start here and end up there”. It’s hard to link it to any other ideas without explicitly remembering what your thought process was. It is possible, with use of notes in the margins, post it notes, and maybe a synopsis (which is also a written out linear thought), but is very unwieldy and again relies on your remembering or regularly reviewing your documented info. Kind of defeats the purpose of documentation.The other way is to use a kind of mind map. Starting with a basic idea or concept, one branches out into all related things. Maybe “Food” branches off into “Bread”, “Vegetables”, “Nuts”, “Seeds”, and “Fruits”. Maybe “Bread” then branches off into “Focaccia”, “Yeast”, “Sourdough”, “Rolls”, “Pizza”, etc. This can go along for a LONG time, leading people into a more creative exploratory area, kind of allowing their brain to just utilize that free association. The problem that can occur here is again a lack of mobility. Under “Bread”, maybe you want to create some kind of grouping by if it is a yeasted bread, or if it is enriched. Maybe you want to expound on the greatness of sourdough crust on a pizza, where would you put it: under “Pizza” or “Sourdough”? How would you go about organizing these already existing elements in the map without having duplicates or just wasting time moving things around?I believe that the Zettelkasten can help solve this issue. This allowed Luhmann the luxury of seeing this larger mapping of ideas and freedom of association that the mindmap provides, along with the linearity of thought that the more “academic” linear note taking technique provides, but without their rigid limitations.In my short time playing with this note taking concept, I have used it to take notes on a book I’m reading and help develop some of the major points I’ve seen into things that are relevant to me. I’m able to cross reference from different notes, allowing core concepts to stand on their own and also lead me down expository rabbit holes, allowing a development of smaller ideas that can create new connections once more.The way I see it, the longer I keep my Zettelkasten, the more robust my index of information, the more connections I can make, the better I can understand and develop my ideas.Because you’re probably wondering what it actually is and not just my real glossy surface level explanation of it, I recommend reading more in depth on it in these two articles:  The Zettelkasten Method  Zettelkasten — How One German Scholar Was So Freakishly Productive",
            "content_html": "<p>I’m probably going to do a hack job explaining this, so TL;DR: Zettelkasten makes all of your notes easier to develop, utilize, and organize for whatever you need them.</p><p>Zettelkasten is a way of note taking and cataloguing that was popularized by sociologist Niklas Luhmann. This particular system intrigued me because it seems to overcome the issues that some basic note taking strategies have.</p><p>Note taking, in the way I was taught, is all about writing down what you’re thinking in a stream-of-consiousness, extremely linear way. This can be good for going through a whole thought process and getting it all down, but it’s lacking any ability to be anything but “start here and end up there”. It’s hard to link it to any other ideas without explicitly remembering what your thought process was. It is possible, with use of notes in the margins, post it notes, and maybe a synopsis (which is also a written out linear thought), but is very unwieldy and again relies on your remembering or regularly reviewing your documented info. Kind of defeats the purpose of documentation.</p><p>The other way is to use a kind of <a href=\"https://en.wikipedia.org/wiki/Mind_map\">mind map</a>. Starting with a basic idea or concept, one branches out into all related things. Maybe “Food” branches off into “Bread”, “Vegetables”, “Nuts”, “Seeds”, and “Fruits”. Maybe “Bread” then branches off into “Focaccia”, “Yeast”, “Sourdough”, “Rolls”, “Pizza”, etc. This can go along for a LONG time, leading people into a more creative exploratory area, kind of allowing their brain to just utilize that free association. The problem that can occur here is again a lack of mobility. Under “Bread”, maybe you want to create some kind of grouping by if it is a yeasted bread, or if it is enriched. Maybe you want to expound on the greatness of sourdough crust on a pizza, where would you put it: under “Pizza” or “Sourdough”? How would you go about organizing these already existing elements in the map without having duplicates or just wasting time moving things around?</p><p>I believe that the Zettelkasten can help solve this issue. This allowed Luhmann the luxury of seeing this larger mapping of ideas and freedom of association that the mindmap provides, along with the linearity of thought that the more “academic” linear note taking technique provides, but without their rigid limitations.</p><p>In my short time playing with this note taking concept, I have used it to take notes on a book I’m reading and help develop some of the major points I’ve seen into things that are relevant to me. I’m able to cross reference from different notes, allowing core concepts to stand on their own and also lead me down expository rabbit holes, allowing a development of smaller ideas that can create new connections once more.</p><p>The way I see it, the longer I keep my Zettelkasten, the more robust my index of information, the more connections I can make, the better I can understand and develop my ideas.</p><p>Because you’re probably wondering what it actually is and not just my real glossy surface level explanation of it, I recommend reading more in depth on it in these two articles:</p><ul>  <li><a href=\"https://www.lesswrong.com/posts/NfdHG6oHBJ8Qxc26s/the-zettelkasten-method-1\">The Zettelkasten Method</a></li>  <li><a href=\"https://writingcooperative.com/zettelkasten-how-one-german-scholar-was-so-freakishly-productive-997e4e0ca125\">Zettelkasten — How One German Scholar Was So Freakishly Productive</a></li></ul>",
            "url": "http://more.milofultz.com/2020/05/22/zettelkasten",
            
            
            
            "tags": ["zettelkasten","notes","system"],
            
            "date_published": "2020-05-22T00:00:00-07:00",
            "date_modified": "2020-05-22T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://more.milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://more.milofultz.com/2020/05/22/keyboard-remapping",
            "title": "Keyboard Remapping on OSX - Adding the Missing Insert Key",
            "summary": "Keyboard Remapping on OSX - Adding the Missing Insert Key for using Trackers And/Or Other Old DOS Programs (Reality Adlib Tracker, MilkyTracker, etc.)",
            "content_text": "I downloaded Reality Adlib Tracker and MilkyTracker the other day and realized that Apple removed their insert key abilities a LONG time ago. The insert key is used quite a bit in these older programs for basic things like adding a line in your tracker, creating your pattern sequence, etc. Along with things like Dosbox, where these old relics are utilized, most of these older programs don’t allow new keybindings, so I had to dig around and find a new solution. I unfortunately couldn’t find anything directly related to trackers and stuff on any of their forums, so I figured I’d try and make something that could be found when searching for trackers, DOS, etc.Here’s one very simple and one not very simple but extremely interesting (read: difficult to understand for a rube like me) solution.SIMPLE And Recommended:Karabiner-Elements is an open-source program that allows you to remap any key on any device to another key. In this instance, I remapped my right alt/option key to the insert key, as I do not use that option key almost ever. In Karabiner, it’s honestly so simple, as you can see in the screenshot. Choose what key you want to press and what you want it to output. I tested this in RAD and it works beautifully.Check out a picture of my settings here.NOT AS SIMPLE And Honestly Not Recommended:So this way is much more in depth and I honestly don’t really know a lot of what I am doing here. What I tested works for me, but of course YMMV.I utilized the ideas listed in nanoant’s article, “macOS function key remapping with hidutil”, as well as the USB HID usage table and made a couple lines of code that can be input to achieve the same effect as above.Check out a picture of my settings here.Go into terminal and type the following:hidutil property --set '{\"UserKeyMapping\":[{\"HIDKeyboardModifierMappingSrc\":0x7000000e6, \"HIDKeyboardModifierMappingDst\":0x700000049}]}'What this does is the hidutil (Human Interface Design utility) is setting a new key map in the following way: key “right alt” is going to now output key “insert”. At this point, it wasn’t working, so I figured I needed to do the opposite, setting the “insert” key to map to “right alt”.hidutil property --set '{\"UserKeyMapping\":[{\"HIDKeyboardModifierMappingSrc\":0x700000049, \"HIDKeyboardModifierMappingDst\":0x7000000e6}]}'This made it work for me, and I don’t fully understand, but it is interesting to note. There are a lot of interesting controls in the USB HID image table, so I wonder if I would need any of these strange controls in the future. At least I’ll know how to map them … maybe?",
            "content_html": "<p>I downloaded <a href=\"https://www.3eality.com/productions/reality-adlib-tracker\">Reality Adlib Tracker</a> and <a href=\"https://milkytracker.titandemo.org/\">MilkyTracker</a> the other day and realized that Apple removed their insert key abilities a LONG time ago. The insert key is used quite a bit in these older programs for basic things like adding a line in your tracker, creating your pattern sequence, etc. Along with things like Dosbox, where these old relics are utilized, most of these older programs don’t allow new keybindings, so I had to dig around and find a new solution. I unfortunately couldn’t find anything directly related to trackers and stuff on any of their forums, so I figured I’d try and make something that could be found when searching for trackers, DOS, etc.</p><p>Here’s one very simple and one not very simple but extremely interesting (read: difficult to understand for a rube like me) solution.</p><hr /><h3 id=\"simple-and-recommended\">SIMPLE And Recommended:</h3><p>Karabiner-Elements is an open-source program that allows you to remap any key on any device to another key. In this instance, I remapped my right alt/option key to the insert key, as I do not use that option key almost ever. In Karabiner, it’s honestly so simple, as you can see in the screenshot. Choose what key you want to press and what you want it to output. I tested this in RAD and it works beautifully.</p><p><a href=\"http://more.milofultz.com/assets/20200522karabiner.png\">Check out a picture of my settings here.</a></p><hr /><h3 id=\"not-as-simple-and-honestly-not-recommended\">NOT AS SIMPLE And Honestly Not Recommended:</h3><p>So this way is much more in depth and I honestly don’t really know a lot of what I am doing here. What I tested works for me, but of course YMMV.</p><p>I utilized the ideas listed in nanoant’s article, <a href=\"https://www.nanoant.com/mac/macos-function-key-remapping-with-hidutil\">“macOS function key remapping with hidutil”</a>, as well as the <a href=\"https://www.freebsddiary.org/APC/usb_hid_usages.php\">USB HID usage table</a> and made a couple lines of code that can be input to achieve the same effect as above.</p><p><a href=\"http://more.milofultz.com/assets/20200522karabiner.png\">Check out a picture of my settings here.</a></p><p>Go into terminal and type the following:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>hidutil property --set '{\"UserKeyMapping\":[{\"HIDKeyboardModifierMappingSrc\":0x7000000e6, \"HIDKeyboardModifierMappingDst\":0x700000049}]}'</code></pre></div></div><p>What this does is the hidutil (Human Interface Design utility) is setting a new key map in the following way: key “right alt” is going to now output key “insert”. At this point, it wasn’t working, so I figured I needed to do the opposite, setting the “insert” key to map to “right alt”.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>hidutil property --set '{\"UserKeyMapping\":[{\"HIDKeyboardModifierMappingSrc\":0x700000049, \"HIDKeyboardModifierMappingDst\":0x7000000e6}]}'</code></pre></div></div><p>This made it work for me, and I don’t fully understand, but it is interesting to note. There are a lot of interesting controls in the USB HID image table, so I wonder if I would need any of these strange controls in the future. At least I’ll know how to map them … maybe?</p>",
            "url": "http://more.milofultz.com/2020/05/22/keyboard-remapping",
            
            
            
            "tags": ["tracker","computer","project"],
            
            "date_published": "2020-05-22T00:00:00-07:00",
            "date_modified": "2020-05-22T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://more.milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://more.milofultz.com/2020/05/22/just-in-case",
            "title": "Buying Things \"Just In Case\" vs. Real Estate",
            "summary": "Does buying a thing just in case I need it in the future outweigh the costs? Putting extreme situations aside, I pretty much always feel the answer is no.",
            "content_text": "In wondering if I should make a purchase, I noticed a problem with my thinking early on: if something was on sale, I’d buy it, just in case I needed it later to accomplish some goal or in a project I had in mind. The reasoning was that if I bought it now, in a year when I need that very specific thing on that project, then I won’t have to pay what feels like an extra amount, as well as extra time, to go and buy it.There were a lot of problems with this line of thinking, mostly that the allure of a sale deluded me into thinking that I will use the thing, making me think about all the things I may need this thing for and justifying it that way. But what finally broke this down for me was thinking about the real estate these things take up and how it affects me.Does buying a thing just in case I need it in the future outweigh the costs? Putting extreme situations aside, I pretty much always feel the answer is no.  The cost of space. Even with smaller things, there is a cost to house these just-in-case items, especially the more you get. Storage isn’t free, and there is a very real cost to keeping your things organized and maintained.  The cost of finding it when you need it. This problem grows worse and worse the more just-in-case stuff you get. If you have a house full of stuff you might use, you have two choices: spend your time organizing and maintaining that organization, or save that time and then spend that time later trying to find it. Either way, your total time spent goes up with each just-in-case item you buy, and if you feel that your time is worth anything, the time spent in trying to find it later will most likely negate any savings you may have gotten.  The mental cost. With items that are tied to half-done or barely started projects, there is a mental cost to seeing these just-in-case items around the house. When I walked by my oak 1x8’s in the garage, I was reminded that I bought those to build a skateboard and I haven’t done anything with them for two years. For me, being reminded of all of that whenever I walked in the garage gave me a sense of disappointment instead of excitement. If I had scheduled time to finish that project before I bought the supplies, I would have closed the loop, finished the project, and not brought down my mood over those years.  The cost of never using it. If you never end up using it, it is a total loss. I can’t tell you how many times I have bought something just in case, just to try and sell it and then give it to a thrift store 4 years later when I finally gave up the ghost. In these situations, I lost 4 years of space, 4 years of organizing and maintaining it, and the full cost of the item. If I do this with one item out of ten, will that make the other nine worth it?There are still situations where buying something just in case is actually useful, but I find that is few and far between. At this point, I have much more usable space than I did before, a lot less half-done or barely started projects, and more money.Overall, if I had to choose one side, I would choose real estate over buying things “just in case”.",
            "content_html": "<p>In wondering if I should make a purchase, I noticed a problem with my thinking early on: if something was on sale, I’d buy it, just in case I needed it later to accomplish some goal or in a project I had in mind. The reasoning was that if I bought it now, in a year when I need that very specific thing on that project, then I won’t have to pay what feels like an extra amount, as well as extra time, to go and buy it.</p><p>There were a lot of problems with this line of thinking, mostly that the allure of a sale deluded me into thinking that I will use the thing, making me think about all the things I may need this thing for and justifying it that way. But what finally broke this down for me was thinking about the real estate these things take up and how it affects me.</p><hr /><p>Does buying a thing just in case I need it in the future outweigh the costs? Putting extreme situations aside, I pretty much always feel the answer is <strong>no</strong>.</p><ol>  <li><strong>The cost of space.</strong> Even with smaller things, there is a cost to house these just-in-case items, especially the more you get. Storage isn’t free, and there is a very real cost to keeping your things organized and maintained.</li>  <li><strong>The cost of finding it when you need it.</strong> This problem grows worse and worse the more just-in-case stuff you get. If you have a house full of stuff you might use, you have two choices: spend your time organizing and maintaining that organization, or save that time and then spend that time later trying to find it. Either way, your total time spent goes up with each just-in-case item you buy, and if you feel that your time is worth anything, the time spent in trying to find it later will most likely negate any savings you may have gotten.</li>  <li><strong>The mental cost.</strong> With items that are tied to half-done or barely started projects, there is a mental cost to seeing these just-in-case items around the house. When I walked by my oak 1x8’s in the garage, I was reminded that I bought those to build a skateboard and I haven’t done anything with them for two years. For me, being reminded of all of that whenever I walked in the garage gave me a sense of disappointment instead of excitement. If I had scheduled time to finish that project before I bought the supplies, I would have closed the loop, finished the project, and not brought down my mood over those years.</li>  <li><strong>The cost of never using it.</strong> If you never end up using it, it is a <em>total loss</em>. I can’t tell you how many times I have bought something just in case, just to try and sell it and then give it to a thrift store 4 years later when I finally gave up the ghost. In these situations, I lost 4 years of space, 4 years of organizing and maintaining it, and the full cost of the item. If I do this with one item out of ten, will that make the other nine worth it?</li></ol><hr /><p>There are still situations where buying something just in case is actually useful, but I find that is few and far between. At this point, I have much more usable space than I did before, a lot less half-done or barely started projects, and more money.</p><p>Overall, if I had to choose one side, I would choose real estate over buying things “just in case”.</p>",
            "url": "http://more.milofultz.com/2020/05/22/just-in-case",
            
            
            
            
            
            "date_published": "2020-05-22T00:00:00-07:00",
            "date_modified": "2020-05-22T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://more.milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://more.milofultz.com/2020/05/17/adam-savage",
            "title": "The Adam Savage Trial Method",
            "summary": "When you're starting a hobby, don't buy the expensive tools. Buy something mid-range. If you use it so much that it breaks, buy the best one to replace it.",
            "content_text": "Adam Savage agreed with the following advice regarding buying tools:  When you’re first starting a hobby, don’t buy the expensive tools. Buy something mid-range. If you use it so much that it breaks, then buy the best one to replace it.[1]Following with:  Once I was working professionally my goal was to steadily accumulate better versions of my high-use tools. And if there was a tool I didn’t have but NEEDED more than 3x/year I’d invest in that tool.[1]If you are unsure how often you will use this tool or it’s efficacy in achieving your goal, you may buy cheap first on purpose. This goes against the prevailing advice of “pennywise and pound foolish” and “buy cheap, buy twice”, but in the long-term, this advice may save money and give you valuable data you didn’t have before.If you are considering getting a tool, you may be able to bypass most criteria aside from “Effectiveness” with this method. Simply look for the one that is cheapest and will get the job done well. It doesn’t have to be perfect or do everything, but it needs to do the job. In buying cheap here, you are ending up giving yourself a way to accrue data:  Do I actually need this tool?  Will I use this tool very often?  Is this tool effective?  Does this tool do everything I need it to?  Do I need it to do more than it does now?  What are the elements I wish were improved?These insights are things you may not have known to think about prior to owning this “inferior” tool, and now for a minimal investment and real world experience, you can make a better informed purchase in the future.References:  https://twitter.com/donttrythis/status/941149124497305600",
            "content_html": "<p>Adam Savage agreed with the following advice regarding buying tools:</p><blockquote>  <p>When you’re first starting a hobby, don’t buy the expensive tools. Buy something mid-range. If you use it so much that it breaks, then buy the best one to replace it.[1]</p></blockquote><p>Following with:</p><blockquote>  <p>Once I was working professionally my goal was to steadily accumulate better versions of my high-use tools. And if there was a tool I didn’t have but NEEDED more than 3x/year I’d invest in that tool.[1]</p></blockquote><p>If you are unsure how often you will use this tool or it’s efficacy in achieving your goal, you may buy cheap first <em>on purpose</em>. This goes against the prevailing advice of “pennywise and pound foolish” and “buy cheap, buy twice”, but in the long-term, this advice may save money and give you valuable data you didn’t have before.</p><p>If you are considering getting a tool, you may be able to bypass most criteria aside from “Effectiveness” with this method. Simply look for the one that is cheapest and will get the job done well. It doesn’t have to be perfect or do everything, but it needs to do the job. In buying cheap here, you are ending up giving yourself a way to accrue data:</p><ul>  <li>Do I actually need this tool?</li>  <li>Will I use this tool very often?</li>  <li>Is this tool effective?</li>  <li>Does this tool do everything I need it to?</li>  <li>Do I need it to do more than it does now?</li>  <li>What are the elements I wish were improved?</li></ul><p>These insights are things you may not have known to think about prior to owning this “inferior” tool, and now for a minimal investment and real world experience, you can make a better informed purchase in the future.</p><hr /><p>References:</p><ol>  <li><a href=\"https://twitter.com/donttrythis/status/941149124497305600\">https://twitter.com/donttrythis/status/941149124497305600</a></li></ol>",
            "url": "http://more.milofultz.com/2020/05/17/adam-savage",
            
            
            
            
            
            "date_published": "2020-05-17T00:00:00-07:00",
            "date_modified": "2020-05-17T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://more.milofultz.com",
                "avatar": null
                }
                
            
        }
    
    ]
}