{
    "version": "https://jsonfeed.org/version/1",
    "title": "Milo Fultz",
    "home_page_url": "http://milofultz.com/",
    "feed_url": "http://milofultz.com/feed.json",
    "description": null,
    "icon": "http://milofultz.com/apple-touch-icon.png",
    "favicon": "http://milofultz.com/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "Milo Fultz",
        "url": "http://milofultz.com",
        "avatar": null
    },
    
"items": [
    
        {
            "id": "http://milofultz.com/2020/12/13/aoc-day-13",
            "title": "Solution to Advent of Code 13 - LCM with Offsets",
            "summary": "Solution to Advent of Code 13 - LCM with Offsets",
            "content_text": "Here, to help justify that I definitely stole an answer from somebody on Reddit to answer this question, I’m going to explain why the answer works. Mainly for myself to truly understand this, but also so that if somebody searches for something like this at a later date, there will be a reference. (I’ll be using the smaller sample data for the explanation because it is way easier to grok)Check out the problem here, or this won’t make any sense.Brute ForceMy initial solution used brute force, as essentially all of my solutions have so far, and this…didn’t work. My computer was working really hard, fans spinning and everything, but wasn’t getting anywhere (because the answer for me ended up being 667,437,230,788,118 and I started at 1). I went to bed and tried to not think about it. First of course we start with parsing the data, which is a line of “bus IDs”, which actually correspond to the intervals at which the buses leave the station.7,13,x,x,59,x,31,19I put these into an array, converting the numbers to integers and leaving the x’s as strings.[7, 13, 'x', 'x', 59, 'x', 31, 19]Here’s the pseudocode of the brute force solution:Set 'largest_number' to the largest number in the arraySet 'largest_offset' to the index of 'largest_number' in the arraySet the initial value of the 'multiple' by which to multiply the 'largest_number' to 1Set a 'found' variable to let the program know the solution has not been foundWhile the solution has not been 'found':    Set that the solution is 'found' until proven otherwise    Set the 'target' test value to the 'multiple' times the 'largest_number'    For each 'index' of each 'bus_ID' in the array        Set the 'offset' to the 'index' minus the 'largest_offset'        If the 'bus_ID' is an 'x', then continue to the next 'bus_ID'        If the remainder of (the sum of the 'target' and the 'offset') divided by the 'bus_ID' is not zero:        \tSet that the solution was not found and break out of the loop    Add one to the 'multiple'Return the 'target'I used the largest number in the array to try and speed up the already long search, as their multiples of 59 would get searched way faster than the multiples of 7. As this iterates through, it tests every multiple of the largest number against each number plus or minus its relative offset. Unfortunately, even though this works, it is not fast (at all) for the much longer and much more complex final puzzle input.One way I could have improved this was in the parsing of the data. Instead of trying to calculate weird offsets, I should have just included the offsets with the bus IDs as a tuple. The result would be a list of tuples, each of which include the offset and the bus ID/interval. The ‘x’s are also discarded, as they are no longer necessary.# (offset, bus_id)[(0,7), (1,13), (4,59), (6,31), (7,19)]SievingThe idea of a ‘sieve’ in math is to use it to ‘sieve’ out all non-possibilities, leaving you with a much smaller pool to test. Most notable is the Sieve of Erastosthenes, which is used to calculate prime numbers.The most base case of this problem that I found was to find the least common multiple of a given set of integers. To find this using the sieve method, we can use this pseudocode:Set the initial value of the 'answer' number to 0Set the initial value of 'least common multiple' to 1For each 'number' in the array:\tWhile the remainder of the 'answer' value divided by the 'number' is not zero:\t\tAdd the value of the 'least common multiple' to the 'answer'\tSet the 'least common multiple' to the `answer`Return the 'answer'Example:Let’s say our given array of integers are [2,3,8]. We start by setting our answer as 0 and the least common multiple to 1. Then we reach the For loop, which will cycle through the numbers in the array:Set the `number` to the first number in the `array`, 2.While `answer` % `number` ≠ 0: \t0 % 2 ≠ 0 is true, so add `least common multiple` to the `answer`. `answer` now equals 1.\t1 % 2 ≠ 0 is true, so add `least common multiple` to the `answer`. `answer` now equals 2.\t2 % 2 ≠ 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 2.We continue through the for loop: `number` is the next in the `array`: 3.While `answer` % `number` ≠ 0: \t2 % 3 ≠ 0 is true, so add `least common multiple` to `answer`: 4.\t4 % 3 ≠ 0 is true, so add `least common multiple` to `answer`:  6.\t6 % 3 ≠ 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 6. We continue through the for loop: `number` is the next in the `array`: 8.While `answer` % `number` ≠ 0: \t6 % 8 ≠ 0 is true, so add `least common multiple` to `answer`: 12.\t12 % 8 ≠ 0 is true, so add `least common multiple` to `answer`: 18.\t18 % 8 ≠ 0 is true, so add `least common multiple` to `answer`: 24.\t24 % 8 ≠ 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 24.One thing to note going forward is that all the numbers of the bus IDs are prime numbers, as if they were not, there would have to be some factorization in preparing to find the least common multiple. Finding the LCM of all primes is to just multiply them together, but with the offsets, we need this longhand to get there.Adding the OffsetsNow that we have this pseudocode, adding the offsets is easier for me to grok. The biggest difference is that we are going to utilize the least common multiple and the answer a tiny bit differently. Assuming we have our list of bus IDs from before, where each ID is a tuple containing the offset and the bus ID/interval, we now have to adjust our test in the while loop. Instead of testing for if the remainder of the answer divided by the number is not zero, we are going to test whether the remainder of the sum of the answer and the offset all divided by the number is not zero.('answer' + 'offset') % `number` ≠ 0Now, here is the pseudocode, taking into account the offset needed to calculate the answer.Set the initial value of the 'answer' number to 0Set the initial value of 'least common multiple' to 1For each 'offset' and 'number' in the array:\tWhile the remainder of the sum of the 'answer' and the 'offset' value all divided by the 'number' is not zero:\t\tAdd the value of the 'least common multiple' to the 'answer'\tSet the 'least common multiple' to the 'least common multiple' multiplied by the 'number'Return the 'answer'ExampleI’ll again use an array containing [2,3,8], keeping in mind the new problem: our solution must look for what number is:  A multiple of the first element, and  The sum of the offset plus a multiple of the number, for every other element.First we will need to parse our array into tuples containing their offsets and numbers:[(0, 2), (1, 3), (2, 4)]Next, we define answer as 0 and least common multiple as 1. Then we continue into the For loop:Set `offset` to the first number of the first tuple in `array`: 0; and set `number` to second number in the first tuple in `array`: 2.While (`answer` + `offset`) % `number` ≠ 0: \t(0 + 0) % 2 ≠ 0 is true, so add `least common multiple` to `answer`: 1.\t(1 + 0) % 2 ≠ 0 is true, so add `least common multiple` to `answer`: 2.\t(2 + 0) % 2 ≠ 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 2.We continue through the for loop: set `offset` and `number` as the numbers in the next tuple: 1 and 3.While (`answer` + `offset`) % `number` ≠ 0: \t(2 + 1) % 3 ≠ 0 is true, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 6.We continue through the for loop: set `offset` and `number` as the numbers in the next tuple: 2 and 8.While (`answer` + `offset`) % `number` ≠ 0: \t(2 + 2) % 8 ≠ 0 is true, so add `least common multiple` to `answer`: 8.\t(8 + 2) % 8 ≠ 0 is true, so add `least common multiple` to `answer`: 14.\t(14 + 2) % 8 ≠ 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 48.Return the `answer`: 14.Other SolutionsThe ones using the Chinese remainder theorem went way over my head and the videos I watched were not enough to compel me to spend time trying to: first, understand it and then second, write the program out. It was well beyond my understanding, but I think it probably is the “desired” solution.",
            "content_html": "<p>Here, to help justify that I definitely stole an answer from somebody on Reddit to answer this question, I’m going to explain <em>why</em> the answer works. Mainly for myself to truly understand this, but also so that if somebody searches for something like this at a later date, there will be a reference. (I’ll be using the smaller sample data for the explanation because it is way easier to grok)</p><p><a href=\"https://adventofcode.com/2020/day/13\"><strong>Check out the problem here, or this won’t make any sense.</strong></a></p><h2 id=\"brute-force\">Brute Force</h2><p><a href=\"https://github.com/milofultz/aoc2020/blob/master/13/aoc13-2-brute.py\">My initial solution used brute force</a>, as essentially all of my solutions have so far, and this…didn’t work. My computer was working really hard, fans spinning and everything, but wasn’t getting anywhere (because the answer for me ended up being 667,437,230,788,118 and I started at <em>1</em>). I went to bed and tried to not think about it. First of course we start with parsing the data, which is a line of “bus IDs”, which actually correspond to the intervals at which the buses leave the station.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>7,13,x,x,59,x,31,19</code></pre></div></div><p>I put these into an array, converting the numbers to integers and leaving the x’s as strings.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[7, 13, 'x', 'x', 59, 'x', 31, 19]</code></pre></div></div><p>Here’s the pseudocode of the brute force solution:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Set 'largest_number' to the largest number in the arraySet 'largest_offset' to the index of 'largest_number' in the arraySet the initial value of the 'multiple' by which to multiply the 'largest_number' to 1Set a 'found' variable to let the program know the solution has not been foundWhile the solution has not been 'found':    Set that the solution is 'found' until proven otherwise    Set the 'target' test value to the 'multiple' times the 'largest_number'    For each 'index' of each 'bus_ID' in the array        Set the 'offset' to the 'index' minus the 'largest_offset'        If the 'bus_ID' is an 'x', then continue to the next 'bus_ID'        If the remainder of (the sum of the 'target' and the 'offset') divided by the 'bus_ID' is not zero:        \tSet that the solution was not found and break out of the loop    Add one to the 'multiple'Return the 'target'</code></pre></div></div><p>I used the largest number in the array to try and speed up the already long search, as their multiples of 59 would get searched way faster than the multiples of 7. As this iterates through, it tests every multiple of the largest number against each number plus or minus its relative offset. Unfortunately, even though this works, it is not fast (at all) for the much longer and much more complex final puzzle input.</p><p>One way I could have improved this was in the parsing of the data. Instead of trying to calculate weird offsets, I should have just included the offsets with the bus IDs as a tuple. The result would be a list of tuples, each of which include the <strong>offset</strong> and the <strong>bus ID/interval</strong>. The ‘x’s are also discarded, as they are no longer necessary.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># (offset, bus_id)[(0,7), (1,13), (4,59), (6,31), (7,19)]</code></pre></div></div><h2 id=\"sieving\">Sieving</h2><p>The idea of a <a href=\"https://en.wikipedia.org/wiki/Sieve_theory\">‘sieve’</a> in math is to use it to ‘sieve’ out all non-possibilities, leaving you with a much smaller pool to test. Most notable is the <a href=\"https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\">Sieve of Erastosthenes</a>, which is used to calculate prime numbers.</p><p>The most base case of this problem that I found was to find the least common multiple of a given set of integers. To find this using the sieve method, we can use this pseudocode:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Set the initial value of the 'answer' number to 0Set the initial value of 'least common multiple' to 1For each 'number' in the array:\tWhile the remainder of the 'answer' value divided by the 'number' is not zero:\t\tAdd the value of the 'least common multiple' to the 'answer'\tSet the 'least common multiple' to the `answer`Return the 'answer'</code></pre></div></div><h4 id=\"example\">Example:</h4><p>Let’s say our given <code class=\"highlighter-rouge\">array</code> of integers are [2,3,8]. We start by setting our <code class=\"highlighter-rouge\">answer</code> as 0 and the <code class=\"highlighter-rouge\">least common multiple</code> to 1. Then we reach the For loop, which will cycle through the <code class=\"highlighter-rouge\">number</code>s in the <code class=\"highlighter-rouge\">array</code>:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Set the `number` to the first number in the `array`, 2.While `answer` % `number` ≠ 0: \t0 % 2 ≠ 0 is true, so add `least common multiple` to the `answer`. `answer` now equals 1.\t1 % 2 ≠ 0 is true, so add `least common multiple` to the `answer`. `answer` now equals 2.\t2 % 2 ≠ 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 2.We continue through the for loop: `number` is the next in the `array`: 3.While `answer` % `number` ≠ 0: \t2 % 3 ≠ 0 is true, so add `least common multiple` to `answer`: 4.\t4 % 3 ≠ 0 is true, so add `least common multiple` to `answer`:  6.\t6 % 3 ≠ 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 6. We continue through the for loop: `number` is the next in the `array`: 8.While `answer` % `number` ≠ 0: \t6 % 8 ≠ 0 is true, so add `least common multiple` to `answer`: 12.\t12 % 8 ≠ 0 is true, so add `least common multiple` to `answer`: 18.\t18 % 8 ≠ 0 is true, so add `least common multiple` to `answer`: 24.\t24 % 8 ≠ 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 24.</code></pre></div></div><p>One thing to note going forward is that <strong>all the numbers of the bus IDs are prime numbers</strong>, as if they were not, there would have to be some factorization in preparing to find the least common multiple. Finding the LCM of all primes is to just multiply them together, but with the offsets, we need this longhand to get there.</p><h3 id=\"adding-the-offsets\">Adding the Offsets</h3><p>Now that we have this pseudocode, adding the offsets is easier for me to grok. The biggest difference is that we are going to utilize the <code class=\"highlighter-rouge\">least common multiple</code> and the <code class=\"highlighter-rouge\">answer</code> a <em>tiny</em> bit differently. Assuming we have our list of bus IDs from before, where each ID is a tuple containing the <strong>offset</strong> and the <strong>bus ID/interval</strong>, we now have to adjust our test in the while loop. Instead of testing for if the remainder of the <code class=\"highlighter-rouge\">answer</code> divided by the <code class=\"highlighter-rouge\">number</code> is not zero, we are going to test whether the remainder of the sum of the <code class=\"highlighter-rouge\">answer</code> and the <code class=\"highlighter-rouge\">offset</code> all divided by the <code class=\"highlighter-rouge\">number</code> is not zero.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>('answer' + 'offset') % `number` ≠ 0</code></pre></div></div><p>Now, here is the pseudocode, taking into account the <code class=\"highlighter-rouge\">offset</code> needed to calculate the answer.</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Set the initial value of the 'answer' number to 0Set the initial value of 'least common multiple' to 1For each 'offset' and 'number' in the array:\tWhile the remainder of the sum of the 'answer' and the 'offset' value all divided by the 'number' is not zero:\t\tAdd the value of the 'least common multiple' to the 'answer'\tSet the 'least common multiple' to the 'least common multiple' multiplied by the 'number'Return the 'answer'</code></pre></div></div><h4 id=\"example-1\">Example</h4><p>I’ll again use an <code class=\"highlighter-rouge\">array</code> containing [2,3,8], keeping in mind the new problem: our solution must look for what number is:</p><ul>  <li>A multiple of the first element, and</li>  <li>The sum of the offset plus a multiple of the number, for every other element.</li></ul><p>First we will need to parse our array into tuples containing their <strong>offsets</strong> and <strong>numbers</strong>:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[(0, 2), (1, 3), (2, 4)]</code></pre></div></div><p>Next, we define <code class=\"highlighter-rouge\">answer</code> as 0 and <code class=\"highlighter-rouge\">least common multiple</code> as 1. Then we continue into the For loop:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Set `offset` to the first number of the first tuple in `array`: 0; and set `number` to second number in the first tuple in `array`: 2.While (`answer` + `offset`) % `number` ≠ 0: \t(0 + 0) % 2 ≠ 0 is true, so add `least common multiple` to `answer`: 1.\t(1 + 0) % 2 ≠ 0 is true, so add `least common multiple` to `answer`: 2.\t(2 + 0) % 2 ≠ 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 2.We continue through the for loop: set `offset` and `number` as the numbers in the next tuple: 1 and 3.While (`answer` + `offset`) % `number` ≠ 0: \t(2 + 1) % 3 ≠ 0 is true, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 6.We continue through the for loop: set `offset` and `number` as the numbers in the next tuple: 2 and 8.While (`answer` + `offset`) % `number` ≠ 0: \t(2 + 2) % 8 ≠ 0 is true, so add `least common multiple` to `answer`: 8.\t(8 + 2) % 8 ≠ 0 is true, so add `least common multiple` to `answer`: 14.\t(14 + 2) % 8 ≠ 0 is false, so break out of the while loop.Set `least common multiple` to `least common multiple` times `number`: 48.Return the `answer`: 14.</code></pre></div></div><h2 id=\"other-solutions\">Other Solutions</h2><p>The ones using the <a href=\"https://en.wikipedia.org/wiki/Chinese_remainder_theorem\">Chinese remainder theorem</a> went <em>way</em> over my head and the videos I watched were not enough to compel me to spend time trying to: first, understand it and then second, write the program out. It was well beyond my understanding, but I think it probably is the “desired” solution.</p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/12/13/aoc-day-13",
            
            
            
            
            
            "date_published": "2020-12-13T00:00:00-08:00",
            "date_modified": "2020-12-13T00:00:00-08:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/12/01/advent-of-code",
            "title": "🧩 Advent Of Code 2020 - Solutions",
            "summary": "Here's some solutions I made for the AoC 2020",
            "content_text": "These are my solutions. I’m trying to do as many as I can in both Python and in Javascript. Plus I’m going to scope out people’s answers in C and see what I can glean.Check out the solutions on GitHub  20201201: Solved the first challenge, starting up number 2  20201202: Solved day 2  20201203: Solved day 3 and 4  20201204: Solved day 5  20201205: Solved day 6  20201206: Solved day 7. Definitely noticing the desire to be on the leaderboards and “cool” or “fast” or whatever and trying to go against that feeling. I would rather have effective solutions “slowly” than flail around and hope stuff works.  20201207: Solved day 8. Worked much more purposefully and without (as much) regard to the clock; still working on focusing on the process over the product.  20201208: Solved day 9. Brute forcing a problem I should probably use an algorithm for, but don’t know enough. Now is the time to really dig! Look through solutions on Reddit, Mastodon, etc.  20201209: Revised my work for day 9 to find a better solution. Ended up using a solution from ‘neelakantankk’ I found on Reddit, utilizing a deque, which I have very little experience with. It is a very interesting solution that utilizes a truth I missed in the iteration. When iterating through the contiguous numbers, if the sum of those contiguous numbers is higher than the target, you can safely remove the first number in the contiguous numbers. I’m having a hard time fully grokking it but it intuitively feels right, so I’m going to try and work it out on paper until it really makes sense.  20201209: Solved day 10 part 1 but do not have the know how for part 2 without just stealing an answer without any understanding. Will come back later.  20201210: Solved day 11  20201211: Solved day 12  20201211: Solved day 13 part 1 and have a brute force solution for part 2; however this solution has been spinning for a half hour at least and is showing no signs of progress.  20201213: Went and searched for solutions and found one that I was really able to understand from gravitar64, using a “sieving” method. This didn’t use some intense number theory, like other solutions which used the Chinese Remainder Theorem. I did cheat, but I understand the answer and how it works and that’s all I wanted anyway.  20201213: Made a write up of how the sieve method works to repent for what feels like cheating.  20201215: Solved day 14 and 15. Day 15 was really tough to understand while I was doing it, as there was a lot to juggle, but it was a very fun one to solve. Ended up refactoring quite a bit by reading the code of Scarymagi I found on Reddit.  20201216: Solved day 16, and parsing was the majority of the work. It was kind of its own challenge in itself. The problem for part 1 after that was pretty straightforward with a set. Part 2 presented an interesting challenge of essentially trying to solve a logic grid puzzle using programming, which I hadn’t done before. That was a good time!  20201218: Started on day 17 and realized I need to finally learn how to use Numpy and deal with 3 dimensional arrays, as this is essentially Conway’s Game of Life but in 3 dimensions.  20201219: Solved day 17 and learned how to use Numpy fairly well with it. Ended up doing Game of Life as a 3 dimensional and 4 dimensional version, which was wild. 3-dimensions required a lot from me, a guy who doesn’t ever do anything like this and probably solved it in a very long-winded inelegant way, but dammit I solved it.  20201219: Solved day 10 part 2 finally. Tried a recursive solution but it was blasting my computer and taking way too long, so I went searching. The solutions I found using defaultdict was super elegant, so went with that and am pretty happy with it.  20201221: Solved day 18, which was all about essentially making math that solved in the wrong order (i.e. not PEMDAS).  20201222: Solved day 19 part 1, which was really hard to grok, but I got it. A recursion puzzle that was hard to wrap my head around the initial parts. Part 2 is beyond the scope of what my late night brain can handle.  20201225: Solved day 20 and it took me a few hours yesterday and most of today. This was really fun, essentially automating putting together a puzzle, which was a really satisfying project.",
            "content_html": "<p>These are my solutions. I’m trying to do as many as I can in both Python and in Javascript. Plus I’m going to scope out people’s answers in C and see what I can glean.</p><p><a href=\"https://github.com/milofultz/aoc2020\"><strong>Check out the solutions on GitHub</strong></a></p><ul>  <li>20201201: Solved the first challenge, starting up number 2</li>  <li>20201202: Solved day 2</li>  <li>20201203: Solved day 3 and 4</li>  <li>20201204: Solved day 5</li>  <li>20201205: Solved day 6</li>  <li>20201206: Solved day 7. Definitely noticing the desire to be on the leaderboards and “cool” or “fast” or whatever and trying to go against that feeling. I would rather have effective solutions “slowly” than flail around and hope stuff works.</li>  <li>20201207: Solved day 8. Worked much more purposefully and without (as much) regard to the clock; still working on focusing on the process over the product.</li>  <li>20201208: Solved day 9. Brute forcing a problem I should probably use an algorithm for, but don’t know enough. Now is the time to really dig! Look through solutions on Reddit, Mastodon, etc.</li>  <li>20201209: Revised my work for day 9 to find a better solution. Ended up using <a href=\"https://github.com/neelakantankk/Advent_of_Code_2020/blob/main/Day_09/day_09.py\">a solution from ‘neelakantankk’ I found on Reddit</a>, utilizing a deque, which I have very little experience with. It is a very interesting solution that utilizes a truth I missed in the iteration. When iterating through the contiguous numbers, if the sum of those contiguous numbers is higher than the target, you can safely remove the first number in the contiguous numbers. I’m having a hard time fully grokking it but it intuitively feels right, so I’m going to try and work it out on paper until it really makes sense.</li>  <li>20201209: Solved day 10 part 1 but do not have the know how for part 2 without just stealing an answer without any understanding. Will come back later.</li>  <li>20201210: Solved day 11</li>  <li>20201211: Solved day 12</li>  <li>20201211: Solved day 13 part 1 and have a brute force solution for part 2; however this solution has been spinning for a half hour at least and is showing no signs of progress.</li>  <li>20201213: Went and searched for solutions and <a href=\"https://www.reddit.com/r/adventofcode/comments/kc4njx/comment/gfqeouq\">found one that I was really able to understand from gravitar64</a>, using a <a href=\"https://en.wikipedia.org/wiki/Sieve_theory\">“sieving” method</a>. This didn’t use some intense number theory, like other solutions which used the <a href=\"https://en.wikipedia.org/wiki/Chinese_remainder_theorem\">Chinese Remainder Theorem</a>. I did cheat, but I understand the answer and how it works and that’s all I wanted anyway.</li>  <li>20201213: <a href=\"/2020/12/13/aoc-day-13\">Made a write up of how the sieve method works to repent for what feels like cheating.</a></li>  <li>20201215: Solved day 14 and 15. Day 15 was really tough to understand while I was doing it, as there was a lot to juggle, but it was a very fun one to solve. Ended up refactoring quite a bit by reading the code of <a href=\"https://github.com/Scarygami/aoc2020/blob/main/15/day15.py\">Scarymagi</a> I found on Reddit.</li>  <li>20201216: Solved day 16, and parsing was the majority of the work. It was kind of its own challenge in itself. The problem for part 1 after that was pretty straightforward with a set. Part 2 presented an interesting challenge of essentially trying to solve a <a href=\"https://en.wikipedia.org/wiki/Logic_puzzle#Logic_grid_puzzles\">logic grid puzzle</a> using programming, which I hadn’t done before. That was a good time!</li>  <li>20201218: Started on day 17 and realized I need to finally learn how to use Numpy and deal with 3 dimensional arrays, as this is essentially <a href=\"https://en.wikipedia.org/wiki/Conway's_Game_of_Life\">Conway’s Game of Life</a> but in 3 dimensions.</li>  <li>20201219: Solved day 17 and learned how to use Numpy fairly well with it. Ended up doing Game of Life as a 3 dimensional and <em>4 dimensional</em> version, which was wild. 3-dimensions required a lot from me, a guy who doesn’t ever do anything like this and probably solved it in a very long-winded inelegant way, but dammit I solved it.</li>  <li>20201219: Solved day 10 part 2 finally. Tried a recursive solution but it was blasting my computer and taking way too long, so I went searching. The solutions I found using <code class=\"highlighter-rouge\">defaultdict</code> was super elegant, so went with that and am pretty happy with it.</li>  <li>20201221: Solved day 18, which was all about essentially making math that solved in the wrong order (i.e. not <a href=\"https://blog.prepscholar.com/pemdas-meaning-rule\">PEMDAS</a>).</li>  <li>20201222: Solved day 19 part 1, which was really hard to grok, but I got it. A recursion puzzle that was hard to wrap my head around the initial parts. Part 2 is beyond the scope of what my late night brain can handle.</li>  <li>20201225: Solved day 20 and it took me a few hours yesterday and most of today. This was really fun, essentially automating putting together a puzzle, which was a really satisfying project.</li></ul>",
            "url": "http://milofultz.com/2020/12/01/advent-of-code",
            
            
            
            
            
            "date_published": "2020-12-01T00:00:00-08:00",
            "date_modified": "2020-12-01T00:00:00-08:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/11/10/bytebeat",
            "title": "Bytebeat - Overview and How To Make/Record on OSX",
            "summary": "Bytebeat - Overview and How To Make/Record on OSX",
            "content_text": "“Bytebeat” is the name given to the method of piping mathematical equations to an audio device make lo-fidelity gritty sounds. They often sound pretty musical due to the mathematical nature of the equations and bitwise operations. But that does not mean that it has to be “musical” to be good either, as you will discover when messing around with it.For a good dive into what Bytebeat is and how it started, check out these links:  Kragen’s Writeup  The original post from  Ville-Matias Heikkilä and his follow up post  ZSerge’s article where I first heard about itExamples:  Bytebeat: Experimental music from very short C programs  Bytebeat: Experimental one-line algorithmic music - the 2nd iteration  Bytebeat: Music from very short programs - the 3rd iterationHow To Make Your OwnA fantastic how-to of the basics including the math operations and how to use them can be found in PDF at TuesdayNightMachine’s Github page. I would highly recommend starting here if you don’t get binary or bitwise operations.The super simplest way to implement and test (hear) Bytebeat code is through the many online HTML5/JS apps online.  Gregg Tavares  Bemmu and rarefluid (in stereo!)Making It Offline On OSXMy desire when starting to mess with this stuff was trying to figure out how I could do it in the command line, as that was how I had seen it laid out in many examples in Linux. The problem was that the built in tools to pipe data into your audio device was not built in to OSX the way it is built in to Linux, so I had to do some sleuthing. With a lot of help from the Merveilles community, I was able to finally figure out the process and I wanted to document it here.Step 1. Install SoX with homebrewbrew install sox (you can follow this tutorial here if you are confused)Step 2. Create a bash script to automate the build, compile, and piping of your Bytebeat formulas all on the CLI.The way that I did this was pretty much completely stolen from Cole Ingraham’s post that I dug up on archive.org. Essentially without this, you have to do quite a few very boring and uninteresting steps which means very little instant gratification, which is what we want.Here is the script that I created for using it in bash on OSX:#!/bin/bash# This script creates and plays a simple ByteBeat# ARGS# $1: a string with the ByteBeat algorithm e.g. \"((t * 3) &amp; (t &gt;&gt; 5))\"# $2: the name of the file to be creates (without an extension)#### create the C programecho \"#include &lt;math.h&gt;int s(double num){    return 256*sin(num);};int c(double num){    return 256*cos(num);};main(t){    for(t=0;;t++){        putchar( $1 );    }};\" &gt; \"$2.c\"# compile the sourcegcc \"$2.c\" -o \"$2\"# play it with standard ByteBeat settings./\"$2\" | sox -t u8 -r 8k -c 1 - -dTake this script and copy it into a code editor/text editor, saving it as a file with an .sh extension (I called it bytebeat.sh). Put it in a folder where you can access it easily with the command line in your terminal. There you will be able to make the audio using the arguments written in the script. But before that,Step 3. Turn down your volume!Trust me, it’s LOUD. Don’t forget!Step 4. Try it out!Once you have saved that script and you have navigated to the enclosing folder in your terminal, you can make some noises! Your script takes two arguments:  The Bytebeat algorithm/equation  The name of the file that will be gnenerated and played (can be whatever, I usually go with test)For example:./bytebeat.sh \"(t/4)*(t&gt;&gt;8|((14 &amp; t)^3))\" testThis runs the bash script (bytebeat.sh) and uses the Bytebeat algorithm/equation \"(t/4)*(t&gt;&gt;8|((14 &amp; t)^3))\" to generate the compiled C program test. This program test is then piped into sox and plays through the speakers. You’re done!Record it!There are two ways you can save the audio you’ve created. One is fairly user friendly and the other one is a bit clunky.The easiest way is to download and install Rogue Amoeba’s Loopback to record your system audio. THis is very simple and highly recommend it.If for whatever reason that doesn’t work for you, you can create a raw audio file on your computer and use Audacity to open it. This may not output exactly what you heard when playing it using the bash script, but it may yield some cool variations.  Run your script to create the compiled Bytebeat script (give it a proper name instead of test if that’s easier to find). Within your folder, you should find a file of that name.  Send the output of this newly compiled script to a file instead of piped to SoX. (NOTE: This can create endlessly large files on your computer and possibly eat up all empty memory if you don’t stop it quickly. To avoid this, cancel (ctrl + C) the process around a half-second to a second after you start it.) To do this, write this in your shell, assuming your newly compiled file is called test and the output file is called output.raw: ./test &gt; output.raw  As said before, you will want to cancel this process very quickly after you start it with ctrl + C, as it can otherwise create a massive file.  Open Audacity. Select File &gt; Import &gt; Raw Data... and choose your newly output file (output.raw in our example). Use the following settings in the dialog box:          Encoding: Unsigned 8-bit PCM      Byte Order: No endianness      Channels: 1 (Mono)      Start Offset: 0      Amount to Import: 100      Sample Rate: 8000        Listen to your hideous creation.Other Resources/Implementations  C and Python: http://royal-paw.com/2012/01/bytebeats-in-c-and-python-generative-symphonies-from-extremely-small-programs/  Python: https://gist.github.com/bzamecnik/a2d45dc0addb8d602d70b1d8df0f9fd0",
            "content_html": "<p>“Bytebeat” is the name given to the method of piping mathematical equations to an audio device make lo-fidelity gritty sounds. They often sound pretty musical due to the mathematical nature of the equations and bitwise operations. But that does not mean that it has to be “musical” to be good either, as you will discover when messing around with it.</p><p>For a good dive into what Bytebeat is and how it started, check out these links:</p><ul>  <li><a href=\"http://canonical.org/~kragen/bytebeat/\">Kragen’s Writeup</a></li>  <li><a href=\"https://countercomplex.blogspot.com/2011/10/algorithmic-symphonies-from-one-line-of.html\">The original post from  Ville-Matias Heikkilä</a> and <a href=\"https://countercomplex.blogspot.com/2011/10/some-deep-analysis-of-one-line-music.html\">his follow up post</a></li>  <li><a href=\"https://zserge.com/posts/etude-in-c/\">ZSerge’s article where I first heard about it</a></li></ul><h3 id=\"examples\">Examples:</h3><ul>  <li><a href=\"https://www.youtube.com/watch?v=GtQdIYUtAHg\">Bytebeat: Experimental music from very short C programs</a></li>  <li><a href=\"https://www.youtube.com/watch?v=qlrs2Vorw2Y\">Bytebeat: Experimental one-line algorithmic music - the 2nd iteration</a></li>  <li><a href=\"https://www.youtube.com/watch?v=tCRPUv8V22o\">Bytebeat: Music from very short programs - the 3rd iteration</a></li></ul><h3 id=\"how-to-make-your-own\">How To Make Your Own</h3><p>A fantastic how-to of the basics including the math operations and how to use them can be found in PDF at <a href=\"https://github.com/TuesdayNightMachines/Bytebeats\">TuesdayNightMachine’s Github page</a>. I would highly recommend starting here if you don’t get binary or bitwise operations.</p><p>The super simplest way to implement and test (hear) Bytebeat code is through the many online HTML5/JS apps online.</p><ul>  <li><a href=\"https://greggman.com/downloads/examples/html5bytebeat/html5bytebeat.html#t=0&amp;e=0&amp;s=8000&amp;bb=5d00000100180000000000000000141d0150043e1f062919296ab90380807628655b351388d1ffe7d4a000\">Gregg Tavares</a></li>  <li><a href=\"http://wurstcaptures.untergrund.net/music/\">Bemmu and rarefluid (in stereo!)</a></li></ul><h3 id=\"making-it-offline-on-osx\">Making It Offline On OSX</h3><p>My desire when starting to mess with this stuff was trying to figure out how I could do it in the command line, as that was how I had seen it laid out in many examples in Linux. The problem was that the built in tools to pipe data into your audio device was not built in to OSX the way it is built in to Linux, so I had to do some sleuthing. With <a href=\"https://merveilles.town/web/statuses/105096777143471978\">a lot of help from the Merveilles community</a>, I was able to finally figure out the process and I wanted to document it here.</p><h4 id=\"step-1-install-sox-with-homebrew\">Step 1. Install SoX with homebrew</h4><p><code class=\"highlighter-rouge\">brew install sox</code> (<a href=\"https://chrisrosser.net/posts/2020/04/06/using-sox-on-macos/\">you can follow this tutorial here if you are confused</a>)</p><h4 id=\"step-2-create-a-bash-script-to-automate-the-build-compile-and-piping-of-your-bytebeat-formulas-all-on-the-cli\">Step 2. Create a bash script to automate the build, compile, and piping of your Bytebeat formulas all on the CLI.</h4><p>The way that I did this was pretty much completely stolen from <a href=\"https://web.archive.org/web/20160610140821/http://coleingraham.com/2013/04/28/bytebeat-shell-script/\">Cole Ingraham’s post</a> that I dug up on archive.org. Essentially without this, you have to do quite a few very boring and uninteresting steps which means very little instant gratification, which is what we want.</p><p>Here is the script that I created for using it in bash on OSX:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#!/bin/bash</span><span class=\"c\"># This script creates and plays a simple ByteBeat</span><span class=\"c\"># ARGS</span><span class=\"c\"># $1: a string with the ByteBeat algorithm e.g. \"((t * 3) &amp; (t &gt;&gt; 5))\"</span><span class=\"c\"># $2: the name of the file to be creates (without an extension)</span><span class=\"c\">###</span><span class=\"c\"># create the C program</span><span class=\"nb\">echo</span> <span class=\"s2\">\"#include &lt;math.h&gt;int s(double num){    return 256*sin(num);};int c(double num){    return 256*cos(num);};main(t){    for(t=0;;t++){        putchar( </span><span class=\"nv\">$1</span><span class=\"s2\"> );    }};\"</span> <span class=\"o\">&gt;</span> <span class=\"s2\">\"</span><span class=\"nv\">$2</span><span class=\"s2\">.c\"</span><span class=\"c\"># compile the source</span>gcc <span class=\"s2\">\"</span><span class=\"nv\">$2</span><span class=\"s2\">.c\"</span> <span class=\"nt\">-o</span> <span class=\"s2\">\"</span><span class=\"nv\">$2</span><span class=\"s2\">\"</span><span class=\"c\"># play it with standard ByteBeat settings</span>./<span class=\"s2\">\"</span><span class=\"nv\">$2</span><span class=\"s2\">\"</span> | sox <span class=\"nt\">-t</span> u8 <span class=\"nt\">-r</span> 8k <span class=\"nt\">-c</span> 1 - <span class=\"nt\">-d</span></code></pre></div></div><p>Take this script and copy it into a code editor/text editor, saving it as a file with an <code class=\"highlighter-rouge\">.sh</code> extension (I called it <code class=\"highlighter-rouge\">bytebeat.sh</code>). Put it in a folder where you can access it easily with the command line in your terminal. There you will be able to make the audio using the arguments written in the script. But before that,</p><h4 id=\"step-3-turn-down-your-volume\">Step 3. Turn down your volume!</h4><p>Trust me, it’s LOUD. Don’t forget!</p><h4 id=\"step-4-try-it-out\">Step 4. Try it out!</h4><p>Once you have saved that script and you have navigated to the enclosing folder in your terminal, you can make some noises! Your script takes two arguments:</p><ol>  <li>The Bytebeat algorithm/equation</li>  <li>The name of the file that will be gnenerated and played (can be whatever, I usually go with test)</li></ol><p>For example:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./bytebeat.sh \"(t/4)*(t&gt;&gt;8|((14 &amp; t)^3))\" test</code></pre></div></div><p>This runs the bash script (<code class=\"highlighter-rouge\">bytebeat.sh</code>) and uses the Bytebeat algorithm/equation <code class=\"highlighter-rouge\">\"(t/4)*(t&gt;&gt;8|((14 &amp; t)^3))\"</code> to generate the compiled C program <code class=\"highlighter-rouge\">test</code>. This program <code class=\"highlighter-rouge\">test</code> is then piped into sox and plays through the speakers. You’re done!</p><h3 id=\"record-it\">Record it!</h3><p>There are two ways you can save the audio you’ve created. One is fairly user friendly and the other one is a bit clunky.</p><p>The easiest way is to download and install Rogue Amoeba’s <a href=\"https://rogueamoeba.com/loopback/\">Loopback</a> to record your system audio. THis is very simple and highly recommend it.</p><p>If for whatever reason that doesn’t work for you, you can create a raw audio file on your computer and use <a href=\"https://www.audacityteam.org/\">Audacity</a> to open it. This may not output exactly what you heard when playing it using the bash script, but it may yield some cool variations.</p><ol>  <li>Run your script to create the compiled Bytebeat script (give it a proper name instead of <code class=\"highlighter-rouge\">test</code> if that’s easier to find). Within your folder, you should find a file of that name.</li>  <li>Send the output of this newly compiled script to a file instead of piped to SoX. (NOTE: This can create endlessly large files on your computer and possibly eat up all empty memory if you don’t stop it quickly. To avoid this, cancel (ctrl + C) the process around a half-second to a second after you start it.) To do this, write this in your shell, assuming your newly compiled file is called <code class=\"highlighter-rouge\">test</code> and the output file is called <code class=\"highlighter-rouge\">output.raw</code>: <code class=\"highlighter-rouge\">./test &gt; output.raw</code></li>  <li>As said before, you will want to cancel this process very quickly after you start it with ctrl + C, as it can otherwise create a massive file.</li>  <li>Open Audacity. Select <code class=\"highlighter-rouge\">File</code> &gt; <code class=\"highlighter-rouge\">Import</code> &gt; <code class=\"highlighter-rouge\">Raw Data...</code> and choose your newly output file (<code class=\"highlighter-rouge\">output.raw</code> in our example). Use the following settings in the dialog box:    <ul>      <li>Encoding: Unsigned 8-bit PCM</li>      <li>Byte Order: No endianness</li>      <li>Channels: 1 (Mono)</li>      <li>Start Offset: 0</li>      <li>Amount to Import: 100</li>      <li>Sample Rate: 8000</li>    </ul>  </li>  <li>Listen to your hideous creation.</li></ol><h3 id=\"other-resourcesimplementations\">Other Resources/Implementations</h3><ul>  <li>C and Python: <a href=\"http://royal-paw.com/2012/01/bytebeats-in-c-and-python-generative-symphonies-from-extremely-small-programs/\">http://royal-paw.com/2012/01/bytebeats-in-c-and-python-generative-symphonies-from-extremely-small-programs/</a></li>  <li>Python: <a href=\"https://gist.github.com/bzamecnik/a2d45dc0addb8d602d70b1d8df0f9fd0\">https://gist.github.com/bzamecnik/a2d45dc0addb8d602d70b1d8df0f9fd0</a></li></ul><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/11/10/bytebeat",
            
            
            
            
            
            "date_published": "2020-11-10T00:00:00-08:00",
            "date_modified": "2020-11-10T00:00:00-08:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/11/09/the-point-of-diminis",
            "title": "The point of diminishing returns is already here",
            "summary": null,
            "content_text": "The point of diminishing returns is well before we think it is. What is the point of a crazy fast computer when most of what you do is send messages to people and read text? We were able to download and watch videos on our computer 15 years ago and were only limited by internet speed. Now we have it all and we want more for some reason. Is convenience via minimal time saved with a faster piece of hardware worth the money, your time, and the waste it makes?Here is the talk that got me really thinking about this today.",
            "content_html": "<p>The point of diminishing returns is well before we think it is. What is the point of a crazy fast computer when most of what you do is send messages to people and read text? We were able to download and watch videos on our computer 15 years ago and were only limited by internet speed. Now we have it all and we want more for some reason. Is convenience via minimal time saved with a faster piece of hardware worth the money, your time, and the waste it makes?</p><p><a href=\"https://idlewords.com/talks/web_design_first_100_years.htm\">Here is the talk that got me really thinking about this today.</a></p><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/11/09/the-point-of-diminis",
            
            
            
            
            
            "date_published": "2020-11-09T00:00:00-08:00",
            "date_modified": "2020-11-09T00:00:00-08:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/11/01/koi-koi-rules",
            "title": "Rules for Hanafuda game \"Koi-Koi\"",
            "summary": "Rules for Hanafuda game Koi-Koi: Hanafuda, meaning 'flower cards' is a traditional Japanese card game that dates back to the 1500s.",
            "content_text": "All text pulled from Nintendo’s PDF online for a much easier to read pageKoi-Koi is a two-player game that is playedwith Hanafuda cards. It requires a sharpmind, strategic thinking, and risk-taking inthe spirit of friendly competition. It is truly aclassic brain training game.Goal:The goal of Koi-Koi is to earn points bymaking sets as fast as you can. Unlikepoker, whoever makes a set first can win agame. A full session is 12 games, and theplayer with the most points after 12 gamesis the winner.Choosing a Dealer:Players will choose one of the cards facedown, and the player who has the earliestmonth card becomes the dealer (alsocalled “oya,” meaning “parent”), who takestheir turn first. Try not to choose the“parent” in any other way, as this is theauthentic way of choosing the dealer inKoi-KoiPlaying the GameThe dealer will deal two cards at a time inorder of the player, field, and dealer. Dealeight cards face down for each player, andeight cards face up in the field in-between.Place the remaining deck of cards to theside of the field face downAfter the players look at their cards, thegame will begin with the first player (thedealer) taking one card from their handand placing it face up on the field. If thecard matches the month of any of thecards on the field, the dealer takes the pair.If there are no matching cards on the field,that card will remain on the field face up.The player will then pick a card from thetop of the remaining deck, and again ifthere is a card of a matching month on thefield, the two cards will become a matchingpair. If not, the card will be placed on thefield face up. The player takes thematching pairs, if they have any. andplaces them face up in front of them,ending their turn.Continue to take turns playing until one ofthe players comes up with a set. Tally thepoints scored for that set, and continueplaying with a new game, with the winnerbecoming the dealer. If either player isunable to make a set and their cards runout, the game is a draw and the other playerbecomes the dealer in the next game.The Koi-KoiAfter you make a set you can either end thegame there and earn the points for that oneset, or if you think you can get another, youcan call “Koi-Koi!” and keep playing to getanother set. Be careful though, because ifyour opponent makes a set after you callKoi-Koi before you make your second set,the other player will double their points, andthe game will end. Koi-Koi can only becalled once per game.MultipliersIf your sets total 7 or more points in a singlegame, you earn a multiplier and get doublepoints! This is where you can win big, sorack those points up!Lucky HandsIf the sets below are already made in yourhand when the cards are first handed out,that player wins these points and the nextgame will begin.Four HandsWhen there are four cards of the samemonth: 6ptsStickyWhen there are four sets of two cardsfram the same month: 6ptsSpecial CardThe Chrysanthemum and Sake Cup card can be usedas a 10 or a 1 point card.The SetsObtaining one of these sets will earn you points and give youthe opportunity to claim victory, or call “Koi-Koi!”  Kasu (Plains) - 10 Plain cards. 1 point. Each Additional 1P after.  Tanzaku (Ribbons) - 5 Ribbons. 1 point. Each Additional 1P after.  Tane (Animals) - 5 Animals. 1 point. Each Additional 1P after.  Ino-Shika-Cho (Boar-Deer-Butterfly) - Animal cards of Clover, Maple, Peony. 5 points.  Akatan (Red Poetry Ribbons) - All 3 red poetry ribbons. 6 points.  Aotan (Blue Ribbons) - All 3 blue ribbons. 6 points.  Sanko (3Brights) - 3 Bright cards not containing Rain man card. 6 points.  Ame-Shiko (Rain man) - 4Brights containing Rain man card. 8 points.  Shiko (4Brights) - 4 Bright cards not containing Rain man card. 10 points.  Goko (5Brights) - All 5 Bright cards. 15 points.  Tsuki-fuda (Monthly Cards) - All four cards in one group shown right on screen. 4 points.  Oya-Ken (Dealer’s Privilege) - If neither gets any Yaku, Dealer wins 6 points.  Bake-Fuda (Wild Card) - The animal card of Chrysanthemum (sake cup) can be regarded as a plain card as well. If you have this, 9 plain cards and this card will be the Yaku of Kasu.Suits            Month      Suit/Plant                  January      Pine              February      Plum Blossom              March      Cherry Blossoms              April      Wisteria              May      Iris              June      Peony              July      Clover              August      Pampas              September      Chrysanthemum              October      Maple              November      Willow              December      Paulownia      ",
            "content_html": "<p><em>All text pulled from Nintendo’s PDF online for a much easier to read page</em></p><p>Koi-Koi is a two-player game that is playedwith Hanafuda cards. It requires a sharpmind, strategic thinking, and risk-taking inthe spirit of friendly competition. It is truly aclassic brain training game.</p><h3 id=\"goal\">Goal:</h3><p>The goal of Koi-Koi is to earn points bymaking sets as fast as you can. Unlikepoker, whoever makes a set first can win agame. A full session is 12 games, and theplayer with the most points after 12 gamesis the winner.</p><h3 id=\"choosing-a-dealer\">Choosing a Dealer:</h3><p>Players will choose one of the cards facedown, and the player who has the earliestmonth card becomes the dealer (alsocalled “oya,” meaning “parent”), who takestheir turn first. Try not to choose the“parent” in any other way, as this is theauthentic way of choosing the dealer inKoi-Koi</p><h3 id=\"playing-the-game\">Playing the Game</h3><p>The dealer will deal two cards at a time inorder of the player, field, and dealer. Dealeight cards face down for each player, andeight cards face up in the field in-between.Place the remaining deck of cards to theside of the field face down</p><p>After the players look at their cards, thegame will begin with the first player (thedealer) taking one card from their handand placing it face up on the field. If thecard matches the month of any of thecards on the field, the dealer takes the pair.If there are no matching cards on the field,that card will remain on the field face up.The player will then pick a card from thetop of the remaining deck, and again ifthere is a card of a matching month on thefield, the two cards will become a matchingpair. If not, the card will be placed on thefield face up. The player takes thematching pairs, if they have any. andplaces them face up in front of them,ending their turn.</p><p>Continue to take turns playing until one ofthe players comes up with a set. Tally thepoints scored for that set, and continueplaying with a new game, with the winnerbecoming the dealer. If either player isunable to make a set and their cards runout, the game is a draw and the other playerbecomes the dealer in the next game.</p><h3 id=\"the-koi-koi\">The Koi-Koi</h3><p>After you make a set you can either end thegame there and earn the points for that oneset, or if you think you can get another, youcan call “Koi-Koi!” and keep playing to getanother set. Be careful though, because ifyour opponent makes a set after you callKoi-Koi before you make your second set,the other player will double their points, andthe game will end. Koi-Koi can only becalled once per game.</p><h4 id=\"multipliers\">Multipliers</h4><p>If your sets total 7 or more points in a singlegame, you earn a multiplier and get doublepoints! This is where you can win big, sorack those points up!</p><h3 id=\"lucky-hands\">Lucky Hands</h3><p>If the sets below are already made in yourhand when the cards are first handed out,that player wins these points and the nextgame will begin.</p><h4 id=\"four-hands\">Four Hands</h4><p>When there are four cards of the samemonth: 6pts</p><h4 id=\"sticky\">Sticky</h4><p>When there are four sets of two cardsfram the same month: 6pts</p><h4 id=\"special-card\">Special Card</h4><p>The Chrysanthemum and Sake Cup card can be usedas a 10 or a 1 point card.</p><h3 id=\"the-sets\">The Sets</h3><p>Obtaining one of these sets will earn you points and give youthe opportunity to claim victory, or call “Koi-Koi!”</p><ul>  <li>Kasu (Plains) - 10 Plain cards. 1 point. Each Additional 1P after.</li>  <li>Tanzaku (Ribbons) - 5 Ribbons. 1 point. Each Additional 1P after.</li>  <li>Tane (Animals) - 5 Animals. 1 point. Each Additional 1P after.</li>  <li>Ino-Shika-Cho (Boar-Deer-Butterfly) - Animal cards of Clover, Maple, Peony. 5 points.</li>  <li>Akatan (Red Poetry Ribbons) - All 3 red poetry ribbons. 6 points.</li>  <li>Aotan (Blue Ribbons) - All 3 blue ribbons. 6 points.</li>  <li>Sanko (3Brights) - 3 Bright cards not containing Rain man card. 6 points.</li>  <li>Ame-Shiko (Rain man) - 4Brights containing Rain man card. 8 points.</li>  <li>Shiko (4Brights) - 4 Bright cards not containing Rain man card. 10 points.</li>  <li>Goko (5Brights) - All 5 Bright cards. 15 points.</li>  <li>Tsuki-fuda (Monthly Cards) - All four cards in one group shown right on screen. 4 points.</li>  <li>Oya-Ken (Dealer’s Privilege) - If neither gets any Yaku, Dealer wins 6 points.</li>  <li>Bake-Fuda (Wild Card) - The animal card of Chrysanthemum (sake cup) can be regarded as a plain card as well. If you have this, 9 plain cards and this card will be the Yaku of Kasu.</li></ul><h3 id=\"suits\">Suits</h3><table>  <thead>    <tr>      <th>Month</th>      <th>Suit/Plant</th>    </tr>  </thead>  <tbody>    <tr>      <td>January</td>      <td>Pine</td>    </tr>    <tr>      <td>February</td>      <td>Plum Blossom</td>    </tr>    <tr>      <td>March</td>      <td>Cherry Blossoms</td>    </tr>    <tr>      <td>April</td>      <td>Wisteria</td>    </tr>    <tr>      <td>May</td>      <td>Iris</td>    </tr>    <tr>      <td>June</td>      <td>Peony</td>    </tr>    <tr>      <td>July</td>      <td>Clover</td>    </tr>    <tr>      <td>August</td>      <td>Pampas</td>    </tr>    <tr>      <td>September</td>      <td>Chrysanthemum</td>    </tr>    <tr>      <td>October</td>      <td>Maple</td>    </tr>    <tr>      <td>November</td>      <td>Willow</td>    </tr>    <tr>      <td>December</td>      <td>Paulownia</td>    </tr>  </tbody></table><p><img src=\"http://milofultz.com/assets/fudasuits.png\" alt=\"Suits of Hanafuda\" /></p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/11/01/koi-koi-rules",
            
            
            
            
            
            "date_published": "2020-11-01T00:00:00-07:00",
            "date_modified": "2020-11-01T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/31/tablatal-parser",
            "title": "📊 Tablatal Parser - Plaintext Database to JSON (Python)",
            "summary": "Tablatal is a flat file plaintext database, and this parser made in Python allows you to utilize it with other software.",
            "content_text": "Check out the up-to-date version on GitHubI’m rethinking my Track and Tod apps for tracking my tasks, mood, and otherdata after checking out Josh Avanier’s Log,V’s Log, Devine Lu Linvega’s Horaire andothers. I am determined to keep my log plaintext and was notsatisfied with options like CSV or TSV, as they look terrible when readingin a plain text editor. I eventually found Devine’s Tablatal and am lookingforward to using it with my system.From Devine’s site: “In the Tablatal file, the first line declares the key, thespacing between each key defines the length of the parameters for allsubsequent lines.” It is a much more aesthetically pleasing plaintext dataformat, though the tradeoff is malleability, as you must define how largethe field sizes are before getting going (I’ll solve this with some kind ofutility if it ever comes up as a problem).There is both a to- and from-Tablatal utility. Both use a list of dicts astheir starting point, but can also be used directly in the CLI to interfacewith JSON files.Syntax  Comments are preceded by a semicolon.  The header line is expected to be all caps and may be preceded by asemicolon as if a comment. The spacing of this header line sets the spacingfor all content that follows.  The content is everything that follows the header line. Empty fieldsdefault to None.Examples can be found here at neauoire’s page.UsageAs a CLI, the parser takes in a plaintext Tablatal file (tbtl) andreturns a JSON file. There is one optional argument --headers, whichyou can supply a set of custom headers separated by commas for the parserto use when outputting. For instance, if the beginning of your fileincluding your headers looks like this:; The horaire is a collection of logs.; https://wiki.xxiivv.com/site/tablatal.html;     CODE HOST                 PIC NAME;     7    12                   33  3720X09 +300 talk                     Talk at Speakers Series, SNSYC20X07 +300 talk                     Grundlagen der digitalen Kommunikation20V08 -332 orca...The header line is started by a semicolon, which would obfuscate the parserfrom giving it a useful name. This can be remedied via the CLI:python3 tbtl_parse.py input.tbtl output.json --headers \"DATE, CODE, HOST, PIC, NAME\"The JSON-to-Tablatal parser needs a little user input to determine the order of the fields, but otherwise operates the same as the other utility.",
            "content_html": "<p><a href=\"https://github.com/milofultz/tablatal_parser\"><strong>Check out the up-to-date version on GitHub</strong></a></p><p>I’m rethinking my Track and Tod apps for tracking my tasks, mood, and otherdata after checking out <a href=\"https://avanier.now.sh/w/log.html\">Josh Avanier’s Log</a>,<a href=\"https://v-os.ca/timekeeping\">V’s Log</a>, <a href=\"https://wiki.xxiivv.com/site/horaire.html\">Devine Lu Linvega’s Horaire</a> andothers. I am determined to keep my log plaintext and was notsatisfied with options like CSV or TSV, as they look terrible when readingin a plain text editor. I eventually found <a href=\"https://wiki.xxiivv.com/site/tablatal.html\">Devine’s Tablatal</a> and am lookingforward to using it with my system.</p><p>From Devine’s site: “In the Tablatal file, the first line declares the key, thespacing between each key defines the length of the parameters for allsubsequent lines.” It is a much more aesthetically pleasing plaintext dataformat, though the tradeoff is malleability, as you must define how largethe field sizes are before getting going (I’ll solve this with some kind ofutility if it ever comes up as a problem).</p><p>There is both a to- and from-Tablatal utility. Both use a list of dicts astheir starting point, but can also be used directly in the CLI to interfacewith JSON files.</p><h3 id=\"syntax\">Syntax</h3><ul>  <li>Comments are preceded by a semicolon.</li>  <li>The header line is expected to be all caps and may be preceded by asemicolon as if a comment. The spacing of this header line sets the spacingfor all content that follows.</li>  <li>The content is everything that follows the header line. Empty fieldsdefault to None.</li></ul><p>Examples can be found <a href=\"https://github.com/XXIIVV/oscean/tree/master/src/database\">here at neauoire’s page</a>.</p><h3 id=\"usage\">Usage</h3><p>As a CLI, the parser takes in a plaintext Tablatal file (<code class=\"highlighter-rouge\">tbtl</code>) andreturns a <code class=\"highlighter-rouge\">JSON</code> file. There is one optional argument <code class=\"highlighter-rouge\">--headers</code>, whichyou can supply a set of custom headers separated by commas for the parserto use when outputting. For instance, if the beginning of your fileincluding your headers looks like this:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>; The horaire is a collection of logs.; https://wiki.xxiivv.com/site/tablatal.html;     CODE HOST                 PIC NAME;     7    12                   33  3720X09 +300 talk                     Talk at Speakers Series, SNSYC20X07 +300 talk                     Grundlagen der digitalen Kommunikation20V08 -332 orca...</code></pre></div></div><p>The header line is started by a semicolon, which would obfuscate the parserfrom giving it a useful name. This can be remedied via the CLI:</p><p><code class=\"highlighter-rouge\">python3 tbtl_parse.py input.tbtl output.json --headers \"DATE, CODE, HOST, PIC, NAME\"</code></p><p>The JSON-to-Tablatal parser needs a little user input to determine the order of the fields, but otherwise operates the same as the other utility.</p><!-- --- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/31/tablatal-parser",
            
            
            
            
            
            "date_published": "2020-10-31T00:00:00-07:00",
            "date_modified": "2020-10-31T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/25/hiitimer",
            "title": "💻 HIITimer - Exercise Timer w/Routines and TTS (Python)",
            "summary": "I made a basic HIIT timer so I wouldn't have to rely on online pages and terrible phone apps. Loads up premade routines and uses TTS for the workout.",
            "content_text": "Check out the up-to-date version on GitHubI made a basic HIIT timer so I wouldn’t have to rely on online pages and really terrible HIIT phone apps that do too much for me anyway. It’s thebare minimum:  Say (with TTS) and display the current state of the routine (exercise name, rest, upcoming exercise)  Make your routine on the fly  Load up created plaintext routinesIt doesn’t do anything else and there is no reason I can find for it to do anything more.Preset RoutinesPreset routines can be loaded into HIITimer with the -f flag followed by the filename:python3 hiitimer.py -f preset1.hiitThere are four fields necessary for a successful routine file:  exercises: - A list of exercises which will comprise one rep. This list is comprised of an exercises: line, followed by an exercise oneach subsequent line.  exercise_time: - How long to spend on one exercise in seconds. This and all the following fields are to be comprised of the key and value onthe same line.  rest_time: - How long to spend resting between exercises in seconds.  reps: - How many cycles of the list of exercises to do in total.The parser overlooks blank lines and lines that begin with #.A sample routine that I created looks like this:# Sample Exercise Routine 1exercises:\tPushups\tSquats\tPlank\tJumping Jacksexercise_time: 30rest_time: 10reps: 4This program and all the TTS has only been tested on OSX, so please letme know if you get any errors, as I’d love to figure it out :)",
            "content_html": "<p><a href=\"https://github.com/milofultz/hiitimer\"><strong>Check out the up-to-date version on GitHub</strong></a></p><p>I made a basic HIIT timer so I wouldn’t have to rely on online pages and really terrible HIIT phone apps that do too much for me anyway. It’s thebare minimum:</p><ul>  <li>Say (with TTS) and display the current state of the routine (exercise name, rest, upcoming exercise)</li>  <li>Make your routine on the fly</li>  <li>Load up created plaintext routines</li></ul><p>It doesn’t do anything else and there is no reason I can find for it to do anything more.</p><h3 id=\"preset-routines\">Preset Routines</h3><p>Preset routines can be loaded into HIITimer with the <code class=\"highlighter-rouge\">-f</code> flag followed by the filename:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>python3 hiitimer.py -f preset1.hiit</code></pre></div></div><p>There are four fields necessary for a successful routine file:</p><ul>  <li><code class=\"highlighter-rouge\">exercises:</code> - A list of exercises which will comprise one rep. This list is comprised of an <code class=\"highlighter-rouge\">exercises:</code> line, followed by an exercise oneach subsequent line.</li>  <li><code class=\"highlighter-rouge\">exercise_time:</code> - How long to spend on one exercise in seconds. This and all the following fields are to be comprised of the key and value onthe same line.</li>  <li><code class=\"highlighter-rouge\">rest_time:</code> - How long to spend resting between exercises in seconds.</li>  <li><code class=\"highlighter-rouge\">reps:</code> - How many cycles of the list of exercises to do in total.</li></ul><p>The parser overlooks blank lines and lines that begin with <code class=\"highlighter-rouge\">#</code>.</p><p><a href=\"/2020/05/25/exercise-routine\">A sample routine that I created</a> looks like this:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Sample Exercise Routine 1exercises:\tPushups\tSquats\tPlank\tJumping Jacksexercise_time: 30rest_time: 10reps: 4</code></pre></div></div><p><em>This program and all the TTS has only been tested on OSX, so please letme know if you get any errors, as I’d love to figure it out :)</em></p><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/25/hiitimer",
            
            
            
            
            
            "date_published": "2020-10-25T00:00:00-07:00",
            "date_modified": "2020-10-25T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/21/html-css-js",
            "title": "HTML / CSS / JS Resources",
            "summary": "A compilation of various HTML / CSS / JS resources I think are rad, compelling, or helpful.",
            "content_text": "HTML  Learn to Code HTML &amp; CSS  This page is a truly naked, brutalist html quine.CSS  Learn to Code HTML &amp; CSS (pre-Flex or Grid)  58 bytes of css to look great nearly everywhere - It’s like a hyper-minimal version of Skeleton CSS. Does one thing really well, but if that’s what you need, it’s perfect.  Web Design in 4 minutesJS  Modern JavaScript From The Beginning",
            "content_html": "<p><em>HTML</em></p><ul>  <li><a href=\"https://learn.shayhowe.com/html-css/\">Learn to Code HTML &amp; CSS</a></li>  <li><a href=\"https://secretgeek.github.io/html_wysiwyg/html.html\">This page is a truly naked, brutalist html quine.</a></li></ul><p><em>CSS</em></p><ul>  <li><a href=\"https://learn.shayhowe.com/html-css/\">Learn to Code HTML &amp; CSS</a> (pre-Flex or Grid)</li>  <li><a href=\"https://jrl.ninja/etc/1/\">58 bytes of css to look great nearly everywhere</a> - It’s like a hyper-minimal version of <a href=\"http://getskeleton.com/\">Skeleton CSS</a>. Does one thing really well, but if that’s what you need, it’s perfect.</li>  <li><a href=\"https://jgthms.com/web-design-in-4-minutes/\">Web Design in 4 minutes</a></li></ul><p><em>JS</em></p><ul>  <li><a href=\"https://www.udemy.com/course/modern-javascript-from-the-beginning/\">Modern JavaScript From The Beginning</a></li></ul><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/21/html-css-js",
            
            
            
            
            
            "date_published": "2020-10-21T00:00:00-07:00",
            "date_modified": "2020-10-21T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/17/tod-python",
            "title": "💻 Tod - Plan and Manage Daily Tasks In The CLI (Python)",
            "summary": "Tod helps you plan and manage daily tasks. Deliberately simple so I can stay focused on what I need to do.",
            "content_text": "Check out the up-to-date version on GitHubPlan and manage daily tasks. Deliberately simple so I can stay focused on what I need to do.  Saves tasks in an easy to read plaintext file in the root folder called ~/.tod  Includes built in timer for timeboxing/focused work time  Pulls most recent MIT from Track when starting a new set of daily tasks  Allows pulling of completed tasks for Track’s accomplishment trackingTasks on screen are shown as below. On the left is the task number, followed by the task name, and lastly the time spent on that task so far, if any. Time spent can be changed manually or can be changed automatically through use of the timer. A green task represents a completed task.",
            "content_html": "<p><a href=\"https://github.com/milofultz/tod\"><strong>Check out the up-to-date version on GitHub</strong></a></p><p>Plan and manage daily tasks. Deliberately simple so I can stay focused on what I need to do.</p><ul>  <li>Saves tasks in an easy to read plaintext file in the root folder called <code class=\"highlighter-rouge\">~/.tod</code></li>  <li>Includes built in timer for timeboxing/focused work time</li>  <li>Pulls most recent MIT from <a href=\"/2020/10/12/track-python\">Track</a> when starting a new set of daily tasks</li>  <li>Allows pulling of completed tasks for <a href=\"/2020/10/12/track-python\">Track’s</a> accomplishment tracking</li></ul><hr /><p>Tasks on screen are shown as below. On the left is the task number, followed by the task name, and lastly the time spent on that task so far, if any. Time spent can be changed manually or can be changed automatically through use of the timer. A green task represents a completed task.</p><p><img src=\"http://milofultz.com/assets/20201017tod/tod1.png\" /><img src=\"http://milofultz.com/assets/20201017tod/tod2.png\" /></p><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/17/tod-python",
            
            
            
            
            
            "date_published": "2020-10-17T00:00:00-07:00",
            "date_modified": "2020-10-17T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/16/friends-dont",
            "title": "Friends don't let friends look at pageviews",
            "summary": null,
            "content_text": "“Friends don’t let friends look at pageviews. Ever.” - Avinash Kaushik (from Algorithms To Live By)",
            "content_html": "<p>“Friends don’t let friends look at pageviews. Ever.” - Avinash Kaushik (<em>from Algorithms To Live By</em>)</p><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/16/friends-dont",
            
            
            
            
            
            "date_published": "2020-10-16T00:00:00-07:00",
            "date_modified": "2020-10-16T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/12/track-python",
            "title": "💻 Track - Daily Journal and Log (Python)",
            "summary": "Track your accomplishments, mood, most important task, and journal entries over time in a simple CLI Python program.",
            "content_text": "Check out the up-to-date version on GitHubI wanted to have a way to track my mood and accomplishments over time, keep track of my priority for the next day, as well as a basic journaling platform that was not pretentious or leading. Seemed like a good project and I had seen a few people on http://merveilles.town making some fun CLI tools in this vein, so I took a swing at it.Inspo from lon by dstn.  Tracks mood, accomplishments, journal entries, and MIT for next day  Saves data in an easy to read plaintext file in the root folder called ~/.track  Integrates with Tod to pull in completed accomplishments  Allows pulling of MIT into Tod’s task listUsageOn prompting, input:  Your mood on a 1-5 scale.  Your accomplishments for the day. When finished, leave the line blank and press enter.  Your most important task for the next day.  A 50 character or less summary of your day.  A longer journal entry of anything you feel is relevant.This will save this data into a file named .track in your root folder, formatted like so:---20201011 (4) Spend time on programming, exercise, and work.* Write daily tracker program* Exercise with 1.5hr walk* Brainstorm programming projects* Vote in election&gt; Prepare for next week and resolve all open tasksI walked farther south than I have since moving here, and I really like how quietthe side streets are.Been listening to vogue ball playlists all night.",
            "content_html": "<p><a href=\"https://github.com/milofultz/track\"><strong>Check out the up-to-date version on GitHub</strong></a></p><p>I wanted to have a way to track my mood and accomplishments over time, keep track of my priority for the next day, as well as a basic journaling platform that was not pretentious or leading. Seemed like a good project and I had seen a few people on <a href=\"http://merveilles.town\">http://merveilles.town</a> making some fun CLI tools in this vein, so I took a swing at it.</p><p>Inspo from <a href=\"https://github.com/0xdstn/lon\">lon by dstn</a>.</p><ul>  <li>Tracks mood, accomplishments, journal entries, and MIT for next day</li>  <li>Saves data in an easy to read plaintext file in the root folder called <code class=\"highlighter-rouge\">~/.track</code></li>  <li>Integrates with <a href=\"/2020/10/17/tod-python\">Tod</a> to pull in completed accomplishments</li>  <li>Allows pulling of MIT into <a href=\"/2020/10/17/tod-python\">Tod’s</a> task list</li></ul><h3 id=\"usage\">Usage</h3><p>On prompting, input:</p><ol>  <li>Your mood on a 1-5 scale.</li>  <li>Your accomplishments for the day. When finished, leave the line blank and press enter.</li>  <li>Your most important task for the next day.</li>  <li>A 50 character or less summary of your day.</li>  <li>A longer journal entry of anything you feel is relevant.</li></ol><p>This will save this data into a file named <code class=\"highlighter-rouge\">.track</code> in your root folder, formatted like so:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>---20201011 (4) Spend time on programming, exercise, and work.* Write daily tracker program* Exercise with 1.5hr walk* Brainstorm programming projects* Vote in election&gt; Prepare for next week and resolve all open tasksI walked farther south than I have since moving here, and I really like how quietthe side streets are.Been listening to vogue ball playlists all night.</code></pre></div></div><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/12/track-python",
            
            
            
            
            
            "date_published": "2020-10-12T00:00:00-07:00",
            "date_modified": "2020-10-12T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/12/sleep-realms",
            "title": "🎧 Sleep Realms (Paulstretch)",
            "summary": "Amp up your Star Realms game through osmotically absorbing the epic music.",
            "content_text": "Listen hereIf you want to get better at Star Realms, listen to this while you sleep and it will increase your ability to win by 341%.Used Paulstretch that is built in to Audacity.",
            "content_html": "<p><a href=\"https://www.youtube.com/watch?v=ie5z6AsEMQU\"><img src=\"https://i.ytimg.com/vi/ie5z6AsEMQU/hqdefault.jpg\" alt=\"Sleep Realms\" /></a></p><p><a href=\"https://www.youtube.com/watch?v=ie5z6AsEMQU\">Listen here</a></p><p>If you want to get better at Star Realms, listen to this while you sleep and it will increase your ability to win by 341%.</p><p>Used <a href=\"http://hypermammut.sourceforge.net/paulstretch/\">Paulstretch</a> that is built in to <a href=\"https://www.audacityteam.org/\">Audacity</a>.</p><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/12/sleep-realms",
            
            
            
            
            
            "date_published": "2020-10-12T00:00:00-07:00",
            "date_modified": "2020-10-12T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/04/two-minute-rule",
            "title": "The Two-Minute Rule",
            "summary": null,
            "content_text": "I’m a big self-help junkie and there honestly isn’t a lot that I feel I have taken action and eventually has stuck. Usually it’s a lot of “should”ing about random things in my life that in hindsight is not that big of a deal. Or it’s stuff that makes a real difference but is really hard[1], which means a lot more work.But one thing has amazingly made it through this filter in the background, being both successful and impactful in my life: the Two-Minute Rule from Getting Things Done.It’s simple and has been tossed around in a zillion different books by a billion different people under just as many names (thirty-second rule, five-minute rule). Essentially, if it takes less that two minutes to do, do it now. It’s so easy and honestly is such a small time investment, it somehow just happened for me. And even better, when something does fall through the cracks even though I know it will only take a couple of minutes, this now means something. It means that this task or to-do has some emotional weight that I need to deal with, and at least I’ve made it easier to see this and now actionable.The thing that I like most about this is that it’s not about ““getting things done” (particularly for the sake of getting things done, which is the worst), it’s about closing open loops. I realized I ran around all day seeing these open loops and it weighted me down: a dirty dish, unopened mail, a difficult email, etc. Using this rule helps with the toughest part of completing these difficult tasks: starting.References:  https://tjcx.me/posts/defense-self-help/",
            "content_html": "<p>I’m a big self-help junkie and there honestly isn’t a lot that I feel I have taken action and eventually has stuck. Usually it’s a lot of “should”ing about random things in my life that in hindsight is not that big of a deal. Or it’s <a href=\"https://tjcx.me/posts/defense-self-help/\">stuff that makes a real difference but is really hard[1]</a>, which means a lot more work.</p><p>But one thing has amazingly made it through this filter in the background, being both successful and impactful in my life: the Two-Minute Rule from Getting Things Done.</p><p>It’s simple and has been tossed around in a zillion different books by a billion different people under just as many names (thirty-second rule, five-minute rule). Essentially, <strong>if it takes less that two minutes to do, do it now</strong>. It’s so easy and honestly is such a small time investment, it somehow just happened for me. And even better, when something does fall through the cracks even though I know it will only take a couple of minutes, this now <em>means</em> something. It means that this task or to-do has some emotional weight that I need to deal with, and at least I’ve made it easier to see this and now actionable.</p><p>The thing that I like most about this is that it’s not about ““getting things done” (particularly for the <em>sake</em> of getting things done, which is the worst), it’s about closing open loops. I realized I ran around all day seeing these open loops and it weighted me down: a dirty dish, unopened mail, a difficult email, etc. Using this rule helps with the toughest part of completing these difficult tasks: <strong>starting</strong>.</p><hr /><p>References:</p><ol>  <li><a href=\"https://tjcx.me/posts/defense-self-help/\">https://tjcx.me/posts/defense-self-help/</a></li></ol><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/04/two-minute-rule",
            
            
            
            
            
            "date_published": "2020-10-04T00:00:00-07:00",
            "date_modified": "2020-10-04T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/10/04/doing",
            "title": "Trying to become reacquainted with being bored",
            "summary": null,
            "content_text": "During quarantine, I’ve been trying to just be bored and not constantly DO things and it’s weird how hard that is. Blah blah, every complaint about technology bad. But that aside, I do like techology and love spending time with it. And trying to reconcile these two things in particular has been difficult.Tech has had a weird hold on me since I was a kid, and it has been what I have always wanted to spend my time doing. But I felt like I was also getting signals from various places that technology was bad and I shouldn’t spend so much time on it, probably a recoil from video games and the like.So now looking back, I think my reticence was due to a conflict between my love of tech and the avoidance of doing “the bad thing”, in this case, “waste my life” on computers, etc. Realizing this recently has led to a feverish pursuit of so many things I have pursued but guiltily so for years: programming, video games, and electronics in general.During these COVID times, I couldn’t have really asked for a better hobby than sitting on a computer and creating things alone in a room. However, these times of reclusivity also create this problem where I find I can’t let it go and I have to keep working because I “should” or “else” “something” might happen.So now I am on a quest to try and be bored more. Like not do anything for as long as possible until I feel an urge to do it or a really strong desire, and not just a tiny pinprick of discomfort. At this point, I am completely out of practice, but I’m excited to see how this develops and if this space leaves me a bit more relaxed and mindful.",
            "content_html": "<p>During quarantine, I’ve been trying to just be bored and not constantly DO things and it’s weird how hard that is. Blah blah, every complaint about technology bad. But that aside, I <em>do</em> like techology and love spending time with it. And trying to reconcile these two things in particular has been difficult.</p><p>Tech has had a weird hold on me since I was a kid, and it has been what I have always wanted to spend my time doing. But I felt like I was also getting signals from various places that technology was bad and I shouldn’t spend so much time on it, probably a recoil from video games and the like.</p><p>So now looking back, I think my reticence was due to a conflict between my love of tech and the avoidance of doing “the bad thing”, in this case, “waste my life” on computers, etc. Realizing this recently has led to a feverish pursuit of so many things I have pursued but guiltily so for years: programming, video games, and electronics in general.</p><p>During these COVID times, I couldn’t have really asked for a better hobby than sitting on a computer and creating things alone in a room. However, these times of reclusivity also create this problem where I find I can’t let it go and I have to keep <em>working</em> because I “should” or “else” “something” might happen.</p><p>So now I am on a quest to try and be bored more. Like not do anything for as long as possible until I feel an <strong>urge</strong> to do it or a really strong desire, and not just a tiny pinprick of discomfort. At this point, I am completely out of practice, but I’m excited to see how this develops and if this space leaves me a bit more relaxed and mindful.</p><!-- - _202XXXXX: Update format_ -->",
            "url": "http://milofultz.com/2020/10/04/doing",
            
            
            
            
            
            "date_published": "2020-10-04T00:00:00-07:00",
            "date_modified": "2020-10-04T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/09/30/evernote-images",
            "title": "💻 Maximize Evernote Storage Using Web Clipper (JS)",
            "summary": "Either using a Google Chrome extension or one line of JS, maximize your snippets in Evernote and stay away from $8 subscriptions for a tiny feature.",
            "content_text": "Check out the up-to-date version on GitHubWhen using Evernote’s web clipper, I was using too much of my upload cap with Evernote every month, mostly because images are too big when cropping the whole article. So I decided to practice some JS and see if I could make it work better without paying an $8 per month subscription for just a few extra megs of upload per month.On an average article with supporting (but not necessarily useful) pictures, I’ve seen about a 90%+ reduction in note sizes.This extension has been tested to work on the “Article”, “Simplified Article”, and “Full Page” options.Cheap and Easy No-Install Browser Agnostic VersionIn the console of your browser, type the following:document.querySelectorAll('img').forEach(image =&gt; image.remove());To reset this, reload your page.Chrome ExtensionThis extension is really simple: on click, it goes through all the img elements on the page and removes them from the DOM. On another click, the page is refreshed.The original implementation set the element’s display to none on clicking the button again, all display settings for the images were set to their original value. Unfortunately, Evernote adds and modifies inline style on import, so it negated this otherwise more elegant implementation.Installation:To install this extension, please go to the Github page for updated information and instructions.  20201007: Changed to avoid Evernote’s inline styling on import  20201030: Added average space savings",
            "content_html": "<p><a href=\"https://github.com/milofultz/no-images\"><strong>Check out the up-to-date version on GitHub</strong></a></p><p>When using Evernote’s web clipper, I was using too much of my upload cap with Evernote every month, mostly because images are too big when cropping the whole article. So I decided to practice some JS and see if I could make it work better without paying an $8 per month subscription for just a few extra megs of upload per month.</p><p>On an average article with supporting (but not necessarily useful) pictures, I’ve seen about a <strong>90%+ reduction</strong> in note sizes.</p><p>This extension has been tested to work on the “Article”, “Simplified Article”, and “Full Page” options.</p><h2 id=\"cheap-and-easy-no-install-browser-agnostic-version\">Cheap and Easy No-Install Browser Agnostic Version</h2><p>In the console of your browser, type the following:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>document.querySelectorAll('img').forEach(image =&gt; image.remove());</code></pre></div></div><p>To reset this, reload your page.</p><h2 id=\"chrome-extension\">Chrome Extension</h2><p>This extension is really simple: on click, it goes through all the <code class=\"highlighter-rouge\">img</code> elements on the page and removes them from the DOM. On another click, the page is refreshed.</p><p>The original implementation set the element’s display to <code class=\"highlighter-rouge\">none</code> on clicking the button again, all display settings for the images were set to their original value. Unfortunately, Evernote adds and modifies inline style on import, so it negated this otherwise more elegant implementation.</p><h3 id=\"installation\">Installation:</h3><p>To install this extension, please go to the Github page for updated information and instructions.</p><hr /><ul>  <li><em>20201007: Changed to avoid Evernote’s inline styling on import</em></li>  <li><em>20201030: Added average space savings</em></li></ul>",
            "url": "http://milofultz.com/2020/09/30/evernote-images",
            
            
            
            
            
            "date_published": "2020-09-30T00:00:00-07:00",
            "date_modified": "2020-09-30T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/09/26/zentube",
            "title": "💻 Zentube - Youtube Lite w/Note Taking (HTML/CSS/JS)",
            "summary": "Distraction-free note taking on Youtube videos. Includes file export and automatic timestamps.",
            "content_text": "Try it out here // You can find the updated project and all necessary files here on GitHub.I wanted to be able to take notes on a Youtube video without having to tab out of the window to a text editor all of the time. After seeing Josh Alanier’s Down and Hundred Rabbit’s Left, I realized I didn’t need to do anything fancy, and in fact I preferred the minimalist layout that vanilla JS can provide.This saves the text you write for a given Youtube video into local storage and will load it up again upon returning to the same video. Supports exporting to a text file and adding automatic timestamps.Borrowed/stole heavily from Skeleton CSS and Josh Alanier’s Down for code, stylesheets, and ideas.",
            "content_html": "<p><a href=\"https://milofultz.com/zentube/\"><strong>Try it out here</strong></a> // <a href=\"https://github.com/milofultz/zentube\">You can find the updated project and all necessary files here on GitHub.</a></p><p>I wanted to be able to take notes on a Youtube video without having to tab out of the window to a text editor all of the time. After seeing Josh Alanier’s <a href=\"https://down.avanier.now.sh\">Down</a> and Hundred Rabbit’s <a href=\"https://github.com/hundredrabbits/left\">Left</a>, I realized I didn’t need to do anything fancy, and in fact I preferred the minimalist layout that vanilla JS can provide.</p><p>This saves the text you write for a given Youtube video into local storage and will load it up again upon returning to the same video. Supports exporting to a text file and adding automatic timestamps.</p><p>Borrowed/stole heavily from <a href=\"http://getskeleton.com/\">Skeleton CSS</a> and Josh Alanier’s <a href=\"https://down.avanier.now.sh\">Down</a> for code, stylesheets, and ideas.</p><hr />",
            "url": "http://milofultz.com/2020/09/26/zentube",
            
            
            
            
            
            "date_published": "2020-09-26T00:00:00-07:00",
            "date_modified": "2020-09-26T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/09/23/mastodon",
            "title": "Mastodon",
            "summary": null,
            "content_text": "Been digging into Mastodon, as it brings all the good things I like about social media and none of the trash. Find me there.- 20201009: Moved to https://merveilles.town",
            "content_html": "<p>Been digging into Mastodon, as it brings all the good things I like about social media and none of the trash. <a rel=\"me\" href=\"https://merveilles.town/@milofultz\">Find me there.</a></p><p><em>- 20201009: Moved to <a href=\"https://merveilles.town\">https://merveilles.town</a></em></p>",
            "url": "http://milofultz.com/2020/09/23/mastodon",
            
            
            
            
            
            "date_published": "2020-09-23T00:00:00-07:00",
            "date_modified": "2020-09-23T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/09/01/domine",
            "title": "Domine (game from Hundred Rabbits)",
            "summary": "I transcribed the rules for this simple game from Hundred Rabbits since it looks really fun and I can't find their rules page anymore.",
            "content_text": "I recently came across this video from Hundred Rabbits of a game called Domine. Super simple game you can play with a set of dominoes. I transcribed the rules for this game from the video since it looks really fun and I can’t find the rules page anymore.Equipment: Double 9 domino setGoal: To have the most “living” dominoes at the end of the round.  Each player draws a hand of seven dominoes and keeps them hidden from their opponent. The two numbers on either side of a domino are the attack and defense points, facing the opponent and the player respectively. The dominoes can be flipped as long as it’s before they are played.  Each turn consists of an attack using a domino and choosing which is the attack side and which is the defense.  Players alternate turns until all dominoes have been played. The player with the most living dominoes wins.Attack RulesWhen a player attacks with a domino, the opponent must defend with a value equal to or higher than the attack. If the opponent’s domino defense value is lower than the attack, the domino is killed. If the opponent’s domino defense value is equal to or higher, then they have survived. If the opponent can defend and has an attack number higher than the player’s domino defense value, the opponent can counter to kill the player’s domino. Double dominoes get first strike, regardless if they initiate the attack.Part of Inexpensive and Minimal Equipment Games To Spend Time On  20201127: Played as I finally got a hold of dominoes. Can it be played with playing cards?",
            "content_html": "<p>I recently came across this <a href=\"https://www.youtube.com/watch?v=fjZb190qn00\">video</a> from Hundred Rabbits of a game called Domine. Super simple game you can play with a set of dominoes. I transcribed the rules for this game from the video since it looks really fun and I can’t find the rules page anymore.</p><hr /><p>Equipment: Double 9 domino set</p><p>Goal: To have the most “living” dominoes at the end of the round.</p><ul>  <li>Each player draws a hand of seven dominoes and keeps them hidden from their opponent. The two numbers on either side of a domino are the attack and defense points, facing the opponent and the player respectively. The dominoes can be flipped as long as it’s before they are played.</li>  <li>Each turn consists of an attack using a domino and choosing which is the attack side and which is the defense.</li>  <li>Players alternate turns until all dominoes have been played. The player with the most living dominoes wins.</li></ul><h3 id=\"attack-rules\">Attack Rules</h3><p>When a player attacks with a domino, the opponent must defend with a value equal to or higher than the attack. If the opponent’s domino defense value is lower than the attack, the domino is killed. If the opponent’s domino defense value is equal to or higher, then they have survived. If the opponent can defend and has an attack number higher than the player’s domino defense value, the opponent can counter to kill the player’s domino. Double dominoes get first strike, regardless if they initiate the attack.</p><p>Part of <a href=\"/2020/06/25/inexpensive-games\">Inexpensive and Minimal Equipment Games To Spend Time On</a></p><hr /><ul>  <li><em>20201127: Played as I finally got a hold of dominoes. Can it be played with playing cards?</em></li></ul>",
            "url": "http://milofultz.com/2020/09/01/domine",
            
            
            
            
            
            "date_published": "2020-09-01T00:00:00-07:00",
            "date_modified": "2020-09-01T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/08/26/random-note",
            "title": "💻 Open A Random Note/Lo-Fi Idea Generator (Python)",
            "summary": "I got inspired by Tiago Forte's RandomNote Web and decided to make my own simple version using Python, Applescript, and nvALT, and it's easy to port.",
            "content_text": "For the last few months, I have been feeding my Zettelkasten with essentially anything that I find interesting: programming, emotional development, quotes, productivity, book or video reviews, whatever. If I think it’s something that will help me or make me excited later, I put it in there.The problem I had was that even though I had these notes for reference, I wasn’t finding myself reviewing them just for creating those interesting and random connections, which was something that I had initially started using the Zettelkasten for. Those random connections are what creates interesting ideas and diffuse connections, as well as a spaced repetition for ideas that I already decided are worth knowing.I found a solution that was implemented by productivity dude and Twitter instigator Tiago Forte. Essentially, his “second brain”, analogous to a Zettelkasten, is housed in Evernote, and he had an app developed that would pop open a random Evernote every time he clicked it. He found that this boosted his creativity and because of how easy it was, he was able to do it between meetings, during his breaks, essentially in any spare moment. In doing some research, I found somebody who made a random note Applescript for the Evernote app that looks like this:# Applescripttell application \"Evernote\"\tset noteList to find notes\tset randomNote to some item of noteList\tset query string of window 1 to (title of randomNote as string)end tellI figured it was just as simple of a task if you had your notes saved locally, which I do as text/Markdown files, so I set out to make a Python script that did this, along with an app implementation that can sit in my dock. I used the same process I did in my “Make Python ‘Apps’ and Shortcuts To Run Them on OSX” post, so obviously this is geared towards OSX users.  Create your Python script, replacing the paths and extension to yours:import osimport randomfolder = \"/path/to/notes\"prog = \"/path/to/application.app\"ext = \"txt\"file_list = os.listdir(folder)txt_list = [file for file in file_list if file.endswith(ext)]random_file = random.choice(file_list)random_fp = os.path.join(folder, random_file)os.system('open \"{}\" -a \"{}\"'.format(random_fp, prog))  Save this file and name it whatever you like .py, like random_note.py. (I saved it where all my code projects are, but you could also create a folder in your Applications folder and stick it there)  Open Script Editor and make a new document. Ensure that AppleScript is selected in the dropdown menu in the upper left of the window.  Create your Applescript, replacing the paths and script name to yours:do shell script \"cd '/path/to/script'; python script_name.py\"  Save the script in your Applications folder as an “Application” file format.  Put it on your dock and go wild.I added a little light bulb icon on mine[6], as is tradition, and it is a great way to pass the time. I spent all this time curating ideas, recipes, thoughts, information, and experiences I thought were interesting, and now I can really enjoy the payoff in a very fun way.References:    RandomNote app from Tiago Forte  RandomNote Web  random note Applescript for the Evernote app  Make Python ‘Apps’ and Shortcuts To Run Them on OSX  Add icon",
            "content_html": "<p>For the last few months, I have been feeding my <a href=\"/2020/05/22/zettelkasten\">Zettelkasten</a> with essentially anything that I find interesting: programming, emotional development, quotes, productivity, book or video reviews, whatever. If I think it’s something that will help me or make me excited later, I put it in there.</p><p>The problem I had was that even though I had these notes for reference, I wasn’t finding myself reviewing them just for creating those interesting and random connections, which was something that I had initially started using the Zettelkasten for. Those random connections are what creates interesting ideas and diffuse connections, as well as a spaced repetition for ideas that I already decided are worth knowing.</p><p>I found a solution that was implemented by productivity dude and Twitter instigator Tiago Forte. Essentially, his “second brain”, analogous to a Zettelkasten, is housed in Evernote, and he had <a href=\"\">an app</a> developed that would pop open a random Evernote every time he clicked it. He found that this boosted his creativity and because of how easy it was, he was able to do it between meetings, during his breaks, essentially in any spare moment. In doing some research, I found somebody who made a <a href=\"\">random note Applescript for the Evernote app</a> that looks like this:</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Applescripttell application \"Evernote\"\tset noteList to find notes\tset randomNote to some item of noteList\tset query string of window 1 to (title of randomNote as string)end tell</code></pre></div></div><p>I figured it was just as simple of a task if you had your notes saved locally, which I do as text/Markdown files, so I set out to make a Python script that did this, along with an app implementation that can sit in my dock. I used the same process I did in my “<a href=\"/2020/07/22/make-python-apps\">Make Python ‘Apps’ and Shortcuts To Run Them on OSX</a>” post, so obviously this is geared towards OSX users.</p><hr /><ul>  <li>Create your Python script, replacing the paths and extension to yours:</li></ul><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>import osimport randomfolder = \"/path/to/notes\"prog = \"/path/to/application.app\"ext = \"txt\"file_list = os.listdir(folder)txt_list = [file for file in file_list if file.endswith(ext)]random_file = random.choice(file_list)random_fp = os.path.join(folder, random_file)os.system('open \"{}\" -a \"{}\"'.format(random_fp, prog))</code></pre></div></div><ul>  <li>Save this file and name it whatever you like <code class=\"highlighter-rouge\">.py</code>, like <code class=\"highlighter-rouge\">random_note.py</code>. (I saved it where all my code projects are, but you could also create a folder in your Applications folder and stick it there)</li>  <li>Open Script Editor and make a new document. Ensure that AppleScript is selected in the dropdown menu in the upper left of the window.</li>  <li>Create your Applescript, replacing the paths and script name to yours:</li></ul><p><code class=\"highlighter-rouge\">do shell script \"cd '/path/to/script'; python script_name.py\"</code></p><ul>  <li>Save the script in your Applications folder as an “Application” file format.</li>  <li>Put it on your dock and go wild.</li></ul><p>I added a little light bulb icon on mine[6], as is tradition, and it is a great way to pass the time. I spent all this time curating ideas, recipes, thoughts, information, and experiences I thought were interesting, and now I can really enjoy the payoff in a very fun way.</p><hr /><p>References:</p><ol>  <li><a href=\"\"></a></li>  <li><a href=\"\">RandomNote app from Tiago Forte</a></li>  <li><a href=\"\">RandomNote Web</a></li>  <li><a href=\"\">random note Applescript for the Evernote app</a></li>  <li><a href=\"/2020/07/22/make-python-apps\">Make Python ‘Apps’ and Shortcuts To Run Them on OSX</a></li>  <li><a href=\"\">Add icon</a></li></ol>",
            "url": "http://milofultz.com/2020/08/26/random-note",
            
            
            
            
            
            "date_published": "2020-08-26T00:00:00-07:00",
            "date_modified": "2020-08-26T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/08/22/purple-rain-outro",
            "title": "🎼 Purple Rain Outro Transcription",
            "summary": "A transcription of the DX7 strings outro for Purple Rain.",
            "content_text": "You can listen to it here on YouTube.",
            "content_html": "<p><img src=\"/assets/20200822PurpleRain.jpg\" alt=\"Purple Rain Outro Transcription\" /></p><p><a href=\"https://www.youtube.com/watch?v=km6Ryvor5_k\">You can listen to it here on YouTube.</a></p>",
            "url": "http://milofultz.com/2020/08/22/purple-rain-outro",
            
            
            
            
            
            "date_published": "2020-08-22T00:00:00-07:00",
            "date_modified": "2020-08-22T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/08/19/soulja-realms",
            "title": "🎧 Soulja Realms",
            "summary": "I mashed up the Star Realms music with a bunch of Soulja Boy acapellas.",
            "content_text": "Listen hereMy brain started mashing together Crank Dat Soulja Boy with the first Star Realms song and I could not stop until they were all combined into one dumb megamix. If you don’t know Star Realms or Soulja Boy, this probably won’t make much sense, but you should at least check out Star Realms, because it’s a great deck-building game and a fun app to pass the time.",
            "content_html": "<p><a href=\"https://www.youtube.com/watch?v=xb6MV25Ktjc\"><img src=\"https://i.ytimg.com/vi/xb6MV25Ktjc/maxresdefault.jpg\" alt=\"Soulja Realms\" /></a></p><p><a href=\"https://www.youtube.com/watch?v=xb6MV25Ktjc\">Listen here</a></p><p>My brain started mashing together <a href=\"https://www.youtube.com/watch?v=8UFIYGkROII\">Crank Dat Soulja Boy</a> with the first Star Realms song and I could not stop until they were all combined into one dumb megamix. If you don’t know Star Realms or Soulja Boy, this probably won’t make much sense, but you should at least check out <a href=\"https://www.starrealms.com/\">Star Realms</a>, because it’s a great deck-building game and a fun app to pass the time.</p>",
            "url": "http://milofultz.com/2020/08/19/soulja-realms",
            
            
            
            
            
            "date_published": "2020-08-19T00:00:00-07:00",
            "date_modified": "2020-08-19T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/08/04/piu-piu-ringtone",
            "title": "🎧 Piu Piu ringtone but it's only Avgustina's laugh",
            "summary": "Piu Piu ringtone but it's only Avgustina's laugh",
            "content_text": "I am starting a project to see how long my roommates and I can handle listening to Avgustina’s laugh as my text message notification sound. I set it to where it only does it when my partner messages me, but it should be horrible enough.You can download this atrocity as an m4r file here. Made using Mediahuman Audio Converter for OSX.",
            "content_html": "<p>I am starting a project to see how long my roommates and I can handle listening to Avgustina’s laugh as my text message notification sound. I set it to where it only does it when my partner messages me, but it should be horrible enough.</p><p>You can download this atrocity as an m4r file <a href=\"/assets/20200804PiuPiu.m4r\">here</a>. Made using Mediahuman Audio Converter for OSX.</p>",
            "url": "http://milofultz.com/2020/08/04/piu-piu-ringtone",
            
            
            
            
            
            "date_published": "2020-08-04T00:00:00-07:00",
            "date_modified": "2020-08-04T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/07/23/awfulizer",
            "title": "💻 Awfulizer - Make Surfing The Web Awful (Firefox)",
            "summary": "I made this Firefox extension to see if I could do it, and I could. This extension cycles colors on every element 6 times per second.",
            "content_text": "You can get the add-on here and see the code on GitHub.Watch a video of it in action.While studying some CSS and HTML on FreeCodeCamp, I was trying to figure out how I could exercise some of the skills I was learning. One of the basics of CSS is just changing style of fonts and backgrounds, so I figured why not try and make some program that cycles all of those over and over? I found that making your first extension is very easy, so I tried it. After a ton of trial and error, I made a button that allows you to manually turn it on on a given tab, but you can only turn it off through refreshing it. I’ve added a static feature and the ability to choose (wow!) in v1.2. In the future, I’m hoping to add an option to turn it off once it starts.References:  https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Your_first_WebExtension",
            "content_html": "<p>You can get the add-on <a href=\"https://addons.mozilla.org/en-US/firefox/addon/awfulizer/\">here</a> and see the code on <a href=\"https://github.com/milofultz/awfulizer\">GitHub</a>.</p><p><a href=\"https://www.youtube.com/watch?v=dx7hZAAHFuk&amp;feature=youtu.be\">Watch a video of it in action.</a></p><p>While studying some CSS and HTML on <a href=\"https://www.freecodecamp.org/\">FreeCodeCamp</a>, I was trying to figure out how I could exercise some of the skills I was learning. One of the basics of CSS is just changing style of fonts and backgrounds, so I figured why not try and make some program that cycles all of those over and over? I found that <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Your_first_WebExtension\">making your first extension is very easy</a>, so I tried it. After a ton of trial and error, I made a button that allows you to manually turn it on on a given tab, but you can only turn it off through refreshing it. I’ve added a static feature and the ability to choose (wow!) in v1.2. In the future, I’m hoping to add an option to turn it off once it starts.</p><hr /><p>References:</p><ol>  <li>https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Your_first_WebExtension</li></ol>",
            "url": "http://milofultz.com/2020/07/23/awfulizer",
            
            
            
            
            
            "date_published": "2020-07-23T00:00:00-07:00",
            "date_modified": "2020-07-23T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/07/22/make-python-apps",
            "title": "Make Python 'Apps' and Shortcuts To Run Them on OSX",
            "summary": "Using Automator and the built in Services of OSX, you can make simple Python apps run on command.",
            "content_text": "After experimenting with PyInstaller and Platypus to create a standalone app in OSX with no success, I went the much lower fidelity route. But it was successful, so I’m happy with it. YOu can see the script I made here.The goal of this was first to make a standalone app that will run Python script, but second to assign it to a keystroke. I have only tested this with running a Python script, but I can’t imagine it would be much more difficult for any other bash script. So here is the process:  Open Script Editor (in Applications/Utilities).      Using the do shell script command, add the script you want to run. Essentially, you’ll want to write in what you normally put into the Terminal, separated by semicolons.    do shell script \"cd 'path/to/script'; source venv/bin/activate; python main.py\"    Save this as an Application to your Applications folder (or wherever makes sense).  Close Script Editor. (If you don’t want to add a shortcut, you can stop here)  Open Automator (in Applications).  Create a “Quick Action” or “Service”, whatever one your OS says.  In the top bar, set the following setting: Workflow receives current no input in any application.  In the column second from the left, drag the “Launch Application” task into the “Drag actions or files here” area.  Select your application within that dropdown menu.  Save this with a memorable name.  Close Automator.  Open System Preferences and go to “Keyboard”.  Within this window, click “Shortcuts”.  Click on the “Services” menu on the left hand side.  Scroll to the bottom of the right window until you see your new service you created.  Double-click where it says ‘none’ and set a new shortcut (make sure it’s unique and won’t conflict with other programs or special characters. I chose ctrl+opt+shift+A). NOTE: If you don’t do the following steps, your shortcut will not work.  Close your System Preferences.  Click on Finder in your dock.  Open the Finder dropdown menu and go into Services. Click on your new service to run it manually.References:  https://www.makeuseof.com/tag/applescript-bash-scripts-apps/  https://discussions.apple.com/thread/5048120",
            "content_html": "<p>After experimenting with <a href=\"https://pyinstaller.readthedocs.io/en/stable/\">PyInstaller</a> and <a href=\"https://sveinbjorn.org/platypus\">Platypus</a> to create a standalone app in OSX with no success, I went the much lower fidelity route. But it was successful, so I’m happy with it. YOu can see the script I made <a href=\"https://github.com/milofultz/email_service/\">here</a>.</p><p>The goal of this was first to make a standalone app that will run Python script, but second to assign it to a keystroke. I have only tested this with running a Python script, but I can’t imagine it would be much more difficult for any other bash script. So here is the process:</p><ol>  <li>Open Script Editor (in Applications/Utilities).</li>  <li>    <p>Using the <code class=\"highlighter-rouge\">do shell script</code> command, add the script you want to run. Essentially, you’ll want to write in what you normally put into the Terminal, separated by semicolons.</p>    <p><code class=\"highlighter-rouge\">do shell script \"cd 'path/to/script'; source venv/bin/activate; python main.py\"</code></p>  </li>  <li>Save this as an Application to your Applications folder (or wherever makes sense).</li>  <li>Close Script Editor. <em>(If you don’t want to add a shortcut, you can stop here)</em></li>  <li>Open Automator (in Applications).</li>  <li>Create a “Quick Action” or “Service”, whatever one your OS says.</li>  <li>In the top bar, set the following setting: Workflow receives current <strong>no input</strong> in <strong>any application</strong>.</li>  <li>In the column second from the left, drag the “Launch Application” task into the “Drag actions or files here” area.</li>  <li>Select your application within that dropdown menu.</li>  <li>Save this with a memorable name.</li>  <li>Close Automator.</li>  <li>Open System Preferences and go to “Keyboard”.</li>  <li>Within this window, click “Shortcuts”.</li>  <li>Click on the “Services” menu on the left hand side.</li>  <li>Scroll to the bottom of the right window until you see your new service you created.</li>  <li>Double-click where it says ‘none’ and set a new shortcut (make sure it’s unique and won’t conflict with other programs or special characters. I chose <code class=\"highlighter-rouge\">ctrl+opt+shift+A</code>). <strong>NOTE: If you don’t do the following steps, your shortcut will not work.</strong></li>  <li>Close your System Preferences.</li>  <li>Click on Finder in your dock.</li>  <li>Open the Finder dropdown menu and go into Services. Click on your new service to run it manually.</li></ol><hr /><p>References:</p><ol>  <li><a href=\"https://www.makeuseof.com/tag/applescript-bash-scripts-apps/\">https://www.makeuseof.com/tag/applescript-bash-scripts-apps/</a></li>  <li><a href=\"https://discussions.apple.com/thread/5048120\">https://discussions.apple.com/thread/5048120</a></li></ol>",
            "url": "http://milofultz.com/2020/07/22/make-python-apps",
            
            
            
            
            
            "date_published": "2020-07-22T00:00:00-07:00",
            "date_modified": "2020-07-22T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/07/18/programming-outline",
            "title": "Create a better program faster with an outline V2",
            "summary": "I've written so much spaghetti code for so long and finally learned from my roommate how to write better code. This is how I use this method.",
            "content_text": "Like before, stay in abstract thinking as long as possible. The longer you take to implement your concepts, the better.Big Overview:  Understanding the Problem  Breaking It Down  Inspection  Development/TestingUnderstanding the Problem      Describe what the problem is in abstract terms as clearly as you can. What is the thing that you can’t do or isn’t happening right now?        Describe the solution to this problem in abstract terms as the desired result. Don’t worry about the how yet, just what the result will be.        Describe in abstract terms what things the program will do, as if it was a person doing it, not a computer. What are all of the smaller tasks within this bigger problem/solution?        From there, describe how your program will handle data on the way in and the way out (not within the program). What do you as the user want to give it and what do you want it to spit back out? Like when you give the dry cleaner your clothes: input is dirty clothes, output is clean clothes.  Breaking It Down      Break down the process further in abstract terms. What are the distinct actions the program will need to take to solve this problem? If you were asking a very pedantic person to do this task for you, what would you tell them?        What are the biggest distinct functions you can perceive in the description you just created?        Can you break these down further into sub-tasks? If so, go back to breaking it down (5.) in abstract terms until you can’t do it anymore.        With the many discrete functions you have, what data types would be best to give to and get from them?        Make a very rough outline of each function in your program using information from chunking steps. Include only necessary in/out information (e.g. if you are wanting to eat and the data type is ‘food’ and it will return ‘poop’: def eat(food): return poop)        Within these functions, write out an overview for each function. Write again for this ultra pedantic person.        See if you can break down elements of the functions into even smaller parts. The more that functions can be used and reused all around the whole program, the better.  Inspection      Once the program has been broken down into its most atomistic functions, start writing pseudocode into them to have an idea of what you’re going to do.        Look again for similarities in between functions and see if there is any process the functions could share. If so, then take that and break it down into it’s own function.        When you feel it has been fully broken down and the flow of data makes sense, create a basic outline of how the different functions will flow together from beginning to the end of the program. Do the data types match? If not, can you use a different data type? Is an adaptation needed between one function and another?  Development/Testing      Make a basic way to develop each function and test it as it goes (in Python, by adding an if __name__ == '__main__': section).        Figure out what is the easiest thing to program and test. Go with the pseudocode you’ve written and start fleshing it out with real functionality. Test each part as you go in the terminal.        Repeat this process with each element of your code, ensuring that it works exactly as you expect. You don’t have to go in a linear fashion, if it is easier or more sensible to jump around.        Don’t be afraid to go back to previous steps if you realize further possibilities of chunking or other revisions.  ",
            "content_html": "<p>Like before, <strong>stay in abstract thinking as long as possible. The longer you take to implement your concepts, the better.</strong></p><h1 id=\"big-overview\">Big Overview:</h1><ul>  <li>Understanding the Problem</li>  <li>Breaking It Down</li>  <li>Inspection</li>  <li>Development/Testing</li></ul><hr /><h2 id=\"understanding-the-problem\">Understanding the Problem</h2><ol>  <li>    <p>Describe what the problem is in abstract terms as clearly as you can. What is the thing that you can’t do or isn’t happening right now?</p>  </li>  <li>    <p>Describe the solution to this problem in abstract terms as the desired result. Don’t worry about the how yet, just what the result will be.</p>  </li>  <li>    <p>Describe in abstract terms what things the program will do, as if it was a person doing it, not a computer. What are all of the smaller tasks within this bigger problem/solution?</p>  </li>  <li>    <p>From there, describe how your program will handle data on the way in and the way out (not within the program). What do you as the user want to give it and what do you want it to spit back out? Like when you give the dry cleaner your clothes: input is dirty clothes, output is clean clothes.</p>  </li></ol><h2 id=\"breaking-it-down\">Breaking It Down</h2><ol>  <li>    <p>Break down the process further in abstract terms. What are the distinct actions the program will need to take to solve this problem? If you were asking a very pedantic person to do this task for you, what would you tell them?</p>  </li>  <li>    <p>What are the biggest distinct functions you can perceive in the description you just created?</p>  </li>  <li>    <p>Can you break these down further into sub-tasks? If so, go back to breaking it down (5.) in abstract terms until you can’t do it anymore.</p>  </li>  <li>    <p>With the many discrete functions you have, what data types would be best to give to and get from them?</p>  </li>  <li>    <p>Make a very rough outline of each function in your program using information from chunking steps. Include only necessary in/out information (e.g. if you are wanting to eat and the data type is ‘food’ and it will return ‘poop’: <code class=\"highlighter-rouge\">def eat(food): return poop</code>)</p>  </li>  <li>    <p>Within these functions, write out an overview for each function. Write again for this ultra pedantic person.</p>  </li>  <li>    <p>See if you can break down elements of the functions into even smaller parts. The more that functions can be used and reused all around the whole program, the better.</p>  </li></ol><h2 id=\"inspection\">Inspection</h2><ol>  <li>    <p>Once the program has been broken down into its most atomistic functions, start writing pseudocode into them to have an idea of what you’re going to do.</p>  </li>  <li>    <p>Look again for similarities in between functions and see if there is any process the functions could share. If so, then take that and break it down into it’s own function.</p>  </li>  <li>    <p>When you feel it has been fully broken down and the flow of data makes sense, create a basic outline of how the different functions will flow together from beginning to the end of the program. Do the data types match? If not, can you use a different data type? Is an adaptation needed between one function and another?</p>  </li></ol><h2 id=\"developmenttesting\">Development/Testing</h2><ol>  <li>    <p>Make a basic way to develop each function and test it as it goes (in Python, by adding an <code class=\"highlighter-rouge\">if __name__ == '__main__':</code> section).</p>  </li>  <li>    <p>Figure out what is the easiest thing to program and test. Go with the pseudocode you’ve written and start fleshing it out with real functionality. Test each part as you go in the terminal.</p>  </li>  <li>    <p>Repeat this process with each element of your code, ensuring that it works exactly as you expect. You don’t have to go in a linear fashion, if it is easier or more sensible to jump around.</p>  </li>  <li>    <p>Don’t be afraid to go back to previous steps if you realize further possibilities of chunking or other revisions.</p>  </li></ol>",
            "url": "http://milofultz.com/2020/07/18/programming-outline",
            
            
            
            
            
            "date_published": "2020-07-18T00:00:00-07:00",
            "date_modified": "2020-07-18T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/07/08/star-maker",
            "title": "💻 star_maker - a lo-fi ambient visual (Python)",
            "summary": "star_maker - a lo-fi ambient visual (Python)",
            "content_text": "You can visit the project and download the files on GitHub.star_maker is a lo-fi screen saver or ambient visual using blessed. I originally made it so I could make a star visual for a page on my website and then mucked around and realized it offered me both a chance to mess around with blessed and a really funny but relatively simple challenge.It looks like this, but much more interesting.  20200708: Added color and more special characters  20200708: Added parallax effect in  c o l o r",
            "content_html": "<p><a href=\"https://github.com/milofultz/star_maker\">You can visit the project and download the files on GitHub.</a></p><p>star_maker is a lo-fi screen saver or ambient visual using blessed. I originally made it so I could make a star visual for <a href=\"/2020/07/07/spacelove\">a page on my website</a> and then mucked around and realized it offered me both a chance to mess around with <a href=\"https://github.com/jquast/blessed\">blessed</a> and a really funny but relatively simple challenge.</p><p>It looks like <a href=\"/2020/07/07/spacelove\">this</a>, but much more interesting.</p><ul>  <li><em>20200708: Added color and more special characters</em></li>  <li><em>20200708: Added parallax effect in  c o l o r</em></li></ul>",
            "url": "http://milofultz.com/2020/07/08/star-maker",
            
            
            
            
            
            "date_published": "2020-07-08T00:00:00-07:00",
            "date_modified": "2020-07-08T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/07/07/spacelove",
            "title": "🎧 spacelove.xm - Made using an old E-MAX sample",
            "summary": "spacelove.xm - Made in MilkyTracker with an old E-MAX sample",
            "content_text": "&nbsp;` &nbsp; &nbsp; ' . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; ` &nbsp; ` &nbsp;. , &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; . &nbsp; \" &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;, &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; ` \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; . &nbsp; + , ' &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;. ` &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; \" &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; + . &nbsp; ` &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp;` &nbsp; &nbsp;` ' ` &nbsp; &nbsp;, + &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;. ` &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp;+ &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp;` &nbsp;\" &nbsp; &nbsp; &nbsp;\" , &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp;' &nbsp; &nbsp;. &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp;, , &nbsp; &nbsp; &nbsp; \" ' &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp;` &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp;. &nbsp; ' &nbsp; &nbsp; . ' &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp;\" . &nbsp; &nbsp;\" &nbsp; &nbsp;+ &nbsp;+ &nbsp; &nbsp;\" + &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;+ , &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp;+ &nbsp; &nbsp;` &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; ` \" \" &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; , . &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; + . &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;, ` &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; + ` &nbsp; &nbsp; \" &nbsp;. &nbsp; &nbsp; ' &nbsp; &nbsp; + &nbsp; + &nbsp; + \" &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; ' &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; . \" &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; ' &nbsp; ` &nbsp; &nbsp; &nbsp;\" . &nbsp; &nbsp; &nbsp;+ &nbsp; ` &nbsp; &nbsp; &nbsp; ' &nbsp; ' &nbsp; \" \" &nbsp;\" &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp;' &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; ` &nbsp; &nbsp; &nbsp;' &nbsp;. &nbsp; \" &nbsp; + . , &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; , &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp;' . &nbsp; , &nbsp;\" &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp;+ , &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; ' &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; , &nbsp; &nbsp; ` ` &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; . &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp;\" &nbsp;` &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp;, &nbsp; &nbsp; ` &nbsp;` ` &nbsp; &nbsp; &nbsp;, &nbsp;' &nbsp;\" &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; \" &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp;. &nbsp; &nbsp; ' ` &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; . &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; + + &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; , &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; + &nbsp; ' + &nbsp; &nbsp; &nbsp; + . + &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp;. &nbsp; &nbsp; + &nbsp;+ &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp;+ &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;, &nbsp; ' &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;\" &nbsp;` &nbsp; ' &nbsp; &nbsp;, &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp;\" &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp;' , ' &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp;, &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; , ` &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp;` &nbsp;+ &nbsp;` &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; ' \" + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;+ ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;+ , . &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; + &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" , &nbsp; &nbsp; &nbsp;, &nbsp;` &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;, ' ' &nbsp; ` \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; \" &nbsp;' &nbsp;` \" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; ` \" &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp;` &nbsp; ' &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; \" &nbsp; `  Your browser does not support the audio element.Download the XM file here What's an XM file and how do I open it? &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp;+ &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp;+ &nbsp; + &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; + &nbsp; &nbsp;+ &nbsp;+ &nbsp; &nbsp; + &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp;, &nbsp; &nbsp; \" &nbsp; , &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;+ ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; + &nbsp;. &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; + , &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; + &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; . . &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; + &nbsp;, &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;\" ' &nbsp; &nbsp;+ &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; ` &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp;, &nbsp; &nbsp; \" &nbsp; &nbsp; ' &nbsp; + ` &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp;` &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; ' &nbsp; . &nbsp; &nbsp; ` &nbsp; + , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; . &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp;\" + &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;+ &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp;. &nbsp;, &nbsp;. &nbsp; &nbsp; ` &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; \" &nbsp;, &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp;' &nbsp;\" &nbsp; &nbsp;. &nbsp; &nbsp; , &nbsp; &nbsp;' &nbsp; . &nbsp; &nbsp; &nbsp;' &nbsp;, &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp;, &nbsp;\" &nbsp; , &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; + &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; + &nbsp; ' &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;. &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp;, + &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp;\" &nbsp;' &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; , \" &nbsp; ' &nbsp; ' &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; , &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; ' &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp;, . &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp;' ` &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;` ` &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;` &nbsp;' &nbsp;\" &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp;\" &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; + &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; , &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; + ' \" &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp;+ &nbsp;. \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp;, &nbsp;. &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;+ \" &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp;+ &nbsp; &nbsp; ' ` &nbsp;' &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; ' , &nbsp; &nbsp; , &nbsp; &nbsp; ` &nbsp;+ &nbsp; ` ' &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp;` &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; ' + &nbsp; \" &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp;' , &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; ` &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;' &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" ' &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` , &nbsp; &nbsp;, &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp;\" &nbsp; &nbsp;. &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;' &nbsp;+ &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; . &nbsp; + + &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; ' + &nbsp;. &nbsp; + + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp;+ \" &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp;\" &nbsp; , &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; + &nbsp; \" &nbsp; &nbsp; &nbsp; , &nbsp;+ &nbsp; , &nbsp;, &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; \" &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; + , &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;` ' &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; \" &nbsp; . &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" \" &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp;, ` &nbsp; &nbsp; &nbsp; + &nbsp;` &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;' , &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; . &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp;+ &nbsp; ` &nbsp; &nbsp; &nbsp;, &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;, + &nbsp; &nbsp; &nbsp; &nbsp;` ' &nbsp; &nbsp; , &nbsp; &nbsp; . &nbsp;' &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;`",
            "content_html": "<p class=\"stars\">&nbsp;` &nbsp; &nbsp; ' . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; ` &nbsp; ` &nbsp;. , &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; . &nbsp; \" &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;, &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; ` \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; . &nbsp; + , ' &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;. ` &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; \" &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; + . &nbsp; ` &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp;` &nbsp; &nbsp;` ' ` &nbsp; &nbsp;, + &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;. ` &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp;+ &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp;` &nbsp;\" &nbsp; &nbsp; &nbsp;\" , &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp;' &nbsp; &nbsp;. &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp;, , &nbsp; &nbsp; &nbsp; \" ' &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp;` &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp;. &nbsp; ' &nbsp; &nbsp; . ' &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp;\" . &nbsp; &nbsp;\" &nbsp; &nbsp;+ &nbsp;+ &nbsp; &nbsp;\" + &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;+ , &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp;+ &nbsp; &nbsp;` &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; ` \" \" &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; , . &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; + . &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;, ` &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; + ` &nbsp; &nbsp; \" &nbsp;. &nbsp; &nbsp; ' &nbsp; &nbsp; + &nbsp; + &nbsp; + \" &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; ' &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; . \" &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; ' &nbsp; ` &nbsp; &nbsp; &nbsp;\" . &nbsp; &nbsp; &nbsp;+ &nbsp; ` &nbsp; &nbsp; &nbsp; ' &nbsp; ' &nbsp; \" \" &nbsp;\" &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp;' &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; ` &nbsp; &nbsp; &nbsp;' &nbsp;. &nbsp; \" &nbsp; + . , &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; , &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp;' . &nbsp; , &nbsp;\" &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp;+ , &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; ' &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; , &nbsp; &nbsp; ` ` &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; . &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp;\" &nbsp;` &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp;, &nbsp; &nbsp; ` &nbsp;` ` &nbsp; &nbsp; &nbsp;, &nbsp;' &nbsp;\" &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; \" &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp;. &nbsp; &nbsp; ' ` &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; . &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; + + &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; , &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; + &nbsp; ' + &nbsp; &nbsp; &nbsp; + . + &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp;. &nbsp; &nbsp; + &nbsp;+ &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp;+ &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;, &nbsp; ' &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;\" &nbsp;` &nbsp; ' &nbsp; &nbsp;, &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp;\" &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp;' , ' &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp;, &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; , ` &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp;` &nbsp;+ &nbsp;` &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; ' \" + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;+ ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;+ , . &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; + &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" , &nbsp; &nbsp; &nbsp;, &nbsp;` &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;, ' ' &nbsp; ` \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; \" &nbsp;' &nbsp;` \" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; ` \" &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp;` &nbsp; ' &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; \" &nbsp; `</p><p><br /></p><audio controls=\"\">  <source src=\"http://milofultz.com/assets/20200707spacelove.mp3\" type=\"audio/mpeg\" />Your browser does not support the audio element.</audio><p><a href=\"http://milofultz.com/assets/20200707spacelove.xm\">Download the XM file here</a> <sub><a href=\"http://modarchive.org/index.php?article-trackers#milkytracker\">What's an XM file and how do I open it?</a></sub></p><p><br /></p><p class=\"stars\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp;+ &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp;+ &nbsp; + &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; + &nbsp; &nbsp;+ &nbsp;+ &nbsp; &nbsp; + &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp;, &nbsp; &nbsp; \" &nbsp; , &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;+ ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; + &nbsp;. &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; + , &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; + &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; . . &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; + &nbsp;, &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;\" ' &nbsp; &nbsp;+ &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; ` &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp;, &nbsp; &nbsp; \" &nbsp; &nbsp; ' &nbsp; + ` &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp;` &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; ' &nbsp; . &nbsp; &nbsp; ` &nbsp; + , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; . &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp;\" + &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;+ &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp;. &nbsp;, &nbsp;. &nbsp; &nbsp; ` &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; \" &nbsp;, &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp;' &nbsp;\" &nbsp; &nbsp;. &nbsp; &nbsp; , &nbsp; &nbsp;' &nbsp; . &nbsp; &nbsp; &nbsp;' &nbsp;, &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp;, &nbsp;\" &nbsp; , &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; + &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; + &nbsp; ' &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;. &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp;, + &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp;\" &nbsp;' &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; , \" &nbsp; ' &nbsp; ' &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; , &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; ' &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp;, . &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp;' ` &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp;` ` &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp;` &nbsp;' &nbsp;\" &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp;\" &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp; + &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; , &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; + ' \" &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp;+ &nbsp;. \" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp;, &nbsp;. &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp;+ \" &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp;+ &nbsp; &nbsp; ' ` &nbsp;' &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; ' , &nbsp; &nbsp; , &nbsp; &nbsp; ` &nbsp;+ &nbsp; ` ' &nbsp; &nbsp; &nbsp;` &nbsp; &nbsp;` &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; ' + &nbsp; \" &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp;' , &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; ` &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;' &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" ' &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;` , &nbsp; &nbsp;, &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp;\" &nbsp; &nbsp;. &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;' &nbsp;+ &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; . &nbsp; + + &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; . &nbsp; ' + &nbsp;. &nbsp; + + &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp;+ \" &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp;\" &nbsp; , &nbsp; &nbsp;, &nbsp; &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; + &nbsp; \" &nbsp; &nbsp; &nbsp; , &nbsp;+ &nbsp; , &nbsp;, &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; ' &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; \" &nbsp;\" &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp; + , &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp; &nbsp; &nbsp;` ' &nbsp; &nbsp; \" &nbsp; &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; \" &nbsp; . &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;, &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\" \" &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp;' &nbsp; &nbsp; &nbsp; ` &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; &nbsp; &nbsp;, ` &nbsp; &nbsp; &nbsp; + &nbsp;` &nbsp; &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp;. &nbsp; &nbsp;' , &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;\" &nbsp; . &nbsp; . &nbsp; &nbsp; &nbsp; &nbsp; , &nbsp; &nbsp; &nbsp; &nbsp; + &nbsp; &nbsp; &nbsp; &nbsp;+ &nbsp;+ &nbsp; ` &nbsp; &nbsp; &nbsp;, &nbsp;' &nbsp; &nbsp; &nbsp; &nbsp;, + &nbsp; &nbsp; &nbsp; &nbsp;` ' &nbsp; &nbsp; , &nbsp; &nbsp; . &nbsp;' &nbsp; &nbsp; &nbsp;+ &nbsp; &nbsp;`</p>",
            "url": "http://milofultz.com/2020/07/07/spacelove",
            
            
            
            
            
            "date_published": "2020-07-07T00:00:00-07:00",
            "date_modified": "2020-07-07T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/07/03/wordsmash",
            "title": "💻 Wordsmash Explosion - Mastermind With Words (Python)",
            "summary": "This game is Mastermind but with words. Guess a random word chosen by the computer based on how many letters there are in common.",
            "content_text": "You can visit the project and download the files on GitHub.The GameThe easiest way to think of this game is as Mastermind but with words. You can see a more detailed explanation of the rules here.The program will pick a random 5 letter word that the user will try to guess. The user will guess a 5 letter word and the program will return how many of the letters from the user’s word exist in the random word. This process will repeat until the user guesses the word correctly.Future Implementation  Different word lengths as a measure of difficulty.  Options for keeping tabs on which letters you’ve guessed. Implemented 20200708  Hints.",
            "content_html": "<p><a href=\"https://github.com/milofultz/wordmastermind\">You can visit the project and download the files on GitHub.</a></p><h2 id=\"the-game\">The Game</h2><p>The easiest way to think of this game is as Mastermind but with words. <a href=\"https://www.word-grabber.com/printable-word-games/a-mastermind-with-words-jotto\">You can see a more detailed explanation of the rules here.</a></p><p>The program will pick a random 5 letter word that the user will try to guess. The user will guess a 5 letter word and the program will return how many of the letters from the user’s word exist in the random word. This process will repeat until the user guesses the word correctly.</p><hr /><h2 id=\"future-implementation\">Future Implementation</h2><ul>  <li>Different word lengths as a measure of difficulty.</li>  <li><del>Options for keeping tabs on which letters you’ve guessed.</del> <em>Implemented 20200708</em></li>  <li>Hints.</li></ul>",
            "url": "http://milofultz.com/2020/07/03/wordsmash",
            
            
            
            
            
            "date_published": "2020-07-03T00:00:00-07:00",
            "date_modified": "2020-07-03T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/07/02/bmcrawl",
            "title": "💻 Bookmark Crawler - Make Internet More Fun (Python)",
            "summary": "This is a program that utilizes a set of URL's to create a specific set of links based on the sites that you already liked enough to bookmark it.",
            "content_text": "You can find the updated project and all necessary files here on GitHub.GoalSearch engines are too broad and do not serve people who search for interesting and curated content that does not have relevant keywords. For example, searching “DIY Projects” will not yield interesting results, as those SEO search terms are saturated by bigger scale organizations and make finding smaller creators and curators much more difficult. As the internet gets larger and larger, this will only be more of a problem with modern search engines, as their algorithm rewards good SEO and Alexa rankings, which is determined not necessarily by quality of content, but by linking and optimization.So if you want to find interesting and curated content regarding DIY projects, how can you find them? This is an experiment that utilizes given URL’s to create an extremely specific set of links based on the sites that you already like. Hopefully this will provide the user with new domains and pages to explore that are related and recommended within the provided pages.How  Take a single URL or a user’s bookmarks (exported from Firefox as an HTML file) and create a list of URLs to scrape.  Scrape each URL for links.  Allow process to repeat up to N degrees away from initial source URL.      Return an HTML file of new sites to explore.    20201031 - On the backburner, but I hope to turn this into a browser plugin in the future",
            "content_html": "<p><a href=\"https://github.com/milofultz/bmcrawl\">You can find the updated project and all necessary files here on GitHub.</a></p><h2 id=\"goal\">Goal</h2><p>Search engines are too broad and do not serve people who search for interesting and curated content that does not have relevant keywords. For example, searching “DIY Projects” will not yield interesting results, as those SEO search terms are saturated by bigger scale organizations and make finding smaller creators and curators much more difficult. As the internet gets larger and larger, this will only be more of a problem with modern search engines, as their algorithm rewards good SEO and Alexa rankings, which is determined not necessarily by quality of content, but by linking and optimization.</p><p>So if you want to find interesting and curated content regarding DIY projects, how can you find them? This is an experiment that utilizes given URL’s to create an extremely specific set of links based on the sites that you already like. Hopefully this will provide the user with new domains and pages to explore that are related and recommended within the provided pages.</p><h2 id=\"how\">How</h2><ul>  <li>Take a single URL or a user’s bookmarks (exported from Firefox as an HTML file) and create a list of URLs to scrape.</li>  <li>Scrape each URL for links.</li>  <li>Allow process to repeat up to N degrees away from initial source URL.</li>  <li>    <p>Return an HTML file of new sites to explore.</p>  </li>  <li><em>20201031 - On the backburner, but I hope to turn this into a browser plugin in the future</em></li></ul>",
            "url": "http://milofultz.com/2020/07/02/bmcrawl",
            
            
            
            
            
            "date_published": "2020-07-02T00:00:00-07:00",
            "date_modified": "2020-07-02T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/06/26/nobody-takes-advice",
            "title": "Nobody Takes Advice",
            "summary": "The great, unspoken secret of advice is that no one takes it. ... People always just do exactly what they want to do in every scenario. - Nicole Cliffe",
            "content_text": "  “The great, unspoken secret of advice is that no one takes it. … People always just do exactly what they want to do in every scenario.” - Nicole Cliffe[1]References:  https://www.elle.com/life-love/advice/a46441/nicole-knows-how-do-i-support-my-friends-when-they-make-bad-choices/",
            "content_html": "<blockquote>  <p>“The great, unspoken secret of advice is that no one takes it. … People always just do exactly what they want to do in every scenario.” - Nicole Cliffe[1]</p></blockquote><hr /><p>References:</p><ol>  <li><a href=\"https://www.elle.com/life-love/advice/a46441/nicole-knows-how-do-i-support-my-friends-when-they-make-bad-choices/\">https://www.elle.com/life-love/advice/a46441/nicole-knows-how-do-i-support-my-friends-when-they-make-bad-choices/</a></li></ol>",
            "url": "http://milofultz.com/2020/06/26/nobody-takes-advice",
            
            
            
            
            
            "date_published": "2020-06-26T00:00:00-07:00",
            "date_modified": "2020-06-26T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/06/25/inexpensive-games",
            "title": "Inexpensive and Minimal Equipment Games To Play",
            "summary": "I've always been interested in being frugal and wanted a repository of fun and inexpensive games to play by yourself and with others.",
            "content_text": "I’ve always been interested in being frugal and wanted a repository of fun and inexpensive games to play by yourself and with others. Here’s a list of what I’ve found.Solo  Donsol - Donsol is a solitaire card game made by John Eternal during Train Jam using a regular playing card deck. I found this on Hundred Rabbit’s Youtube channel and thought it looked like a fun game for solo play that made solitaire a lot more interesting. The rules are a bit confusing so be sure to watch the video and see them play it through.  Canfield - When I was on a cruise ship for a week for a gig, I literally played this game for probably upwards of 7 hours and I think I won once. For some reason, I keep coming back to it.  Alpha Blitz - Not really a “game” but a good way to pass time. Find a word and then figure out the longest anagram you can using only those letters (lens = senselessness).  Hanafuda (solitaire) v1 &amp; v2 - Super satisfying as a human who loves pattern matching. Very helpful in developing knowledge of the cards and their suits, as having grown up with more easy to organize designs, it takes some getting used it. The deck of cards cost me $1.50 at a Daiso.2+ Player  Word Mastermind/Jotto - I played this a ton with a friend of mine in our down time in college. Super easy to play and you don’t really need anything except a paper and pencil, unless you have a good memory. It’s pretty much just the game mastermind but with words instead. I made a Python version of this, which you can find here.  Paper Football - Aside from the obvious of kicking it, the tabletop play of this game is so fun and makes waiting in a place with a floor or table much more fun. All you need is some scrap paper and a surface.  Exquisite Corpse - Total absurdity and chaos through drawing. Only need a pen and paper and will create a wide range of stuff, from silly pictures to nightmare fuel.  Monkey Tree (video) - This is almost a workout more than it’s a game, but nonetheless a fun way to spend time. One person stands arms out to their sides with legs wide, stable on the ground. The other person climbs on their back and finds ways to maneuver around them. Tougher than it seems, both physically and for your friendship.  Domine (video) - Another one from Hundred Rabbits. All you need is a double 9 domino set. Super quick and fun!  Hanafuda (Koi Koi)  20201031 - Added Hanafuda to both solo and 2+",
            "content_html": "<p>I’ve always been interested in being frugal and wanted a repository of fun and inexpensive games to play by yourself and with others. Here’s a list of what I’ve found.</p><h3 id=\"solo\">Solo</h3><ul>  <li><a href=\"https://itch.io/t/54944/donsol-guide\">Donsol</a> - Donsol is a solitaire card game made by John Eternal during Train Jam using a regular playing card deck. I found this on <a href=\"https://www.youtube.com/watch?v=GNoZrr56GqA\">Hundred Rabbit’s Youtube channel</a> and thought it looked like a fun game for solo play that made solitaire a lot more interesting. The rules are a bit confusing so be sure to watch the video and see them play it through.</li>  <li><a href=\"https://en.wikipedia.org/wiki/Canfield_(solitaire)\">Canfield</a> - When I was on a cruise ship for a week for a gig, I literally played this game for probably upwards of 7 hours and I think I won once. For some reason, I keep coming back to it.</li>  <li><a href=\"https://boardgamegeek.com/boardgame/1443/alpha-blitz\">Alpha Blitz</a> - Not really a “game” but a good way to pass time. Find a word and then figure out the longest anagram you can using only those letters (lens = senselessness).</li>  <li>Hanafuda (solitaire) <a href=\"http://hanafudahawaii.com/gsolitaire1.html\">v1</a> &amp; <a href=\"http://hanafudahawaii.com/gsolitaire2.html\">v2</a> - Super satisfying as a human who loves pattern matching. Very helpful in developing knowledge of the cards and their suits, as having grown up with more easy to organize designs, it takes some getting used it. The deck of cards cost me $1.50 at a Daiso.</li></ul><h3 id=\"2-player\">2+ Player</h3><ul>  <li><a href=\"https://www.word-grabber.com/printable-word-games/a-mastermind-with-words-jotto\">Word Mastermind/Jotto</a> - I played this a ton with a friend of mine in our down time in college. Super easy to play and you don’t really need anything except a paper and pencil, unless you have a good memory. It’s pretty much just the game mastermind but with words instead. <a href=\"/2020/07/03/wordsmash\">I made a Python version of this, which you can find here.</a></li>  <li><a href=\"https://en.wikipedia.org/wiki/Paper_football\">Paper Football</a> - Aside from the obvious of kicking it, the tabletop play of this game is so fun and makes waiting in a place with a floor or table much more fun. All you need is some scrap paper and a surface.</li>  <li><a href=\"https://en.wikipedia.org/wiki/Exquisite_corpse\">Exquisite Corpse</a> - Total absurdity and chaos through drawing. Only need a pen and paper and will create a wide range of stuff, from silly pictures to nightmare fuel.</li>  <li><a href=\"http://athleticexplorations.com/en_US/ae96/\">Monkey Tree</a> (<a href=\"https://www.youtube.com/watch?v=hXVRyI2ULHI\">video</a>) - This is almost a workout more than it’s a game, but nonetheless a fun way to spend time. One person stands arms out to their sides with legs wide, stable on the ground. The other person climbs on their back and finds ways to maneuver around them. Tougher than it seems, both physically and for your friendship.</li>  <li><a href=\"/2020/09/01/domine\">Domine</a> (<a href=\"https://www.youtube.com/watch?v=fjZb190qn00\">video</a>) - Another one from Hundred Rabbits. All you need is a double 9 domino set. Super quick and fun!</li>  <li><a href=\"https://www.gamedesign.jp/flash/hanafuda/rule_e.html\">Hanafuda (Koi Koi)</a></li></ul><hr /><ul>  <li><em>20201031 - Added Hanafuda to both solo and 2+</em></li></ul>",
            "url": "http://milofultz.com/2020/06/25/inexpensive-games",
            
            
            
            
            
            "date_published": "2020-06-25T00:00:00-07:00",
            "date_modified": "2020-06-25T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/06/21/quantity-quality",
            "title": "Quality and quantity's relevance to critical feeling",
            "summary": "Quality and quantity are immensely useful in the developing of critical feeling and the ability for honest and effective communication.",
            "content_text": "Quality is an attribute you give to help label something. Quantity is a measurement you use to help label something.Quality requires quantity for it to exist. One can’t measure how hard something is without two things to compare them to. Quantity requires quality for it to exist. One can’t measure something with which it has no label.To attribute a quality to something, it must be fully defined. One cannot attribute a quality to something without fully knowing what it is. In turn, one cannot measure something that has not been fully defined. What is 0 or 100 if one cannot define them?This struck me as I was watching a video[1] and ended up with a discussion with a roommate about this relates to critical feeling. As defined by Bret Weinstein[3], critical feeling is making sure that you don’t get caught up in other people’s feelings. One can use quality and quantity to more honestly trust your critical feeling in this way:When one is presented with a quality or label, either from another person or from within themselves, one must seek to define the quality as fully and completely as possible. For instance, if one is accused of being “lazy”, one must define it, and preferably with whoever is making the accusation in mind. Once this quality is defined, one can then measure if they indeed hold this attribute, how much, and the impact this quality is having upon those affected, which could be themselves, their community, their family, or whatever. Once one has this information, one can truly understand the circumstances and be critical of the quality and it’s truthfulness in it’s application.If one cannot define the quality that is being attributed, they have no business attributing it. And if once defined, one cannot measure the impact the attribute has, then it is not important.I believe this exercise has the potential to avoid claims of essentialism[4] (all humans are bad/good, all X people are Y), to help ground accusations or problems in the realm of the logical and the real, and to present us with further action, instead of letting our brain buck or accept a quality that may or may not be useful or important.References:  https://youtu.be/eOfVBqGPwi0?t=886  Critical Feeling  https://www.youtube.com/watch?v=PfAumoTIeik  https://en.wikipedia.org/wiki/Essentialism",
            "content_html": "<p>Quality is an attribute you give to help label something. Quantity is a measurement you use to help label something.</p><p>Quality requires quantity for it to exist. One can’t measure how hard something is without two things to compare them to. Quantity requires quality for it to exist. One can’t measure something with which it has no label.</p><p>To attribute a quality to something, it must be fully defined. One cannot attribute a quality to something without fully knowing what it is. In turn, one cannot measure something that has not been fully defined. What is 0 or 100 if one cannot define them?</p><hr /><p>This struck me as I was watching a video[1] and ended up with a discussion with a roommate about this relates to <a href=\"/2020/06/10/critical-feeling\">critical feeling</a>. As defined by Bret Weinstein[3], critical feeling is making sure that you don’t get caught up in other people’s feelings. One can use quality and quantity to more honestly trust your critical feeling in this way:</p><p>When one is presented with a quality or label, either from another person or from within themselves, one must seek to define the quality as fully and completely as possible. For instance, if one is accused of being “lazy”, one must define it, and preferably with whoever is making the accusation in mind. Once this quality is defined, one can then measure if they indeed hold this attribute, how much, and the impact this quality is having upon those affected, which could be themselves, their community, their family, or whatever. Once one has this information, one can truly understand the circumstances and be critical of the quality and it’s truthfulness in it’s application.</p><p>If one cannot define the quality that is being attributed, they have no business attributing it. And if once defined, one cannot measure the impact the attribute has, then it is not important.</p><p>I believe this exercise has the potential to avoid claims of essentialism[4] (all humans are bad/good, all X people are Y), to help ground accusations or problems in the realm of the logical and the real, and to present us with further action, instead of letting our brain buck or accept a quality that may or may not be useful or important.</p><hr /><p>References:</p><ol>  <li><a href=\"https://youtu.be/eOfVBqGPwi0?t=886\">https://youtu.be/eOfVBqGPwi0?t=886</a></li>  <li><a href=\"/2020/06/10/critical-feeling\">Critical Feeling</a></li>  <li><a href=\"https://www.youtube.com/watch?v=PfAumoTIeik\">https://www.youtube.com/watch?v=PfAumoTIeik</a></li>  <li><a href=\"https://en.wikipedia.org/wiki/Essentialism\">https://en.wikipedia.org/wiki/Essentialism</a></li></ol>",
            "url": "http://milofultz.com/2020/06/21/quantity-quality",
            
            
            
            
            
            "date_published": "2020-06-21T00:00:00-07:00",
            "date_modified": "2020-06-21T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/06/10/critical-feeling",
            "title": "Critical feeling is as important as critical thinking",
            "summary": "Critical feeling is making sure that you don't get caught up in other people's feelings. I believe this can improve and better our communication.",
            "content_text": "  Critical feeling is making sure that you don’t get caught up in other people’s feelings.[1]I like this idea a lot because it clarifies a problem that I have often had. My emotional conviction on my values and ethics have often been weak, untethered on clear principled thought, and thus I have been more susceptible to bandwagoning based on big emotions. There have been many times where I later found that my actions or thoughts were not honest to what I actually desired in the situation or believed and this I think was due to a lack of critical feeling.When it comes to critically thinking, the analysis of facts to form a judgment[2], I tend to be more skeptical in the points or ideas of others. I usually disagree with people until I run through the scenario sufficiently and fully understand and agree with what is being presented. Emotions tend to override this skepticism and sweep me up in the romantic nature of whatever is at hand. This I believe is due to a relatively weak understanding of my own emotions and what they are trying to communicate to me, as well as a lack of practice in working with them.The new question is how to practice and develop critical feeling. (Update 20200622: I developed a method that you can find here). As for critical thinking, according to this article in the HBR[3], there are three things that can help you: question assumptions, reason through logic, and diversify thought. I believe these are the same, and for people like me who have had problems with their emotional development, this can include some really difficult practice, alone or with a guide (therapist, friend, family, etc.).In the last few months, I have been going to therapy weekly, devouring YouTube videos about philosophy[4][5][6], and talking a lot with my friends and family about more emotionally complex things, and I have noticed a much larger capacity to understand what is happening with my emotional state, and therefore maintain what I feel while also being able to empathize better with others.References:  https://www.youtube.com/watch?v=PfAumoTIeik  https://en.wikipedia.org/wiki/Critical_thinking  https://hbr.org/2019/05/3-simple-habits-to-improve-your-critical-thinking  https://www.youtube.com/user/thephilosophytube/videos  https://www.youtube.com/user/ContraPoints  https://www.youtube.com/user/alexjoconnor  Quality and quantity’s relevance to critical feeling",
            "content_html": "<blockquote>  <p>Critical feeling is making sure that you don’t get caught up in other people’s feelings.[1]</p></blockquote><p>I like this idea a lot because it clarifies a problem that I have often had. My emotional conviction on my values and ethics have often been weak, untethered on clear principled thought, and thus I have been more susceptible to bandwagoning based on big emotions. There have been many times where I later found that my actions or thoughts were not honest to what I actually desired in the situation or believed and this I think was due to a lack of critical feeling.</p><p>When it comes to critically thinking, the analysis of facts to form a judgment[2], I tend to be more skeptical in the points or ideas of others. I usually disagree with people until I run through the scenario sufficiently and fully understand and agree with what is being presented. Emotions tend to override this skepticism and sweep me up in the romantic nature of whatever is at hand. This I believe is due to a relatively weak understanding of my own emotions and what they are trying to communicate to me, as well as a lack of practice in working with them.</p><p>The new question is how to practice and develop critical feeling. <em>(Update 20200622: I developed a method that you can find <a href=\"/2020/06/21/quantity-quality\">here</a>)</em>. As for critical thinking, according to this article in the HBR[3], there are three things that can help you: question assumptions, reason through logic, and diversify thought. I believe these are the same, and for people like me who have had problems with their emotional development, this can include some really difficult practice, alone or with a guide (therapist, friend, family, etc.).</p><p>In the last few months, I have been going to therapy weekly, devouring YouTube videos about philosophy[4][5][6], and talking a lot with my friends and family about more emotionally complex things, and I have noticed a much larger capacity to understand what is happening with my emotional state, and therefore maintain what I feel while also being able to empathize better with others.</p><hr /><p>References:</p><ol>  <li><a href=\"https://www.youtube.com/watch?v=PfAumoTIeik\">https://www.youtube.com/watch?v=PfAumoTIeik</a></li>  <li><a href=\"https://en.wikipedia.org/wiki/Critical_thinking\">https://en.wikipedia.org/wiki/Critical_thinking</a></li>  <li><a href=\"https://hbr.org/2019/05/3-simple-habits-to-improve-your-critical-thinking\">https://hbr.org/2019/05/3-simple-habits-to-improve-your-critical-thinking</a></li>  <li><a href=\"https://www.youtube.com/user/thephilosophytube/videos\">https://www.youtube.com/user/thephilosophytube/videos</a></li>  <li><a href=\"https://www.youtube.com/user/ContraPoints\">https://www.youtube.com/user/ContraPoints</a></li>  <li><a href=\"https://www.youtube.com/user/alexjoconnor\">https://www.youtube.com/user/alexjoconnor</a></li>  <li><a href=\"/2020/06/21/quantity-quality\">Quality and quantity’s relevance to critical feeling</a></li></ol>",
            "url": "http://milofultz.com/2020/06/10/critical-feeling",
            
            
            
            
            
            "date_published": "2020-06-10T00:00:00-07:00",
            "date_modified": "2020-06-10T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/05/25/exercise-routine",
            "title": "Simple + Minimal Exercise Routine",
            "summary": "A simple, minimal and modular exercise routine I developed that can be done anywhere, focusing mainly on short and simple circuits.",
            "content_text": "A couple of weeks ago, I worked on starting my Zettelkasten and just to try it out and see how it worked, I started with exercise. Using it and a few resources, I was able to come up with a list of various strength, mobility, and flexibility exercises that target various areas and a very basic framework with which to apply them. I won’t be posting all the exercises here, but I will show the system, my focus areas, and my general guidelines it is based on.My dream is to be able to do this anywhere and at anytime.My motivation to exercise is certainly not to get ripped or super swole. As anybody who knows me could probably guess, that’s a bit out of reach, as I am a tiny stick with the metabolism of a squirrel. So knowing that, I wanted my system to take the least amount of time and have the least amount of gear to haul around (preferably zero). I also knew after having purchased and selling gear multiple times that having exercise gear doesn’t really inspire me to exercise, anyway, so I aimed mostly for bodyweight exercises for this reason.After doing a cursory amount of research, I aimed to focus on these different areas[1] in the main part of my workout:  Upper Body  Lower Body  Core  CardioThe other category mentioned was flexibility, which I decided to use as a bookend for my workout.After digging around and settling on a bunch of options for exercises in each of these categories, I am using a high intensity interval training framework described in this blog post[2], “using full-body exercises, while training in a shorter amount of time and doing a circuit”.  Dynamic stretching[3] of whole body, top to bottom[4]  Circuit using one exercise from each of the four categories above in timed increments in any order  Repeat step 2 with a short break until you feel well exercised  Flexibility exercises of joints[5][6] and static stretching of whole body, top to bottomUsing bodyweight exercises, this can essentially be done in tiny space with nothing, which is really useful for getting me to do it instead of making excuses.ExamplesThese are some examples of circuits I have been using. One of these circuits per session, 4x through the circuit with 30s on each exercise and 10s rest in between each:Circuit 1  Pushups  Squats  Situps  Shoulder to Foot TapsCircuit 2  Superman  Lunges  Mountain Climbers  Jumping JacksCircuit 3  Pullup Superman  Lunges  Bicycle Crunches  Jumping JacksHIITimerI made a super basic program that utilizes the native TTS on your computer to help time your exercise routine and loads exercise presets from plaintext files you can create and edit. Check it out here.  20201023: Added example circuits  20201028: Added HIITimer programReferences:  http://www.fitnessauthority247.com/fitness/fit-for-life-the-top-five-areas-to-work-on/  https://themovementathlete.com/workout-in-small-spaces/  https://www.youtube.com/watch?v=LjcZ7FqS5JE  https://www.hss.edu/conditions_dynamic-static-stretching.asp#dynamic  https://www.reddit.com/r/flexibility/comments/6cwsap/complete_guide_to_improving_ankle_mobility/          https://www.youtube.com/watch?v=1QPKpk8WC_I      https://www.youtube.com/watch?v=jlewUVQliFA        https://www.reddit.com/r/Fitness/comments/eh1tb/please_send_help_coder_lifter_with_evertighter/c181mg6/",
            "content_html": "<p>A couple of weeks ago, I worked on starting my <a href=\"/2020/05/22/zettelkasten\">Zettelkasten</a> and just to try it out and see how it worked, I started with exercise. Using it and a few resources, I was able to come up with a list of various strength, mobility, and flexibility exercises that target various areas and a very basic framework with which to apply them. I won’t be posting all the exercises here, but I will show the system, my focus areas, and my general guidelines it is based on.</p><p><strong>My dream is to be able to do this anywhere and at anytime.</strong></p><p>My motivation to exercise is certainly not to get ripped or super swole. As anybody who knows me could probably guess, that’s a bit out of reach, as I am a tiny stick with the metabolism of a squirrel. So knowing that, I wanted my system to take the least amount of time and have the least amount of gear to haul around (preferably zero). I also knew after having purchased and selling gear multiple times that having exercise gear doesn’t really inspire me to exercise, anyway, so I aimed mostly for bodyweight exercises for this reason.</p><p>After doing a cursory amount of research, I aimed to focus on these different areas[1] in the main part of my workout:</p><ul>  <li>Upper Body</li>  <li>Lower Body</li>  <li>Core</li>  <li>Cardio</li></ul><p>The other category mentioned was flexibility, which I decided to use as a bookend for my workout.</p><p>After digging around and settling on a bunch of options for exercises in each of these categories, I am using a high intensity interval training framework described in this blog post[2], “using full-body exercises, while training in a shorter amount of time and doing a circuit”.</p><ol>  <li>Dynamic stretching[3] of whole body, top to bottom[4]</li>  <li>Circuit using one exercise from each of the four categories above in timed increments in any order</li>  <li>Repeat step 2 with a short break until you feel well exercised</li>  <li>Flexibility exercises of joints[5][6] and static stretching of whole body, top to bottom</li></ol><p>Using bodyweight exercises, this can essentially be done in tiny space with nothing, which is really useful for getting me to do it instead of making excuses.</p><h3 id=\"examples\">Examples</h3><p>These are some examples of circuits I have been using. One of these circuits per session, 4x through the circuit with 30s on each exercise and 10s rest in between each:</p><p><strong>Circuit 1</strong></p><ul>  <li>Pushups</li>  <li>Squats</li>  <li>Situps</li>  <li>Shoulder to Foot Taps</li></ul><p><strong>Circuit 2</strong></p><ul>  <li>Superman</li>  <li>Lunges</li>  <li>Mountain Climbers</li>  <li>Jumping Jacks</li></ul><p><strong>Circuit 3</strong></p><ul>  <li>Pullup Superman</li>  <li>Lunges</li>  <li>Bicycle Crunches</li>  <li>Jumping Jacks</li></ul><h3 id=\"hiitimer\">HIITimer</h3><p>I made a super basic program that utilizes the native TTS on your computer to help time your exercise routine and loads exercise presets from plaintext files you can create and edit. <a href=\"/2020/10/25/hiitimer\">Check it out here.</a></p><hr /><ul>  <li><em>20201023: Added example circuits</em></li>  <li><em>20201028: Added HIITimer program</em></li></ul><p>References:</p><ol>  <li><a href=\"http://www.fitnessauthority247.com/fitness/fit-for-life-the-top-five-areas-to-work-on/\">http://www.fitnessauthority247.com/fitness/fit-for-life-the-top-five-areas-to-work-on/</a></li>  <li><a href=\"https://themovementathlete.com/workout-in-small-spaces/\">https://themovementathlete.com/workout-in-small-spaces/</a></li>  <li><a href=\"https://www.youtube.com/watch?v=LjcZ7FqS5JE\">https://www.youtube.com/watch?v=LjcZ7FqS5JE</a></li>  <li><a href=\"https://www.hss.edu/conditions_dynamic-static-stretching.asp#dynamic\">https://www.hss.edu/conditions_dynamic-static-stretching.asp#dynamic</a></li>  <li><a href=\"https://www.reddit.com/r/flexibility/comments/6cwsap/complete_guide_to_improving_ankle_mobility/\">https://www.reddit.com/r/flexibility/comments/6cwsap/complete_guide_to_improving_ankle_mobility/</a>    <ol>      <li><a href=\"https://www.youtube.com/watch?v=1QPKpk8WC_I\">https://www.youtube.com/watch?v=1QPKpk8WC_I</a></li>      <li><a href=\"https://www.youtube.com/watch?v=jlewUVQliFA\">https://www.youtube.com/watch?v=jlewUVQliFA</a></li>    </ol>  </li>  <li><a href=\"https://www.reddit.com/r/Fitness/comments/eh1tb/please_send_help_coder_lifter_with_evertighter/c181mg6/\">https://www.reddit.com/r/Fitness/comments/eh1tb/please_send_help_coder_lifter_with_evertighter/c181mg6/</a></li></ol>",
            "url": "http://milofultz.com/2020/05/25/exercise-routine",
            
            
            
            
            
            "date_published": "2020-05-25T00:00:00-07:00",
            "date_modified": "2020-05-25T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/05/23/day-planner",
            "title": "🗺 Day planner based on location",
            "summary": "A lateral-thinking way to encourage you into desired activities.",
            "content_text": "I found this idea on the internet probably around 2009, made my own version, and then unfortunately lost the reference to the original page. If you know where or from whom this originated, please tell me!The idea of this is to have a day planner where the axis around which you plan is not time, but location. Instead of thinking about what you are going to do between 9am and 10am, this has you think about what you can do in a given space.The thing I like best about this is that it is really good for keeping you in touch with activities you enjoy and places you like, making it easy to do those things by choosing it off of a menu. It’s almost like a worksheet for the day, with the bottom of the page open for note taking, drawing, and scribbling ideas down. Appointments and other real-life things aside, this is a lateral-thinking way to encourage you into desired activities.",
            "content_html": "<p>I found this idea on the internet probably around 2009, made my own version, and then unfortunately lost the reference to the original page. If you know where or from whom this originated, <strong>please</strong> tell me!</p><p>The idea of this is to have a day planner where the axis around which you plan is not time, but location. Instead of thinking about what you are going to do between 9am and 10am, this has you think about what you can do in a given space.</p><p><img src=\"http://milofultz.com/assets/20200523dayplan.jpg\" alt=\"Example of the day planner\" /></p><p>The thing I like best about this is that it is really good for keeping you in touch with activities you enjoy and places you like, making it easy to do those things by choosing it off of a menu. It’s almost like a worksheet for the day, with the bottom of the page open for note taking, drawing, and scribbling ideas down. Appointments and other real-life things aside, this is a lateral-thinking way to encourage you into desired activities.</p>",
            "url": "http://milofultz.com/2020/05/23/day-planner",
            
            
            
            
            
            "date_published": "2020-05-23T00:00:00-07:00",
            "date_modified": "2020-05-23T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://milofultz.com/2020/05/22/zettelkasten",
            "title": "I just found out about Zettelkasten",
            "summary": "Zettelkasten makes all of your notes easier to develop, utilize, and organize for whatever you need them",
            "content_text": "I’m probably going to do a hack job explaining this, so TL;DR: Zettelkasten makes all of your notes easier to develop, utilize, and organize for whatever you need them.Zettelkasten is a way of note taking and cataloguing that was popularized by sociologist Niklas Luhmann. This particular system intrigued me because it seems to overcome the issues that some basic note taking strategies have.Note taking, in the way I was taught, is all about writing down what you’re thinking in a stream-of-consiousness, extremely linear way. This can be good for going through a whole thought process and getting it all down, but it’s lacking any ability to be anything but “start here and end up there”. It’s hard to link it to any other ideas without explicitly remembering what your thought process was. It is possible, with use of notes in the margins, post it notes, and maybe a synopsis (which is also a written out linear thought), but is very unwieldy and again relies on your remembering or regularly reviewing your documented info. Kind of defeats the purpose of documentation.The other way is to use a kind of mind map. Starting with a basic idea or concept, one branches out into all related things. Maybe “Food” branches off into “Bread”, “Vegetables”, “Nuts”, “Seeds”, and “Fruits”. Maybe “Bread” then branches off into “Focaccia”, “Yeast”, “Sourdough”, “Rolls”, “Pizza”, etc. This can go along for a LONG time, leading people into a more creative exploratory area, kind of allowing their brain to just utilize that free association. The problem that can occur here is again a lack of mobility. Under “Bread”, maybe you want to create some kind of grouping by if it is a yeasted bread, or if it is enriched. Maybe you want to expound on the greatness of sourdough crust on a pizza, where would you put it: under “Pizza” or “Sourdough”? How would you go about organizing these already existing elements in the map without having duplicates or just wasting time moving things around?I believe that the Zettelkasten can help solve this issue. This allowed Luhmann the luxury of seeing this larger mapping of ideas and freedom of association that the mindmap provides, along with the linearity of thought that the more “academic” linear note taking technique provides, but without their rigid limitations.In my short time playing with this note taking concept, I have used it to take notes on a book I’m reading and help develop some of the major points I’ve seen into things that are relevant to me. I’m able to cross reference from different notes, allowing core concepts to stand on their own and also lead me down expository rabbit holes, allowing a development of smaller ideas that can create new connections once more.The way I see it, the longer I keep my Zettelkasten, the more robust my index of information, the more connections I can make, the better I can understand and develop my ideas.Because you’re probably wondering what it actually is and not just my real glossy surface level explanation of it, I recommend reading more in depth on it in these two articles:  The Zettelkasten Method  Zettelkasten — How One German Scholar Was So Freakishly Productive",
            "content_html": "<p>I’m probably going to do a hack job explaining this, so TL;DR: Zettelkasten makes all of your notes easier to develop, utilize, and organize for whatever you need them.</p><p>Zettelkasten is a way of note taking and cataloguing that was popularized by sociologist Niklas Luhmann. This particular system intrigued me because it seems to overcome the issues that some basic note taking strategies have.</p><p>Note taking, in the way I was taught, is all about writing down what you’re thinking in a stream-of-consiousness, extremely linear way. This can be good for going through a whole thought process and getting it all down, but it’s lacking any ability to be anything but “start here and end up there”. It’s hard to link it to any other ideas without explicitly remembering what your thought process was. It is possible, with use of notes in the margins, post it notes, and maybe a synopsis (which is also a written out linear thought), but is very unwieldy and again relies on your remembering or regularly reviewing your documented info. Kind of defeats the purpose of documentation.</p><p>The other way is to use a kind of <a href=\"https://en.wikipedia.org/wiki/Mind_map\">mind map</a>. Starting with a basic idea or concept, one branches out into all related things. Maybe “Food” branches off into “Bread”, “Vegetables”, “Nuts”, “Seeds”, and “Fruits”. Maybe “Bread” then branches off into “Focaccia”, “Yeast”, “Sourdough”, “Rolls”, “Pizza”, etc. This can go along for a LONG time, leading people into a more creative exploratory area, kind of allowing their brain to just utilize that free association. The problem that can occur here is again a lack of mobility. Under “Bread”, maybe you want to create some kind of grouping by if it is a yeasted bread, or if it is enriched. Maybe you want to expound on the greatness of sourdough crust on a pizza, where would you put it: under “Pizza” or “Sourdough”? How would you go about organizing these already existing elements in the map without having duplicates or just wasting time moving things around?</p><p>I believe that the Zettelkasten can help solve this issue. This allowed Luhmann the luxury of seeing this larger mapping of ideas and freedom of association that the mindmap provides, along with the linearity of thought that the more “academic” linear note taking technique provides, but without their rigid limitations.</p><p>In my short time playing with this note taking concept, I have used it to take notes on a book I’m reading and help develop some of the major points I’ve seen into things that are relevant to me. I’m able to cross reference from different notes, allowing core concepts to stand on their own and also lead me down expository rabbit holes, allowing a development of smaller ideas that can create new connections once more.</p><p>The way I see it, the longer I keep my Zettelkasten, the more robust my index of information, the more connections I can make, the better I can understand and develop my ideas.</p><p>Because you’re probably wondering what it actually is and not just my real glossy surface level explanation of it, I recommend reading more in depth on it in these two articles:</p><ul>  <li><a href=\"https://www.lesswrong.com/posts/NfdHG6oHBJ8Qxc26s/the-zettelkasten-method-1\">The Zettelkasten Method</a></li>  <li><a href=\"https://writingcooperative.com/zettelkasten-how-one-german-scholar-was-so-freakishly-productive-997e4e0ca125\">Zettelkasten — How One German Scholar Was So Freakishly Productive</a></li></ul>",
            "url": "http://milofultz.com/2020/05/22/zettelkasten",
            
            
            
            
            
            "date_published": "2020-05-22T00:00:00-07:00",
            "date_modified": "2020-05-22T00:00:00-07:00",
            
                "author":  {
                "name": "Milo Fultz",
                "url": "http://milofultz.com",
                "avatar": null
                }
                
            
        }
    
    ]
}